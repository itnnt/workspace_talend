// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package vincere_etl.ftp_download_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: ftp_download Purpose: <br>
 * Description: <br>
 * 
 * @author user@talend.com
 * @version 7.2.1.20190620_1446
 * @status
 */
public class ftp_download implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "ftp_download";
	private final String projectName = "VINCERE_ETL";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					ftp_download.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(ftp_download.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFTPGet_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFTPGet_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFTPGet_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFTPGet_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFTPGet_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tFTPGet_1 begin ] start
				 */

				ok_Hash.put("tFTPGet_1", false);
				start_Hash.put("tFTPGet_1", System.currentTimeMillis());

				currentComponent = "tFTPGet_1";

				int tos_count_tFTPGet_1 = 0;

				int nb_file_tFTPGet_1 = 0;
				final com.enterprisedt.net.ftp.TransferCompleteStrings msg_tFTPGet_1 = new com.enterprisedt.net.ftp.TransferCompleteStrings();

				class FTPGetter_tFTPGet_1 {
					private com.enterprisedt.net.ftp.FTPClient ftpClient = null;
					private int count = 0;

					public void getAllFiles(String remoteDirectory, String localDirectory) throws java.io.IOException,
							com.enterprisedt.net.ftp.FTPException, java.text.ParseException {

						chdir(remoteDirectory);
						String path = ftpClient.pwd();
						String[] ftpFileNames = null;
						com.enterprisedt.net.ftp.FTPFile[] ftpFiles = null;

						try {
							// use dir() for Bug9562 with FTP server in AS400
							ftpFileNames = ftpClient.dir(null, false);
							// Bug 13272, the same as getFiles().
						} catch (com.enterprisedt.net.ftp.FTPException e) {

							ftpFileNames = null;
							ftpFiles = ftpClient.dirDetails(".");
						}

						// if dirDetails(...) doesn't work, then use dir(...), distinguish file type by
						// FTPException

						if ((ftpFiles == null) && (ftpFileNames != null)) {
							// if the file is folder, catch the FTPException and recur
							for (String ftpFileName : ftpFileNames) {
								try {
									downloadFile(localDirectory + "/" + ftpFileName, ftpFileName);
								} catch (com.enterprisedt.net.ftp.FTPException e) {

									java.io.File localFile = new java.io.File(localDirectory + "/" + ftpFileName);

									if (!localFile.exists()) {
										localFile.mkdir();
									}
									getAllFiles(path + "/" + ftpFileName, localDirectory + "/" + ftpFileName);
									chdir(path);
								}
							}
						} else {
							for (com.enterprisedt.net.ftp.FTPFile ftpFile : ftpFiles) {

								if (ftpFile.isDir()) {
									if ((!(".").equals(ftpFile.getName())) && (!("..").equals(ftpFile.getName()))) {
										java.io.File localFile = new java.io.File(
												localDirectory + "/" + ftpFile.getName());

										if (!localFile.exists()) {
											localFile.mkdir();
										}
										getAllFiles(path + "/" + ftpFile.getName(),
												localDirectory + "/" + ftpFile.getName());
										chdir(path);
									}
								} else if (!ftpFile.isLink()) {
									downloadFile(localDirectory + "/" + ftpFile.getName(), ftpFile.getName());
								}
							}
						}
					}

					public void getFiles(String remoteDirectory, String localDirectory, String maskStr)
							throws java.io.IOException, com.enterprisedt.net.ftp.FTPException,
							java.text.ParseException {
						chdir(remoteDirectory);
						String[] ftpFileNames = null;
						com.enterprisedt.net.ftp.FTPFile[] ftpFiles = null;

						try {
							// use dir() for Bug9562 with FTP server in AS400 (the same way as
							// getAllFiles())
							ftpFileNames = ftpClient.dir(null, false);
							// Bug 13272, if dir() throw exception, use dirDetails().
						} catch (com.enterprisedt.net.ftp.FTPException e) {

							ftpFileNames = null;
							ftpFiles = ftpClient.dirDetails(".");
						}
						// if dirDetails(...) doesn't work, then use dir(...), but can not distinguish
						// file type

						if ((ftpFiles == null) && (ftpFileNames != null)) {
							for (String ftpFileName : ftpFileNames) {
								if (ftpFileName.matches(maskStr)) {
									downloadFile(localDirectory + "/" + ftpFileName, ftpFileName);
								}
							}
						} else {

							for (com.enterprisedt.net.ftp.FTPFile ftpFile : ftpFiles) {

								if (!ftpFile.isDir() && !ftpFile.isLink()) {
									String fileName = ftpFile.getName();

									if (fileName.matches(maskStr)) {
										downloadFile(localDirectory + "/" + fileName, fileName);
									}
								}
							}
						}
					}

					public void chdir(String path) throws java.io.IOException, com.enterprisedt.net.ftp.FTPException {
						if (!".".equals(path)) {
							ftpClient.chdir(path);
						}
					}

					public String pwd() throws java.io.IOException, com.enterprisedt.net.ftp.FTPException {
						return ftpClient.pwd();
					}

					private void downloadFile(String localFileName, String remoteFileName)
							throws java.io.IOException, com.enterprisedt.net.ftp.FTPException {
						java.io.File localFile = new java.io.File(localFileName);

						try {

							if (!localFile.exists()) {
								ftpClient.get(localFileName, remoteFileName);

								msg_tFTPGet_1.add("file [" + remoteFileName + "] downloaded successfully.");

								System.out.println("file [" + remoteFileName + "] downloaded successfully.");

								globalMap.put("tFTPGet_1_CURRENT_STATUS", "File transfer OK.");
							} else {
								msg_tFTPGet_1.add("file [" + remoteFileName + "] exit transmission.");
								globalMap.put("tFTPGet_1_CURRENT_STATUS", "No file transfered.");
							}
						} catch (com.enterprisedt.net.ftp.FTPException e) {
							msg_tFTPGet_1.add("file [" + remoteFileName + "] downloaded unsuccessfully.");
							globalMap.put("tFTPGet_1_CURRENT_STATUS", "File transfer fail.");
							throw e;
						}
						count++;
					}
				}
				com.enterprisedt.net.ftp.FTPClient ftp_tFTPGet_1 = null;

				ftp_tFTPGet_1 = (com.enterprisedt.net.ftp.FTPClient) globalMap.get("conn_tFTPConnection_1");

				String rootDir_tFTPGet_1 = ftp_tFTPGet_1.pwd();

				msg_tFTPGet_1.clearAll();
				FTPGetter_tFTPGet_1 getter_tFTPGet_1 = new FTPGetter_tFTPGet_1();
				getter_tFTPGet_1.ftpClient = ftp_tFTPGet_1;
				String remotedir_tFTPGet_1 = "/data";
				if (!".".equals(remotedir_tFTPGet_1)) {
					ftp_tFTPGet_1.chdir(remotedir_tFTPGet_1);
				}
				java.util.List<String> maskList_tFTPGet_1 = new java.util.ArrayList<String>();

				maskList_tFTPGet_1.add("*.*");
				ftp_tFTPGet_1.setType(com.enterprisedt.net.ftp.FTPTransferType.ASCII);
				String localdir_tFTPGet_1 = "/Users/tungnguyen/Desktop/firstcall";
//create folder if local direcotry (assigned by property) not exists
				java.io.File dirHandle_tFTPGet_1 = new java.io.File(localdir_tFTPGet_1);

				if (!dirHandle_tFTPGet_1.exists()) {
					dirHandle_tFTPGet_1.mkdirs();
				}
				String root_tFTPGet_1 = getter_tFTPGet_1.pwd();
				if ("/".equals(root_tFTPGet_1)) {
					root_tFTPGet_1 = ".";
				}

				for (String maskStr_tFTPGet_1 : maskList_tFTPGet_1) {

					/**
					 * [tFTPGet_1 begin ] stop
					 */

					/**
					 * [tFTPGet_1 main ] start
					 */

					currentComponent = "tFTPGet_1";

					try {
						globalMap.put("tFTPGet_1_CURRENT_STATUS", "No file transfered.");
						String dir_tFTPGet_1 = root_tFTPGet_1;

						String mask_tFTPGet_1 = maskStr_tFTPGet_1.replaceAll("\\\\", "/");

						int i_tFTPGet_1 = mask_tFTPGet_1.lastIndexOf('/');

						if (i_tFTPGet_1 != -1) {
							dir_tFTPGet_1 = mask_tFTPGet_1.substring(0, i_tFTPGet_1);
							mask_tFTPGet_1 = mask_tFTPGet_1.substring(i_tFTPGet_1 + 1);
						}

						mask_tFTPGet_1 = org.apache.oro.text.GlobCompiler.globToPerl5(mask_tFTPGet_1.toCharArray(),
								org.apache.oro.text.GlobCompiler.DEFAULT_MASK);

						if (dir_tFTPGet_1 != null && !"".equals(dir_tFTPGet_1)) {
							if ((".*").equals(mask_tFTPGet_1)) {
								getter_tFTPGet_1.getAllFiles(dir_tFTPGet_1, localdir_tFTPGet_1);
							} else {
								getter_tFTPGet_1.getFiles(dir_tFTPGet_1, localdir_tFTPGet_1, mask_tFTPGet_1);
							}
						}
						getter_tFTPGet_1.chdir(root_tFTPGet_1);
					} catch (java.lang.Exception e) {

						throw (e);

					}

					tos_count_tFTPGet_1++;

					/**
					 * [tFTPGet_1 main ] stop
					 */

					/**
					 * [tFTPGet_1 process_data_begin ] start
					 */

					currentComponent = "tFTPGet_1";

					/**
					 * [tFTPGet_1 process_data_begin ] stop
					 */

					/**
					 * [tFTPGet_1 process_data_end ] start
					 */

					currentComponent = "tFTPGet_1";

					/**
					 * [tFTPGet_1 process_data_end ] stop
					 */

					/**
					 * [tFTPGet_1 end ] start
					 */

					currentComponent = "tFTPGet_1";

				}
				nb_file_tFTPGet_1 = getter_tFTPGet_1.count;

				msg_tFTPGet_1.add(ftp_tFTPGet_1.getDownloadCount() + " files have been downloaded.");
				String[] msgAll_tFTPGet_1 = msg_tFTPGet_1.getAll();
				StringBuffer sb_tFTPGet_1 = new StringBuffer();

				if (msgAll_tFTPGet_1 != null) {
					for (String item_tFTPGet_1 : msgAll_tFTPGet_1) {
						sb_tFTPGet_1.append(item_tFTPGet_1).append("\n");
					}
				}
				globalMap.put("tFTPGet_1_TRANSFER_MESSAGES", sb_tFTPGet_1.toString());

				ftp_tFTPGet_1.chdir(rootDir_tFTPGet_1);
				globalMap.put("tFTPGet_1_NB_FILE", nb_file_tFTPGet_1);

				ok_Hash.put("tFTPGet_1", true);
				end_Hash.put("tFTPGet_1", System.currentTimeMillis());

				/**
				 * [tFTPGet_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFTPGet_1 finally ] start
				 */

				currentComponent = "tFTPGet_1";

				/**
				 * [tFTPGet_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFTPGet_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final ftp_download ftp_downloadClass = new ftp_download();

		int exitCode = ftp_downloadClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = ftp_download.class.getClassLoader()
					.getResourceAsStream("vincere_etl/ftp_download_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = ftp_download.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				if (context != null && context.isEmpty()) {
					defaultProps.load(inContext);
					context = new ContextProperties(defaultProps);
				}

				inContext.close();
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFTPGet_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFTPGet_1) {
			globalMap.put("tFTPGet_1_SUBPROCESS_STATE", -1);

			e_tFTPGet_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : ftp_download");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring=")) {// for trunjob call
			enableLogStash = "true".equalsIgnoreCase(arg.substring(13));
		}

		if (!enableLogStash) {
			enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 30296 characters generated by Talend Open Studio for Data Integration on the
 * September 2, 2019 at 7:10:56 AM ICT
 ************************************************************************************************/