// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package vincere_etl.garrison_gen_data_contact_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: garrison_gen_data_contact Purpose: <br>
 * Description: <br>
 * 
 * @author user@talend.com
 * @version 7.2.1.20190620_1446
 * @status
 */
public class garrison_gen_data_contact implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "garrison_gen_data_contact";
	private final String projectName = "VINCERE_ETL";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					garrison_gen_data_contact.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(garrison_gen_data_contact.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tDBConnection_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBConnection_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBConnection_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_8_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_8_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBConnection_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBConnection_2_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_2_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_3_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_4_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_5_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_6_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_7_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_8_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBConnection_1 begin ] start
				 */

				ok_Hash.put("tDBConnection_1", false);
				start_Hash.put("tDBConnection_1", System.currentTimeMillis());

				currentComponent = "tDBConnection_1";

				int tos_count_tDBConnection_1 = 0;

				String url_tDBConnection_1 = "jdbc:sqlserver://" + "dmpus.vinceredev.com";
				String port_tDBConnection_1 = "1433";
				String dbname_tDBConnection_1 = "mh2484";
				if (!"".equals(port_tDBConnection_1)) {
					url_tDBConnection_1 += ":" + "1433";
				}
				if (!"".equals(dbname_tDBConnection_1)) {

					url_tDBConnection_1 += ";databaseName=" + "mh2484";
				}
				url_tDBConnection_1 += ";appName=" + projectName + ";" + "";
				String dbUser_tDBConnection_1 = "sa";

				final String decryptedPassword_tDBConnection_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("ENC:[LlxjOZ9VCC2aAeOBSrbJug==]");
				String dbPwd_tDBConnection_1 = decryptedPassword_tDBConnection_1;

				java.sql.Connection conn_tDBConnection_1 = null;

				String driverClass_tDBConnection_1 = "com.microsoft.sqlserver.jdbc.SQLServerDriver";
				java.lang.Class jdbcclazz_tDBConnection_1 = java.lang.Class.forName(driverClass_tDBConnection_1);

				conn_tDBConnection_1 = java.sql.DriverManager.getConnection(url_tDBConnection_1, dbUser_tDBConnection_1,
						dbPwd_tDBConnection_1);

				globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);
				if (null != conn_tDBConnection_1) {

					conn_tDBConnection_1.setAutoCommit(false);
				}

				globalMap.put("dbschema_tDBConnection_1", "");

				globalMap.put("db_tDBConnection_1", "mh2484");

				globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);

				globalMap.put("shareIdentitySetting_tDBConnection_1", false);

				/**
				 * [tDBConnection_1 begin ] stop
				 */

				/**
				 * [tDBConnection_1 main ] start
				 */

				currentComponent = "tDBConnection_1";

				tos_count_tDBConnection_1++;

				/**
				 * [tDBConnection_1 main ] stop
				 */

				/**
				 * [tDBConnection_1 process_data_begin ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 process_data_begin ] stop
				 */

				/**
				 * [tDBConnection_1 process_data_end ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 process_data_end ] stop
				 */

				/**
				 * [tDBConnection_1 end ] start
				 */

				currentComponent = "tDBConnection_1";

				ok_Hash.put("tDBConnection_1", true);
				end_Hash.put("tDBConnection_1", System.currentTimeMillis());

				/**
				 * [tDBConnection_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tDBConnection_1 finally ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 1);
	}

	public void tDBConnection_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBConnection_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBConnection_2 begin ] start
				 */

				ok_Hash.put("tDBConnection_2", false);
				start_Hash.put("tDBConnection_2", System.currentTimeMillis());

				currentComponent = "tDBConnection_2";

				int tos_count_tDBConnection_2 = 0;

				String url_tDBConnection_2 = "jdbc:sqlite:" + "/"
						+ "/Users/tungnguyen/Documents/client_dbs/garrision.db";
				String dbUser_tDBConnection_2 = null;

				String dbPwd_tDBConnection_2 = null;

				java.sql.Connection conn_tDBConnection_2 = null;

				String driverClass_tDBConnection_2 = "org.sqlite.JDBC";
				java.lang.Class jdbcclazz_tDBConnection_2 = java.lang.Class.forName(driverClass_tDBConnection_2);

				conn_tDBConnection_2 = java.sql.DriverManager.getConnection(url_tDBConnection_2);

				globalMap.put("conn_tDBConnection_2", conn_tDBConnection_2);
				if (null != conn_tDBConnection_2) {

					conn_tDBConnection_2.setAutoCommit(true);
				}

				globalMap.put("conn_" + "tDBConnection_2", conn_tDBConnection_2);

				/**
				 * [tDBConnection_2 begin ] stop
				 */

				/**
				 * [tDBConnection_2 main ] start
				 */

				currentComponent = "tDBConnection_2";

				tos_count_tDBConnection_2++;

				/**
				 * [tDBConnection_2 main ] stop
				 */

				/**
				 * [tDBConnection_2 process_data_begin ] start
				 */

				currentComponent = "tDBConnection_2";

				/**
				 * [tDBConnection_2 process_data_begin ] stop
				 */

				/**
				 * [tDBConnection_2 process_data_end ] start
				 */

				currentComponent = "tDBConnection_2";

				/**
				 * [tDBConnection_2 process_data_end ] stop
				 */

				/**
				 * [tDBConnection_2 end ] start
				 */

				currentComponent = "tDBConnection_2";

				ok_Hash.put("tDBConnection_2", true);
				end_Hash.put("tDBConnection_2", System.currentTimeMillis());

				/**
				 * [tDBConnection_2 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tDBConnection_2 finally ] start
				 */

				currentComponent = "tDBConnection_2";

				/**
				 * [tDBConnection_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBConnection_2_SUBPROCESS_STATE", 1);
	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_VINCERE_ETL_garrison_gen_data_contact = new byte[0];
		static byte[] commonByteArray_VINCERE_ETL_garrison_gen_data_contact = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String contact_externalid;

		public String getContact_externalid() {
			return this.contact_externalid;
		}

		public String company_externalid;

		public String getCompany_externalid() {
			return this.company_externalid;
		}

		public String contact_firstname;

		public String getContact_firstname() {
			return this.contact_firstname;
		}

		public String contact_lastname;

		public String getContact_lastname() {
			return this.contact_lastname;
		}

		public String contact_middlename;

		public String getContact_middlename() {
			return this.contact_middlename;
		}

		public String contact_title;

		public String getContact_title() {
			return this.contact_title;
		}

		public String contact_nickname;

		public String getContact_nickname() {
			return this.contact_nickname;
		}

		public java.util.Date insert_timestamp;

		public java.util.Date getInsert_timestamp() {
			return this.insert_timestamp;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.contact_externalid == null) ? 0 : this.contact_externalid.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row1Struct other = (row1Struct) obj;

			if (this.contact_externalid == null) {
				if (other.contact_externalid != null)
					return false;

			} else if (!this.contact_externalid.equals(other.contact_externalid))

				return false;

			return true;
		}

		public void copyDataTo(row1Struct other) {

			other.contact_externalid = this.contact_externalid;
			other.company_externalid = this.company_externalid;
			other.contact_firstname = this.contact_firstname;
			other.contact_lastname = this.contact_lastname;
			other.contact_middlename = this.contact_middlename;
			other.contact_title = this.contact_title;
			other.contact_nickname = this.contact_nickname;
			other.insert_timestamp = this.insert_timestamp;

		}

		public void copyKeysDataTo(row1Struct other) {

			other.contact_externalid = this.contact_externalid;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_VINCERE_ETL_garrison_gen_data_contact.length) {
					if (length < 1024 && commonByteArray_VINCERE_ETL_garrison_gen_data_contact.length == 0) {
						commonByteArray_VINCERE_ETL_garrison_gen_data_contact = new byte[1024];
					} else {
						commonByteArray_VINCERE_ETL_garrison_gen_data_contact = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_VINCERE_ETL_garrison_gen_data_contact, 0, length);
				strReturn = new String(commonByteArray_VINCERE_ETL_garrison_gen_data_contact, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_VINCERE_ETL_garrison_gen_data_contact) {

				try {

					int length = 0;

					this.contact_externalid = readString(dis);

					this.company_externalid = readString(dis);

					this.contact_firstname = readString(dis);

					this.contact_lastname = readString(dis);

					this.contact_middlename = readString(dis);

					this.contact_title = readString(dis);

					this.contact_nickname = readString(dis);

					this.insert_timestamp = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.contact_externalid, dos);

				// String

				writeString(this.company_externalid, dos);

				// String

				writeString(this.contact_firstname, dos);

				// String

				writeString(this.contact_lastname, dos);

				// String

				writeString(this.contact_middlename, dos);

				// String

				writeString(this.contact_title, dos);

				// String

				writeString(this.contact_nickname, dos);

				// java.util.Date

				writeDate(this.insert_timestamp, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("contact_externalid=" + contact_externalid);
			sb.append(",company_externalid=" + company_externalid);
			sb.append(",contact_firstname=" + contact_firstname);
			sb.append(",contact_lastname=" + contact_lastname);
			sb.append(",contact_middlename=" + contact_middlename);
			sb.append(",contact_title=" + contact_title);
			sb.append(",contact_nickname=" + contact_nickname);
			sb.append(",insert_timestamp=" + String.valueOf(insert_timestamp));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.contact_externalid, other.contact_externalid);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();

				/**
				 * [tDBOutput_1 begin ] start
				 */

				ok_Hash.put("tDBOutput_1", false);
				start_Hash.put("tDBOutput_1", System.currentTimeMillis());

				currentComponent = "tDBOutput_1";

				int tos_count_tDBOutput_1 = 0;

				int nb_line_tDBOutput_1 = 0;
				int nb_line_update_tDBOutput_1 = 0;
				int nb_line_inserted_tDBOutput_1 = 0;
				int nb_line_deleted_tDBOutput_1 = 0;
				int nb_line_rejected_tDBOutput_1 = 0;

				int deletedCount_tDBOutput_1 = 0;
				int updatedCount_tDBOutput_1 = 0;
				int insertedCount_tDBOutput_1 = 0;

				String tableName_tDBOutput_1 = "contact_name";
				boolean whetherReject_tDBOutput_1 = false;

				int batchSize_tDBOutput_1 = 10000;
				int batchSizeCounter_tDBOutput_1 = 0;
				int tmp_batchUpdateCount_tDBOutput_1 = 0;

				java.sql.Connection conn_tDBOutput_1 = null;
				conn_tDBOutput_1 = (java.sql.Connection) globalMap.get("conn_tDBConnection_2");

				java.sql.DatabaseMetaData dbMetaData_tDBOutput_1 = conn_tDBOutput_1.getMetaData();
				boolean whetherExist_tDBOutput_1 = false;
				try (java.sql.ResultSet rsTable_tDBOutput_1 = dbMetaData_tDBOutput_1.getTables(null, null, null,
						new String[] { "TABLE" })) {
					while (rsTable_tDBOutput_1.next()) {
						String table_tDBOutput_1 = rsTable_tDBOutput_1.getString("TABLE_NAME");
						if (table_tDBOutput_1.equalsIgnoreCase("contact_name")) {
							whetherExist_tDBOutput_1 = true;
							break;
						}
					}
				}
				if (whetherExist_tDBOutput_1) {
					try (java.sql.Statement stmtDrop_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
						stmtDrop_tDBOutput_1.execute("DROP TABLE \"" + tableName_tDBOutput_1 + "\"");
					}
				}
				try (java.sql.Statement stmtCreate_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
					stmtCreate_tDBOutput_1.execute("CREATE TABLE \"" + tableName_tDBOutput_1
							+ "\"(\"contact_externalid\" VARCHAR(13)   not null ,\"company_externalid\" VARCHAR(13)  ,\"contact_firstname\" VARCHAR(20)  ,\"contact_lastname\" VARCHAR(30)  ,\"contact_middlename\" VARCHAR(25)  ,\"contact_title\" VARCHAR(4)  ,\"contact_nickname\" VARCHAR(25)  ,\"insert_timestamp\" DATETIME ,primary key(\"contact_externalid\"))");
				}
				String insert_tDBOutput_1 = "INSERT INTO \"" + "contact_name"
						+ "\" (\"contact_externalid\",\"company_externalid\",\"contact_firstname\",\"contact_lastname\",\"contact_middlename\",\"contact_title\",\"contact_nickname\",\"insert_timestamp\") VALUES (?,?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
				resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);

				/**
				 * [tDBOutput_1 begin ] stop
				 */

				/**
				 * [tDBInput_1 begin ] start
				 */

				ok_Hash.put("tDBInput_1", false);
				start_Hash.put("tDBInput_1", System.currentTimeMillis());

				currentComponent = "tDBInput_1";

				int tos_count_tDBInput_1 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_1 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_1 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_1 = new String[] { "FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_1, talendToDBArray_tDBInput_1);
				int nb_line_tDBInput_1 = 0;
				java.sql.Connection conn_tDBInput_1 = null;
				conn_tDBInput_1 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");
				String dbschema_tDBInput_1 = (String) globalMap.get("dbschema_tDBConnection_1");

				java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

				String dbquery_tDBInput_1 = "\n\n\nwith contact as (\n	select\n	concat('', p.cid) as contact_externalid\n	, concat('', c.id) as company_externalid\n	, p.[f"
						+ "irst] as contact_firstname\n	, p.[last] as contact_lastname\n	, p.middlename as contact_middlename\n	, p.title as contact_t"
						+ "itle\n	, p.nickname as contact_nickname\n	, p.dateenter as insert_timestamp\n	, e.[Sequence]\n	from\n		dbo.employment as e\n	l"
						+ "eft outer join\n		dbo.people as p\n		on e.cid = p.cid and e.deleteflag = 0\n	left outer join\n		dbo.company as c\n		on e.id ="
						+ " c.id\n	left outer join\n		dbo.companystatus as cs\n		on c.companystatus_id = cs.companystatus_id\n	left outer join\n		dbo.ca"
						+ "ndidstatus as cans\n		on p.candidstatus_id = cans.candidstatus_id\n	where p.RoleType=1 and p.DeleteFlag=0\n)\nselect \n	cont."
						+ "contact_externalid\n	, company_externalid\n	, contact_firstname\n	, contact_lastname\n	, contact_middlename\n	, contact_title"
						+ "\n	, contact_nickname\n	, insert_timestamp\nfrom contact cont join (\n	select contact_externalid, max([Sequence]) as [Sequen"
						+ "ce] from contact group by contact_externalid\n) as current_company \non cont.contact_externalid=current_company.contact_ex"
						+ "ternalid\nand cont.[Sequence]=current_company.[Sequence]\n\n\n";

				globalMap.put("tDBInput_1_QUERY", dbquery_tDBInput_1);
				java.sql.ResultSet rs_tDBInput_1 = null;

				try {
					rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
					java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
					int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

					String tmpContent_tDBInput_1 = null;

					while (rs_tDBInput_1.next()) {
						nb_line_tDBInput_1++;

						if (colQtyInRs_tDBInput_1 < 1) {
							row1.contact_externalid = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(1);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1.contains(
										rsmd_tDBInput_1.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
									row1.contact_externalid = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row1.contact_externalid = tmpContent_tDBInput_1;
								}
							} else {
								row1.contact_externalid = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 2) {
							row1.company_externalid = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(2);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1.contains(
										rsmd_tDBInput_1.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
									row1.company_externalid = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row1.company_externalid = tmpContent_tDBInput_1;
								}
							} else {
								row1.company_externalid = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 3) {
							row1.contact_firstname = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(3);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1.contains(
										rsmd_tDBInput_1.getColumnTypeName(3).toUpperCase(java.util.Locale.ENGLISH))) {
									row1.contact_firstname = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row1.contact_firstname = tmpContent_tDBInput_1;
								}
							} else {
								row1.contact_firstname = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 4) {
							row1.contact_lastname = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(4);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1.contains(
										rsmd_tDBInput_1.getColumnTypeName(4).toUpperCase(java.util.Locale.ENGLISH))) {
									row1.contact_lastname = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row1.contact_lastname = tmpContent_tDBInput_1;
								}
							} else {
								row1.contact_lastname = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 5) {
							row1.contact_middlename = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(5);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1.contains(
										rsmd_tDBInput_1.getColumnTypeName(5).toUpperCase(java.util.Locale.ENGLISH))) {
									row1.contact_middlename = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row1.contact_middlename = tmpContent_tDBInput_1;
								}
							} else {
								row1.contact_middlename = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 6) {
							row1.contact_title = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(6);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1.contains(
										rsmd_tDBInput_1.getColumnTypeName(6).toUpperCase(java.util.Locale.ENGLISH))) {
									row1.contact_title = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row1.contact_title = tmpContent_tDBInput_1;
								}
							} else {
								row1.contact_title = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 7) {
							row1.contact_nickname = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(7);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1.contains(
										rsmd_tDBInput_1.getColumnTypeName(7).toUpperCase(java.util.Locale.ENGLISH))) {
									row1.contact_nickname = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row1.contact_nickname = tmpContent_tDBInput_1;
								}
							} else {
								row1.contact_nickname = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 8) {
							row1.insert_timestamp = null;
						} else {

							row1.insert_timestamp = mssqlGTU_tDBInput_1.getDate(rsmd_tDBInput_1, rs_tDBInput_1, 8);

						}

						/**
						 * [tDBInput_1 begin ] stop
						 */

						/**
						 * [tDBInput_1 main ] start
						 */

						currentComponent = "tDBInput_1";

						tos_count_tDBInput_1++;

						/**
						 * [tDBInput_1 main ] stop
						 */

						/**
						 * [tDBInput_1 process_data_begin ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_1 main ] start
						 */

						currentComponent = "tDBOutput_1";

						whetherReject_tDBOutput_1 = false;
						if (row1.contact_externalid == null) {
							pstmt_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(1, row1.contact_externalid);
						}

						if (row1.company_externalid == null) {
							pstmt_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(2, row1.company_externalid);
						}

						if (row1.contact_firstname == null) {
							pstmt_tDBOutput_1.setNull(3, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(3, row1.contact_firstname);
						}

						if (row1.contact_lastname == null) {
							pstmt_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(4, row1.contact_lastname);
						}

						if (row1.contact_middlename == null) {
							pstmt_tDBOutput_1.setNull(5, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(5, row1.contact_middlename);
						}

						if (row1.contact_title == null) {
							pstmt_tDBOutput_1.setNull(6, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(6, row1.contact_title);
						}

						if (row1.contact_nickname == null) {
							pstmt_tDBOutput_1.setNull(7, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(7, row1.contact_nickname);
						}

						if (row1.insert_timestamp != null) {
							pstmt_tDBOutput_1.setTimestamp(8, new java.sql.Timestamp(row1.insert_timestamp.getTime()));
						} else {
							pstmt_tDBOutput_1.setNull(8, java.sql.Types.TIMESTAMP);
						}

						pstmt_tDBOutput_1.addBatch();
						batchSizeCounter_tDBOutput_1++;
						nb_line_tDBOutput_1++;
						if ((batchSize_tDBOutput_1 > 0) && (batchSize_tDBOutput_1 <= batchSizeCounter_tDBOutput_1)) {
							int[] status_tDBOutput_1 = null;
							int countSum_tDBOutput_1 = 0;
							try {
								batchSizeCounter_tDBOutput_1 = 0;
								status_tDBOutput_1 = pstmt_tDBOutput_1.executeBatch();
								for (int countEach_tDBOutput_1 : status_tDBOutput_1) {
									countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
								}
							} catch (java.sql.BatchUpdateException e) {
								for (int countEach_tDBOutput_1 : e.getUpdateCounts()) {
									countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
								}
								System.err.println(e.getMessage());
							}
							try {
								tmp_batchUpdateCount_tDBOutput_1 = pstmt_tDBOutput_1.getUpdateCount();
							} catch (java.sql.SQLException e) {
								System.err.println(e.getMessage());
							}
							tmp_batchUpdateCount_tDBOutput_1 = tmp_batchUpdateCount_tDBOutput_1 > countSum_tDBOutput_1
									? tmp_batchUpdateCount_tDBOutput_1
									: countSum_tDBOutput_1;
							insertedCount_tDBOutput_1 += tmp_batchUpdateCount_tDBOutput_1;
						}

						tos_count_tDBOutput_1++;

						/**
						 * [tDBOutput_1 main ] stop
						 */

						/**
						 * [tDBOutput_1 process_data_begin ] start
						 */

						currentComponent = "tDBOutput_1";

						/**
						 * [tDBOutput_1 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_1 process_data_end ] start
						 */

						currentComponent = "tDBOutput_1";

						/**
						 * [tDBOutput_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 process_data_end ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 end ] start
						 */

						currentComponent = "tDBInput_1";

					}
				} finally {
					if (rs_tDBInput_1 != null) {
						rs_tDBInput_1.close();
					}
					if (stmt_tDBInput_1 != null) {
						stmt_tDBInput_1.close();
					}
				}
				globalMap.put("tDBInput_1_NB_LINE", nb_line_tDBInput_1);

				ok_Hash.put("tDBInput_1", true);
				end_Hash.put("tDBInput_1", System.currentTimeMillis());

				/**
				 * [tDBInput_1 end ] stop
				 */

				/**
				 * [tDBOutput_1 end ] start
				 */

				currentComponent = "tDBOutput_1";

				int[] status_tDBOutput_1 = null;
				int countSum_tDBOutput_1 = 0;
				try {
					if (pstmt_tDBOutput_1 != null && batchSizeCounter_tDBOutput_1 > 0) {
						status_tDBOutput_1 = pstmt_tDBOutput_1.executeBatch();
						for (int countEach_tDBOutput_1 : status_tDBOutput_1) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
						}
					}
				} catch (java.sql.BatchUpdateException e) {
					for (int countEach_tDBOutput_1 : e.getUpdateCounts()) {
						countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}
					System.err.println(e.getMessage());
				}
				if (pstmt_tDBOutput_1 != null && batchSizeCounter_tDBOutput_1 > 0) {
					try {
						tmp_batchUpdateCount_tDBOutput_1 = pstmt_tDBOutput_1.getUpdateCount();
					} catch (java.sql.SQLException e) {

					}
					tmp_batchUpdateCount_tDBOutput_1 = tmp_batchUpdateCount_tDBOutput_1 > countSum_tDBOutput_1
							? tmp_batchUpdateCount_tDBOutput_1
							: countSum_tDBOutput_1;
					insertedCount_tDBOutput_1 += tmp_batchUpdateCount_tDBOutput_1;
				}
				if (pstmt_tDBOutput_1 != null) {
					pstmt_tDBOutput_1.close();
					resourceMap.remove("pstmt_tDBOutput_1");
				}
				resourceMap.put("statementClosed_tDBOutput_1", true);

				int rejectedCount_tDBOutput_1 = 0;
				nb_line_deleted_tDBOutput_1 = nb_line_deleted_tDBOutput_1 + deletedCount_tDBOutput_1;
				nb_line_update_tDBOutput_1 = nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
				nb_line_inserted_tDBOutput_1 = nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
				nb_line_rejected_tDBOutput_1 = nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;

				globalMap.put("tDBOutput_1_NB_LINE", nb_line_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_UPDATED", nb_line_update_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_DELETED", nb_line_deleted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);

				ok_Hash.put("tDBOutput_1", true);
				end_Hash.put("tDBOutput_1", System.currentTimeMillis());

				/**
				 * [tDBOutput_1 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_1 finally ] start
				 */

				currentComponent = "tDBInput_1";

				/**
				 * [tDBInput_1 finally ] stop
				 */

				/**
				 * [tDBOutput_1 finally ] start
				 */

				currentComponent = "tDBOutput_1";

				if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
					java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
					if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_1")) != null) {
						pstmtToClose_tDBOutput_1.close();
					}
				}

				/**
				 * [tDBOutput_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}

	public static class contact_ownerStruct implements routines.system.IPersistableRow<contact_ownerStruct> {
		final static byte[] commonByteArrayLock_VINCERE_ETL_garrison_gen_data_contact = new byte[0];
		static byte[] commonByteArray_VINCERE_ETL_garrison_gen_data_contact = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String contact_externalid;

		public String getContact_externalid() {
			return this.contact_externalid;
		}

		public String contact_owner;

		public String getContact_owner() {
			return this.contact_owner;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.contact_externalid == null) ? 0 : this.contact_externalid.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final contact_ownerStruct other = (contact_ownerStruct) obj;

			if (this.contact_externalid == null) {
				if (other.contact_externalid != null)
					return false;

			} else if (!this.contact_externalid.equals(other.contact_externalid))

				return false;

			return true;
		}

		public void copyDataTo(contact_ownerStruct other) {

			other.contact_externalid = this.contact_externalid;
			other.contact_owner = this.contact_owner;

		}

		public void copyKeysDataTo(contact_ownerStruct other) {

			other.contact_externalid = this.contact_externalid;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_VINCERE_ETL_garrison_gen_data_contact.length) {
					if (length < 1024 && commonByteArray_VINCERE_ETL_garrison_gen_data_contact.length == 0) {
						commonByteArray_VINCERE_ETL_garrison_gen_data_contact = new byte[1024];
					} else {
						commonByteArray_VINCERE_ETL_garrison_gen_data_contact = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_VINCERE_ETL_garrison_gen_data_contact, 0, length);
				strReturn = new String(commonByteArray_VINCERE_ETL_garrison_gen_data_contact, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_VINCERE_ETL_garrison_gen_data_contact) {

				try {

					int length = 0;

					this.contact_externalid = readString(dis);

					this.contact_owner = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.contact_externalid, dos);

				// String

				writeString(this.contact_owner, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("contact_externalid=" + contact_externalid);
			sb.append(",contact_owner=" + contact_owner);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(contact_ownerStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.contact_externalid, other.contact_externalid);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_VINCERE_ETL_garrison_gen_data_contact = new byte[0];
		static byte[] commonByteArray_VINCERE_ETL_garrison_gen_data_contact = new byte[0];

		public String contact_externalid;

		public String getContact_externalid() {
			return this.contact_externalid;
		}

		public String contact_owner;

		public String getContact_owner() {
			return this.contact_owner;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_VINCERE_ETL_garrison_gen_data_contact.length) {
					if (length < 1024 && commonByteArray_VINCERE_ETL_garrison_gen_data_contact.length == 0) {
						commonByteArray_VINCERE_ETL_garrison_gen_data_contact = new byte[1024];
					} else {
						commonByteArray_VINCERE_ETL_garrison_gen_data_contact = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_VINCERE_ETL_garrison_gen_data_contact, 0, length);
				strReturn = new String(commonByteArray_VINCERE_ETL_garrison_gen_data_contact, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_VINCERE_ETL_garrison_gen_data_contact) {

				try {

					int length = 0;

					this.contact_externalid = readString(dis);

					this.contact_owner = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.contact_externalid, dos);

				// String

				writeString(this.contact_owner, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("contact_externalid=" + contact_externalid);
			sb.append(",contact_owner=" + contact_owner);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();
				contact_ownerStruct contact_owner = new contact_ownerStruct();

				/**
				 * [tDBOutput_2 begin ] start
				 */

				ok_Hash.put("tDBOutput_2", false);
				start_Hash.put("tDBOutput_2", System.currentTimeMillis());

				currentComponent = "tDBOutput_2";

				int tos_count_tDBOutput_2 = 0;

				int nb_line_tDBOutput_2 = 0;
				int nb_line_update_tDBOutput_2 = 0;
				int nb_line_inserted_tDBOutput_2 = 0;
				int nb_line_deleted_tDBOutput_2 = 0;
				int nb_line_rejected_tDBOutput_2 = 0;

				int deletedCount_tDBOutput_2 = 0;
				int updatedCount_tDBOutput_2 = 0;
				int insertedCount_tDBOutput_2 = 0;

				String tableName_tDBOutput_2 = "contact_owner";
				boolean whetherReject_tDBOutput_2 = false;

				int batchSize_tDBOutput_2 = 10000;
				int batchSizeCounter_tDBOutput_2 = 0;
				int tmp_batchUpdateCount_tDBOutput_2 = 0;

				java.sql.Connection conn_tDBOutput_2 = null;
				conn_tDBOutput_2 = (java.sql.Connection) globalMap.get("conn_tDBConnection_2");

				java.sql.DatabaseMetaData dbMetaData_tDBOutput_2 = conn_tDBOutput_2.getMetaData();
				boolean whetherExist_tDBOutput_2 = false;
				try (java.sql.ResultSet rsTable_tDBOutput_2 = dbMetaData_tDBOutput_2.getTables(null, null, null,
						new String[] { "TABLE" })) {
					while (rsTable_tDBOutput_2.next()) {
						String table_tDBOutput_2 = rsTable_tDBOutput_2.getString("TABLE_NAME");
						if (table_tDBOutput_2.equalsIgnoreCase("contact_owner")) {
							whetherExist_tDBOutput_2 = true;
							break;
						}
					}
				}
				if (whetherExist_tDBOutput_2) {
					try (java.sql.Statement stmtDrop_tDBOutput_2 = conn_tDBOutput_2.createStatement()) {
						stmtDrop_tDBOutput_2.execute("DROP TABLE \"" + tableName_tDBOutput_2 + "\"");
					}
				}
				try (java.sql.Statement stmtCreate_tDBOutput_2 = conn_tDBOutput_2.createStatement()) {
					stmtCreate_tDBOutput_2.execute("CREATE TABLE \"" + tableName_tDBOutput_2
							+ "\"(\"contact_externalid\" VARCHAR(13)   not null ,\"contact_owner\" VARCHAR(200)  ,primary key(\"contact_externalid\"))");
				}
				String insert_tDBOutput_2 = "INSERT INTO \"" + "contact_owner"
						+ "\" (\"contact_externalid\",\"contact_owner\") VALUES (?,?)";
				java.sql.PreparedStatement pstmt_tDBOutput_2 = conn_tDBOutput_2.prepareStatement(insert_tDBOutput_2);
				resourceMap.put("pstmt_tDBOutput_2", pstmt_tDBOutput_2);

				/**
				 * [tDBOutput_2 begin ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());

				currentComponent = "tMap_2";

				int tos_count_tMap_2 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_2__Struct {
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
				contact_ownerStruct contact_owner_tmp = new contact_ownerStruct();
// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tDBInput_2 begin ] start
				 */

				ok_Hash.put("tDBInput_2", false);
				start_Hash.put("tDBInput_2", System.currentTimeMillis());

				currentComponent = "tDBInput_2";

				int tos_count_tDBInput_2 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_2 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_2 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_2 = new String[] { "FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_2, talendToDBArray_tDBInput_2);
				int nb_line_tDBInput_2 = 0;
				java.sql.Connection conn_tDBInput_2 = null;
				conn_tDBInput_2 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");
				String dbschema_tDBInput_2 = (String) globalMap.get("dbschema_tDBConnection_1");

				java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

				String dbquery_tDBInput_2 = "\nselect \nconcat('', p.cid) as contact_externalid\n, u.email as contact_owner\nfrom People p\nleft join MhUsers u on p.Cand"
						+ "idRecruiter=u.username\nwhere p.RoleType=1\nand p.DeleteFlag=0\n"

				;

				globalMap.put("tDBInput_2_QUERY", dbquery_tDBInput_2);
				java.sql.ResultSet rs_tDBInput_2 = null;

				try {
					rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
					java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
					int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

					String tmpContent_tDBInput_2 = null;

					while (rs_tDBInput_2.next()) {
						nb_line_tDBInput_2++;

						if (colQtyInRs_tDBInput_2 < 1) {
							row2.contact_externalid = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(1);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2.contains(
										rsmd_tDBInput_2.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
									row2.contact_externalid = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.contact_externalid = tmpContent_tDBInput_2;
								}
							} else {
								row2.contact_externalid = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 2) {
							row2.contact_owner = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(2);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2.contains(
										rsmd_tDBInput_2.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
									row2.contact_owner = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.contact_owner = tmpContent_tDBInput_2;
								}
							} else {
								row2.contact_owner = null;
							}
						}

						/**
						 * [tDBInput_2 begin ] stop
						 */

						/**
						 * [tDBInput_2 main ] start
						 */

						currentComponent = "tDBInput_2";

						tos_count_tDBInput_2++;

						/**
						 * [tDBInput_2 main ] stop
						 */

						/**
						 * [tDBInput_2 process_data_begin ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_begin ] stop
						 */

						/**
						 * [tMap_2 main ] start
						 */

						currentComponent = "tMap_2";

						boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_2 = false;
						boolean mainRowRejected_tMap_2 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
							// ###############################
							// # Output tables

							contact_owner = null;

// # Output table : 'contact_owner'
							contact_owner_tmp.contact_externalid = row2.contact_externalid;
							contact_owner_tmp.contact_owner = row2.contact_owner;
							contact_owner = contact_owner_tmp;
// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_2 = false;

						tos_count_tMap_2++;

						/**
						 * [tMap_2 main ] stop
						 */

						/**
						 * [tMap_2 process_data_begin ] start
						 */

						currentComponent = "tMap_2";

						/**
						 * [tMap_2 process_data_begin ] stop
						 */
// Start of branch "contact_owner"
						if (contact_owner != null) {

							/**
							 * [tDBOutput_2 main ] start
							 */

							currentComponent = "tDBOutput_2";

							whetherReject_tDBOutput_2 = false;
							if (contact_owner.contact_externalid == null) {
								pstmt_tDBOutput_2.setNull(1, java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_2.setString(1, contact_owner.contact_externalid);
							}

							if (contact_owner.contact_owner == null) {
								pstmt_tDBOutput_2.setNull(2, java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_2.setString(2, contact_owner.contact_owner);
							}

							pstmt_tDBOutput_2.addBatch();
							batchSizeCounter_tDBOutput_2++;
							nb_line_tDBOutput_2++;
							if ((batchSize_tDBOutput_2 > 0)
									&& (batchSize_tDBOutput_2 <= batchSizeCounter_tDBOutput_2)) {
								int[] status_tDBOutput_2 = null;
								int countSum_tDBOutput_2 = 0;
								try {
									batchSizeCounter_tDBOutput_2 = 0;
									status_tDBOutput_2 = pstmt_tDBOutput_2.executeBatch();
									for (int countEach_tDBOutput_2 : status_tDBOutput_2) {
										countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
									}
								} catch (java.sql.BatchUpdateException e) {
									for (int countEach_tDBOutput_2 : e.getUpdateCounts()) {
										countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
									}
									System.err.println(e.getMessage());
								}
								try {
									tmp_batchUpdateCount_tDBOutput_2 = pstmt_tDBOutput_2.getUpdateCount();
								} catch (java.sql.SQLException e) {
									System.err.println(e.getMessage());
								}
								tmp_batchUpdateCount_tDBOutput_2 = tmp_batchUpdateCount_tDBOutput_2 > countSum_tDBOutput_2
										? tmp_batchUpdateCount_tDBOutput_2
										: countSum_tDBOutput_2;
								insertedCount_tDBOutput_2 += tmp_batchUpdateCount_tDBOutput_2;
							}

							tos_count_tDBOutput_2++;

							/**
							 * [tDBOutput_2 main ] stop
							 */

							/**
							 * [tDBOutput_2 process_data_begin ] start
							 */

							currentComponent = "tDBOutput_2";

							/**
							 * [tDBOutput_2 process_data_begin ] stop
							 */

							/**
							 * [tDBOutput_2 process_data_end ] start
							 */

							currentComponent = "tDBOutput_2";

							/**
							 * [tDBOutput_2 process_data_end ] stop
							 */

						} // End of branch "contact_owner"

						/**
						 * [tMap_2 process_data_end ] start
						 */

						currentComponent = "tMap_2";

						/**
						 * [tMap_2 process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 process_data_end ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 end ] start
						 */

						currentComponent = "tDBInput_2";

					}
				} finally {
					if (rs_tDBInput_2 != null) {
						rs_tDBInput_2.close();
					}
					if (stmt_tDBInput_2 != null) {
						stmt_tDBInput_2.close();
					}
				}
				globalMap.put("tDBInput_2_NB_LINE", nb_line_tDBInput_2);

				ok_Hash.put("tDBInput_2", true);
				end_Hash.put("tDBInput_2", System.currentTimeMillis());

				/**
				 * [tDBInput_2 end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

// ###############################
// # Lookup hashes releasing
// ###############################      

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tDBOutput_2 end ] start
				 */

				currentComponent = "tDBOutput_2";

				int[] status_tDBOutput_2 = null;
				int countSum_tDBOutput_2 = 0;
				try {
					if (pstmt_tDBOutput_2 != null && batchSizeCounter_tDBOutput_2 > 0) {
						status_tDBOutput_2 = pstmt_tDBOutput_2.executeBatch();
						for (int countEach_tDBOutput_2 : status_tDBOutput_2) {
							countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
						}
					}
				} catch (java.sql.BatchUpdateException e) {
					for (int countEach_tDBOutput_2 : e.getUpdateCounts()) {
						countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
					}
					System.err.println(e.getMessage());
				}
				if (pstmt_tDBOutput_2 != null && batchSizeCounter_tDBOutput_2 > 0) {
					try {
						tmp_batchUpdateCount_tDBOutput_2 = pstmt_tDBOutput_2.getUpdateCount();
					} catch (java.sql.SQLException e) {

					}
					tmp_batchUpdateCount_tDBOutput_2 = tmp_batchUpdateCount_tDBOutput_2 > countSum_tDBOutput_2
							? tmp_batchUpdateCount_tDBOutput_2
							: countSum_tDBOutput_2;
					insertedCount_tDBOutput_2 += tmp_batchUpdateCount_tDBOutput_2;
				}
				if (pstmt_tDBOutput_2 != null) {
					pstmt_tDBOutput_2.close();
					resourceMap.remove("pstmt_tDBOutput_2");
				}
				resourceMap.put("statementClosed_tDBOutput_2", true);

				int rejectedCount_tDBOutput_2 = 0;
				nb_line_deleted_tDBOutput_2 = nb_line_deleted_tDBOutput_2 + deletedCount_tDBOutput_2;
				nb_line_update_tDBOutput_2 = nb_line_update_tDBOutput_2 + updatedCount_tDBOutput_2;
				nb_line_inserted_tDBOutput_2 = nb_line_inserted_tDBOutput_2 + insertedCount_tDBOutput_2;
				nb_line_rejected_tDBOutput_2 = nb_line_rejected_tDBOutput_2 + rejectedCount_tDBOutput_2;

				globalMap.put("tDBOutput_2_NB_LINE", nb_line_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_UPDATED", nb_line_update_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_DELETED", nb_line_deleted_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_2);

				ok_Hash.put("tDBOutput_2", true);
				end_Hash.put("tDBOutput_2", System.currentTimeMillis());

				/**
				 * [tDBOutput_2 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_2 finally ] start
				 */

				currentComponent = "tDBInput_2";

				/**
				 * [tDBInput_2 finally ] stop
				 */

				/**
				 * [tMap_2 finally ] start
				 */

				currentComponent = "tMap_2";

				/**
				 * [tMap_2 finally ] stop
				 */

				/**
				 * [tDBOutput_2 finally ] start
				 */

				currentComponent = "tDBOutput_2";

				if (resourceMap.get("statementClosed_tDBOutput_2") == null) {
					java.sql.PreparedStatement pstmtToClose_tDBOutput_2 = null;
					if ((pstmtToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_2")) != null) {
						pstmtToClose_tDBOutput_2.close();
					}
				}

				/**
				 * [tDBOutput_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}

	public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_VINCERE_ETL_garrison_gen_data_contact = new byte[0];
		static byte[] commonByteArray_VINCERE_ETL_garrison_gen_data_contact = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String contact_externalid;

		public String getContact_externalid() {
			return this.contact_externalid;
		}

		public String company_externalid;

		public String getCompany_externalid() {
			return this.company_externalid;
		}

		public String contact_job_title;

		public String getContact_job_title() {
			return this.contact_job_title;
		}

		public String contact_department;

		public String getContact_department() {
			return this.contact_department;
		}

		public Boolean is_current_employer;

		public Boolean getIs_current_employer() {
			return this.is_current_employer;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.contact_externalid == null) ? 0 : this.contact_externalid.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row3Struct other = (row3Struct) obj;

			if (this.contact_externalid == null) {
				if (other.contact_externalid != null)
					return false;

			} else if (!this.contact_externalid.equals(other.contact_externalid))

				return false;

			return true;
		}

		public void copyDataTo(row3Struct other) {

			other.contact_externalid = this.contact_externalid;
			other.company_externalid = this.company_externalid;
			other.contact_job_title = this.contact_job_title;
			other.contact_department = this.contact_department;
			other.is_current_employer = this.is_current_employer;

		}

		public void copyKeysDataTo(row3Struct other) {

			other.contact_externalid = this.contact_externalid;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_VINCERE_ETL_garrison_gen_data_contact.length) {
					if (length < 1024 && commonByteArray_VINCERE_ETL_garrison_gen_data_contact.length == 0) {
						commonByteArray_VINCERE_ETL_garrison_gen_data_contact = new byte[1024];
					} else {
						commonByteArray_VINCERE_ETL_garrison_gen_data_contact = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_VINCERE_ETL_garrison_gen_data_contact, 0, length);
				strReturn = new String(commonByteArray_VINCERE_ETL_garrison_gen_data_contact, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_VINCERE_ETL_garrison_gen_data_contact) {

				try {

					int length = 0;

					this.contact_externalid = readString(dis);

					this.company_externalid = readString(dis);

					this.contact_job_title = readString(dis);

					this.contact_department = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.is_current_employer = null;
					} else {
						this.is_current_employer = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.contact_externalid, dos);

				// String

				writeString(this.company_externalid, dos);

				// String

				writeString(this.contact_job_title, dos);

				// String

				writeString(this.contact_department, dos);

				// Boolean

				if (this.is_current_employer == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.is_current_employer);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("contact_externalid=" + contact_externalid);
			sb.append(",company_externalid=" + company_externalid);
			sb.append(",contact_job_title=" + contact_job_title);
			sb.append(",contact_department=" + contact_department);
			sb.append(",is_current_employer=" + String.valueOf(is_current_employer));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.contact_externalid, other.contact_externalid);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row3Struct row3 = new row3Struct();

				/**
				 * [tDBOutput_3 begin ] start
				 */

				ok_Hash.put("tDBOutput_3", false);
				start_Hash.put("tDBOutput_3", System.currentTimeMillis());

				currentComponent = "tDBOutput_3";

				int tos_count_tDBOutput_3 = 0;

				int nb_line_tDBOutput_3 = 0;
				int nb_line_update_tDBOutput_3 = 0;
				int nb_line_inserted_tDBOutput_3 = 0;
				int nb_line_deleted_tDBOutput_3 = 0;
				int nb_line_rejected_tDBOutput_3 = 0;

				int deletedCount_tDBOutput_3 = 0;
				int updatedCount_tDBOutput_3 = 0;
				int insertedCount_tDBOutput_3 = 0;

				String tableName_tDBOutput_3 = "contact_job_title";
				boolean whetherReject_tDBOutput_3 = false;

				int batchSize_tDBOutput_3 = 10000;
				int batchSizeCounter_tDBOutput_3 = 0;
				int tmp_batchUpdateCount_tDBOutput_3 = 0;

				java.sql.Connection conn_tDBOutput_3 = null;
				conn_tDBOutput_3 = (java.sql.Connection) globalMap.get("conn_tDBConnection_2");

				java.sql.DatabaseMetaData dbMetaData_tDBOutput_3 = conn_tDBOutput_3.getMetaData();
				boolean whetherExist_tDBOutput_3 = false;
				try (java.sql.ResultSet rsTable_tDBOutput_3 = dbMetaData_tDBOutput_3.getTables(null, null, null,
						new String[] { "TABLE" })) {
					while (rsTable_tDBOutput_3.next()) {
						String table_tDBOutput_3 = rsTable_tDBOutput_3.getString("TABLE_NAME");
						if (table_tDBOutput_3.equalsIgnoreCase("contact_job_title")) {
							whetherExist_tDBOutput_3 = true;
							break;
						}
					}
				}
				if (whetherExist_tDBOutput_3) {
					try (java.sql.Statement stmtDrop_tDBOutput_3 = conn_tDBOutput_3.createStatement()) {
						stmtDrop_tDBOutput_3.execute("DROP TABLE \"" + tableName_tDBOutput_3 + "\"");
					}
				}
				try (java.sql.Statement stmtCreate_tDBOutput_3 = conn_tDBOutput_3.createStatement()) {
					stmtCreate_tDBOutput_3.execute("CREATE TABLE \"" + tableName_tDBOutput_3
							+ "\"(\"contact_externalid\" VARCHAR(13)   not null ,\"company_externalid\" VARCHAR(13)  ,\"contact_job_title\" VARCHAR(75)  ,\"contact_department\" VARCHAR(30)  ,\"is_current_employer\" BIT ,primary key(\"contact_externalid\"))");
				}
				String insert_tDBOutput_3 = "INSERT INTO \"" + "contact_job_title"
						+ "\" (\"contact_externalid\",\"company_externalid\",\"contact_job_title\",\"contact_department\",\"is_current_employer\") VALUES (?,?,?,?,?)";
				java.sql.PreparedStatement pstmt_tDBOutput_3 = conn_tDBOutput_3.prepareStatement(insert_tDBOutput_3);
				resourceMap.put("pstmt_tDBOutput_3", pstmt_tDBOutput_3);

				/**
				 * [tDBOutput_3 begin ] stop
				 */

				/**
				 * [tDBInput_3 begin ] start
				 */

				ok_Hash.put("tDBInput_3", false);
				start_Hash.put("tDBInput_3", System.currentTimeMillis());

				currentComponent = "tDBInput_3";

				int tos_count_tDBInput_3 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_3 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_3 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_3 = new String[] { "FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_3, talendToDBArray_tDBInput_3);
				int nb_line_tDBInput_3 = 0;
				java.sql.Connection conn_tDBInput_3 = null;
				conn_tDBInput_3 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");
				String dbschema_tDBInput_3 = (String) globalMap.get("dbschema_tDBConnection_1");

				java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3.createStatement();

				String dbquery_tDBInput_3 = "\n\nwith contact as (\n	select\n	concat('', p.cid) as contact_externalid\n	, concat('', c.id) as company_externalid\n	, e.tit"
						+ "le as contact_job_title\n    , e.dept as contact_department\n    , e.nle as is_current_employer\n	, e.[Sequence]\n	from\n		db"
						+ "o.employment as e\n	left outer join\n		dbo.people as p\n		on e.cid = p.cid and e.deleteflag = 0\n	left outer join\n		dbo.comp"
						+ "any as c\n		on e.id = c.id\n	left outer join\n		dbo.companystatus as cs\n		on c.companystatus_id = cs.companystatus_id\n	left"
						+ " outer join\n		dbo.candidstatus as cans\n		on p.candidstatus_id = cans.candidstatus_id\n	where p.RoleType=1 and p.DeleteFla"
						+ "g=0\n)\nselect \n	cont.contact_externalid\n	, company_externalid\n	, contact_job_title\n    , contact_department\n    , is_curr"
						+ "ent_employer\nfrom contact cont join (\n	select contact_externalid, max([Sequence]) as [Sequence] from contact group by co"
						+ "ntact_externalid\n) as current_company \non cont.contact_externalid=current_company.contact_externalid\nand cont.[Sequence]"
						+ "=current_company.[Sequence]\n"

				;

				globalMap.put("tDBInput_3_QUERY", dbquery_tDBInput_3);
				java.sql.ResultSet rs_tDBInput_3 = null;

				try {
					rs_tDBInput_3 = stmt_tDBInput_3.executeQuery(dbquery_tDBInput_3);
					java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3.getMetaData();
					int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3.getColumnCount();

					String tmpContent_tDBInput_3 = null;

					while (rs_tDBInput_3.next()) {
						nb_line_tDBInput_3++;

						if (colQtyInRs_tDBInput_3 < 1) {
							row3.contact_externalid = null;
						} else {

							tmpContent_tDBInput_3 = rs_tDBInput_3.getString(1);
							if (tmpContent_tDBInput_3 != null) {
								if (talendToDBList_tDBInput_3.contains(
										rsmd_tDBInput_3.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
									row3.contact_externalid = FormatterUtils.formatUnwithE(tmpContent_tDBInput_3);
								} else {
									row3.contact_externalid = tmpContent_tDBInput_3;
								}
							} else {
								row3.contact_externalid = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 2) {
							row3.company_externalid = null;
						} else {

							tmpContent_tDBInput_3 = rs_tDBInput_3.getString(2);
							if (tmpContent_tDBInput_3 != null) {
								if (talendToDBList_tDBInput_3.contains(
										rsmd_tDBInput_3.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
									row3.company_externalid = FormatterUtils.formatUnwithE(tmpContent_tDBInput_3);
								} else {
									row3.company_externalid = tmpContent_tDBInput_3;
								}
							} else {
								row3.company_externalid = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 3) {
							row3.contact_job_title = null;
						} else {

							tmpContent_tDBInput_3 = rs_tDBInput_3.getString(3);
							if (tmpContent_tDBInput_3 != null) {
								if (talendToDBList_tDBInput_3.contains(
										rsmd_tDBInput_3.getColumnTypeName(3).toUpperCase(java.util.Locale.ENGLISH))) {
									row3.contact_job_title = FormatterUtils.formatUnwithE(tmpContent_tDBInput_3);
								} else {
									row3.contact_job_title = tmpContent_tDBInput_3;
								}
							} else {
								row3.contact_job_title = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 4) {
							row3.contact_department = null;
						} else {

							tmpContent_tDBInput_3 = rs_tDBInput_3.getString(4);
							if (tmpContent_tDBInput_3 != null) {
								if (talendToDBList_tDBInput_3.contains(
										rsmd_tDBInput_3.getColumnTypeName(4).toUpperCase(java.util.Locale.ENGLISH))) {
									row3.contact_department = FormatterUtils.formatUnwithE(tmpContent_tDBInput_3);
								} else {
									row3.contact_department = tmpContent_tDBInput_3;
								}
							} else {
								row3.contact_department = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 5) {
							row3.is_current_employer = null;
						} else {

							row3.is_current_employer = rs_tDBInput_3.getBoolean(5);
							if (rs_tDBInput_3.wasNull()) {
								row3.is_current_employer = null;
							}
						}

						/**
						 * [tDBInput_3 begin ] stop
						 */

						/**
						 * [tDBInput_3 main ] start
						 */

						currentComponent = "tDBInput_3";

						tos_count_tDBInput_3++;

						/**
						 * [tDBInput_3 main ] stop
						 */

						/**
						 * [tDBInput_3 process_data_begin ] start
						 */

						currentComponent = "tDBInput_3";

						/**
						 * [tDBInput_3 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_3 main ] start
						 */

						currentComponent = "tDBOutput_3";

						whetherReject_tDBOutput_3 = false;
						if (row3.contact_externalid == null) {
							pstmt_tDBOutput_3.setNull(1, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_3.setString(1, row3.contact_externalid);
						}

						if (row3.company_externalid == null) {
							pstmt_tDBOutput_3.setNull(2, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_3.setString(2, row3.company_externalid);
						}

						if (row3.contact_job_title == null) {
							pstmt_tDBOutput_3.setNull(3, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_3.setString(3, row3.contact_job_title);
						}

						if (row3.contact_department == null) {
							pstmt_tDBOutput_3.setNull(4, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_3.setString(4, row3.contact_department);
						}

						if (row3.is_current_employer == null) {
							pstmt_tDBOutput_3.setNull(5, java.sql.Types.BOOLEAN);
						} else {
							pstmt_tDBOutput_3.setBoolean(5, row3.is_current_employer);
						}

						pstmt_tDBOutput_3.addBatch();
						batchSizeCounter_tDBOutput_3++;
						nb_line_tDBOutput_3++;
						if ((batchSize_tDBOutput_3 > 0) && (batchSize_tDBOutput_3 <= batchSizeCounter_tDBOutput_3)) {
							int[] status_tDBOutput_3 = null;
							int countSum_tDBOutput_3 = 0;
							try {
								batchSizeCounter_tDBOutput_3 = 0;
								status_tDBOutput_3 = pstmt_tDBOutput_3.executeBatch();
								for (int countEach_tDBOutput_3 : status_tDBOutput_3) {
									countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
								}
							} catch (java.sql.BatchUpdateException e) {
								for (int countEach_tDBOutput_3 : e.getUpdateCounts()) {
									countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
								}
								System.err.println(e.getMessage());
							}
							try {
								tmp_batchUpdateCount_tDBOutput_3 = pstmt_tDBOutput_3.getUpdateCount();
							} catch (java.sql.SQLException e) {
								System.err.println(e.getMessage());
							}
							tmp_batchUpdateCount_tDBOutput_3 = tmp_batchUpdateCount_tDBOutput_3 > countSum_tDBOutput_3
									? tmp_batchUpdateCount_tDBOutput_3
									: countSum_tDBOutput_3;
							insertedCount_tDBOutput_3 += tmp_batchUpdateCount_tDBOutput_3;
						}

						tos_count_tDBOutput_3++;

						/**
						 * [tDBOutput_3 main ] stop
						 */

						/**
						 * [tDBOutput_3 process_data_begin ] start
						 */

						currentComponent = "tDBOutput_3";

						/**
						 * [tDBOutput_3 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_3 process_data_end ] start
						 */

						currentComponent = "tDBOutput_3";

						/**
						 * [tDBOutput_3 process_data_end ] stop
						 */

						/**
						 * [tDBInput_3 process_data_end ] start
						 */

						currentComponent = "tDBInput_3";

						/**
						 * [tDBInput_3 process_data_end ] stop
						 */

						/**
						 * [tDBInput_3 end ] start
						 */

						currentComponent = "tDBInput_3";

					}
				} finally {
					if (rs_tDBInput_3 != null) {
						rs_tDBInput_3.close();
					}
					if (stmt_tDBInput_3 != null) {
						stmt_tDBInput_3.close();
					}
				}
				globalMap.put("tDBInput_3_NB_LINE", nb_line_tDBInput_3);

				ok_Hash.put("tDBInput_3", true);
				end_Hash.put("tDBInput_3", System.currentTimeMillis());

				/**
				 * [tDBInput_3 end ] stop
				 */

				/**
				 * [tDBOutput_3 end ] start
				 */

				currentComponent = "tDBOutput_3";

				int[] status_tDBOutput_3 = null;
				int countSum_tDBOutput_3 = 0;
				try {
					if (pstmt_tDBOutput_3 != null && batchSizeCounter_tDBOutput_3 > 0) {
						status_tDBOutput_3 = pstmt_tDBOutput_3.executeBatch();
						for (int countEach_tDBOutput_3 : status_tDBOutput_3) {
							countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
						}
					}
				} catch (java.sql.BatchUpdateException e) {
					for (int countEach_tDBOutput_3 : e.getUpdateCounts()) {
						countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
					}
					System.err.println(e.getMessage());
				}
				if (pstmt_tDBOutput_3 != null && batchSizeCounter_tDBOutput_3 > 0) {
					try {
						tmp_batchUpdateCount_tDBOutput_3 = pstmt_tDBOutput_3.getUpdateCount();
					} catch (java.sql.SQLException e) {

					}
					tmp_batchUpdateCount_tDBOutput_3 = tmp_batchUpdateCount_tDBOutput_3 > countSum_tDBOutput_3
							? tmp_batchUpdateCount_tDBOutput_3
							: countSum_tDBOutput_3;
					insertedCount_tDBOutput_3 += tmp_batchUpdateCount_tDBOutput_3;
				}
				if (pstmt_tDBOutput_3 != null) {
					pstmt_tDBOutput_3.close();
					resourceMap.remove("pstmt_tDBOutput_3");
				}
				resourceMap.put("statementClosed_tDBOutput_3", true);

				int rejectedCount_tDBOutput_3 = 0;
				nb_line_deleted_tDBOutput_3 = nb_line_deleted_tDBOutput_3 + deletedCount_tDBOutput_3;
				nb_line_update_tDBOutput_3 = nb_line_update_tDBOutput_3 + updatedCount_tDBOutput_3;
				nb_line_inserted_tDBOutput_3 = nb_line_inserted_tDBOutput_3 + insertedCount_tDBOutput_3;
				nb_line_rejected_tDBOutput_3 = nb_line_rejected_tDBOutput_3 + rejectedCount_tDBOutput_3;

				globalMap.put("tDBOutput_3_NB_LINE", nb_line_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_UPDATED", nb_line_update_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_DELETED", nb_line_deleted_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_3);

				ok_Hash.put("tDBOutput_3", true);
				end_Hash.put("tDBOutput_3", System.currentTimeMillis());

				/**
				 * [tDBOutput_3 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_3 finally ] start
				 */

				currentComponent = "tDBInput_3";

				/**
				 * [tDBInput_3 finally ] stop
				 */

				/**
				 * [tDBOutput_3 finally ] start
				 */

				currentComponent = "tDBOutput_3";

				if (resourceMap.get("statementClosed_tDBOutput_3") == null) {
					java.sql.PreparedStatement pstmtToClose_tDBOutput_3 = null;
					if ((pstmtToClose_tDBOutput_3 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_3")) != null) {
						pstmtToClose_tDBOutput_3.close();
					}
				}

				/**
				 * [tDBOutput_3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}

	public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_VINCERE_ETL_garrison_gen_data_contact = new byte[0];
		static byte[] commonByteArray_VINCERE_ETL_garrison_gen_data_contact = new byte[0];

		public String contact_externalid;

		public String getContact_externalid() {
			return this.contact_externalid;
		}

		public String company_externalid;

		public String getCompany_externalid() {
			return this.company_externalid;
		}

		public String contact_direct_phone;

		public String getContact_direct_phone() {
			return this.contact_direct_phone;
		}

		public String contact_alternate_phone;

		public String getContact_alternate_phone() {
			return this.contact_alternate_phone;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_VINCERE_ETL_garrison_gen_data_contact.length) {
					if (length < 1024 && commonByteArray_VINCERE_ETL_garrison_gen_data_contact.length == 0) {
						commonByteArray_VINCERE_ETL_garrison_gen_data_contact = new byte[1024];
					} else {
						commonByteArray_VINCERE_ETL_garrison_gen_data_contact = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_VINCERE_ETL_garrison_gen_data_contact, 0, length);
				strReturn = new String(commonByteArray_VINCERE_ETL_garrison_gen_data_contact, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_VINCERE_ETL_garrison_gen_data_contact) {

				try {

					int length = 0;

					this.contact_externalid = readString(dis);

					this.company_externalid = readString(dis);

					this.contact_direct_phone = readString(dis);

					this.contact_alternate_phone = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.contact_externalid, dos);

				// String

				writeString(this.company_externalid, dos);

				// String

				writeString(this.contact_direct_phone, dos);

				// String

				writeString(this.contact_alternate_phone, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("contact_externalid=" + contact_externalid);
			sb.append(",company_externalid=" + company_externalid);
			sb.append(",contact_direct_phone=" + contact_direct_phone);
			sb.append(",contact_alternate_phone=" + contact_alternate_phone);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row4Struct row4 = new row4Struct();

				/**
				 * [tDBOutput_4 begin ] start
				 */

				ok_Hash.put("tDBOutput_4", false);
				start_Hash.put("tDBOutput_4", System.currentTimeMillis());

				currentComponent = "tDBOutput_4";

				int tos_count_tDBOutput_4 = 0;

				int nb_line_tDBOutput_4 = 0;
				int nb_line_update_tDBOutput_4 = 0;
				int nb_line_inserted_tDBOutput_4 = 0;
				int nb_line_deleted_tDBOutput_4 = 0;
				int nb_line_rejected_tDBOutput_4 = 0;

				int deletedCount_tDBOutput_4 = 0;
				int updatedCount_tDBOutput_4 = 0;
				int insertedCount_tDBOutput_4 = 0;

				String tableName_tDBOutput_4 = "contact_phones";
				boolean whetherReject_tDBOutput_4 = false;

				int batchSize_tDBOutput_4 = 10000;
				int batchSizeCounter_tDBOutput_4 = 0;
				int tmp_batchUpdateCount_tDBOutput_4 = 0;

				java.sql.Connection conn_tDBOutput_4 = null;
				conn_tDBOutput_4 = (java.sql.Connection) globalMap.get("conn_tDBConnection_2");

				java.sql.DatabaseMetaData dbMetaData_tDBOutput_4 = conn_tDBOutput_4.getMetaData();
				boolean whetherExist_tDBOutput_4 = false;
				try (java.sql.ResultSet rsTable_tDBOutput_4 = dbMetaData_tDBOutput_4.getTables(null, null, null,
						new String[] { "TABLE" })) {
					while (rsTable_tDBOutput_4.next()) {
						String table_tDBOutput_4 = rsTable_tDBOutput_4.getString("TABLE_NAME");
						if (table_tDBOutput_4.equalsIgnoreCase("contact_phones")) {
							whetherExist_tDBOutput_4 = true;
							break;
						}
					}
				}
				if (whetherExist_tDBOutput_4) {
					try (java.sql.Statement stmtDrop_tDBOutput_4 = conn_tDBOutput_4.createStatement()) {
						stmtDrop_tDBOutput_4.execute("DROP TABLE \"" + tableName_tDBOutput_4 + "\"");
					}
				}
				try (java.sql.Statement stmtCreate_tDBOutput_4 = conn_tDBOutput_4.createStatement()) {
					stmtCreate_tDBOutput_4.execute("CREATE TABLE \"" + tableName_tDBOutput_4
							+ "\"(\"contact_externalid\" VARCHAR(13)   not null ,\"company_externalid\" VARCHAR(13)  ,\"contact_direct_phone\" VARCHAR(50)  ,\"contact_alternate_phone\" VARCHAR(50)  )");
				}
				String insert_tDBOutput_4 = "INSERT INTO \"" + "contact_phones"
						+ "\" (\"contact_externalid\",\"company_externalid\",\"contact_direct_phone\",\"contact_alternate_phone\") VALUES (?,?,?,?)";
				java.sql.PreparedStatement pstmt_tDBOutput_4 = conn_tDBOutput_4.prepareStatement(insert_tDBOutput_4);
				resourceMap.put("pstmt_tDBOutput_4", pstmt_tDBOutput_4);

				/**
				 * [tDBOutput_4 begin ] stop
				 */

				/**
				 * [tDBInput_4 begin ] start
				 */

				ok_Hash.put("tDBInput_4", false);
				start_Hash.put("tDBInput_4", System.currentTimeMillis());

				currentComponent = "tDBInput_4";

				int tos_count_tDBInput_4 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_4 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_4 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_4 = new String[] { "FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_4, talendToDBArray_tDBInput_4);
				int nb_line_tDBInput_4 = 0;
				java.sql.Connection conn_tDBInput_4 = null;
				conn_tDBInput_4 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");
				String dbschema_tDBInput_4 = (String) globalMap.get("dbschema_tDBConnection_1");

				java.sql.Statement stmt_tDBInput_4 = conn_tDBInput_4.createStatement();

				String dbquery_tDBInput_4 = "\n\nwith contact as (\n	select\n	concat('', p.cid) as contact_externalid\n	, concat('', c.id) as company_externalid\n	, e.cph"
						+ "one as contact_direct_phone\n	, e.cphone2 as contact_alternate_phone\n	, e.[Sequence]\n	from\n		dbo.employment as e\n	left ou"
						+ "ter join\n		dbo.people as p\n		on e.cid = p.cid and e.deleteflag = 0\n	left outer join\n		dbo.company as c\n		on e.id = c.id\n"
						+ "	left outer join\n		dbo.companystatus as cs\n		on c.companystatus_id = cs.companystatus_id\n	left outer join\n		dbo.candidst"
						+ "atus as cans\n		on p.candidstatus_id = cans.candidstatus_id\n	where p.RoleType=1 and p.DeleteFlag=0\n)\nselect \n	cont.contac"
						+ "t_externalid\n	, company_externalid\n	, contact_direct_phone\n	, contact_alternate_phone\nfrom contact cont join (\n	select c"
						+ "ontact_externalid, max([Sequence]) as [Sequence] from contact group by contact_externalid\n) as current_company \non cont."
						+ "contact_externalid=current_company.contact_externalid\nand cont.[Sequence]=current_company.[Sequence]\n\n\n\n"

				;

				globalMap.put("tDBInput_4_QUERY", dbquery_tDBInput_4);
				java.sql.ResultSet rs_tDBInput_4 = null;

				try {
					rs_tDBInput_4 = stmt_tDBInput_4.executeQuery(dbquery_tDBInput_4);
					java.sql.ResultSetMetaData rsmd_tDBInput_4 = rs_tDBInput_4.getMetaData();
					int colQtyInRs_tDBInput_4 = rsmd_tDBInput_4.getColumnCount();

					String tmpContent_tDBInput_4 = null;

					while (rs_tDBInput_4.next()) {
						nb_line_tDBInput_4++;

						if (colQtyInRs_tDBInput_4 < 1) {
							row4.contact_externalid = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(1);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4.contains(
										rsmd_tDBInput_4.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
									row4.contact_externalid = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row4.contact_externalid = tmpContent_tDBInput_4;
								}
							} else {
								row4.contact_externalid = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 2) {
							row4.company_externalid = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(2);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4.contains(
										rsmd_tDBInput_4.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
									row4.company_externalid = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row4.company_externalid = tmpContent_tDBInput_4;
								}
							} else {
								row4.company_externalid = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 3) {
							row4.contact_direct_phone = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(3);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4.contains(
										rsmd_tDBInput_4.getColumnTypeName(3).toUpperCase(java.util.Locale.ENGLISH))) {
									row4.contact_direct_phone = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row4.contact_direct_phone = tmpContent_tDBInput_4;
								}
							} else {
								row4.contact_direct_phone = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 4) {
							row4.contact_alternate_phone = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(4);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4.contains(
										rsmd_tDBInput_4.getColumnTypeName(4).toUpperCase(java.util.Locale.ENGLISH))) {
									row4.contact_alternate_phone = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row4.contact_alternate_phone = tmpContent_tDBInput_4;
								}
							} else {
								row4.contact_alternate_phone = null;
							}
						}

						/**
						 * [tDBInput_4 begin ] stop
						 */

						/**
						 * [tDBInput_4 main ] start
						 */

						currentComponent = "tDBInput_4";

						tos_count_tDBInput_4++;

						/**
						 * [tDBInput_4 main ] stop
						 */

						/**
						 * [tDBInput_4 process_data_begin ] start
						 */

						currentComponent = "tDBInput_4";

						/**
						 * [tDBInput_4 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_4 main ] start
						 */

						currentComponent = "tDBOutput_4";

						whetherReject_tDBOutput_4 = false;
						if (row4.contact_externalid == null) {
							pstmt_tDBOutput_4.setNull(1, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_4.setString(1, row4.contact_externalid);
						}

						if (row4.company_externalid == null) {
							pstmt_tDBOutput_4.setNull(2, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_4.setString(2, row4.company_externalid);
						}

						if (row4.contact_direct_phone == null) {
							pstmt_tDBOutput_4.setNull(3, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_4.setString(3, row4.contact_direct_phone);
						}

						if (row4.contact_alternate_phone == null) {
							pstmt_tDBOutput_4.setNull(4, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_4.setString(4, row4.contact_alternate_phone);
						}

						pstmt_tDBOutput_4.addBatch();
						batchSizeCounter_tDBOutput_4++;
						nb_line_tDBOutput_4++;
						if ((batchSize_tDBOutput_4 > 0) && (batchSize_tDBOutput_4 <= batchSizeCounter_tDBOutput_4)) {
							int[] status_tDBOutput_4 = null;
							int countSum_tDBOutput_4 = 0;
							try {
								batchSizeCounter_tDBOutput_4 = 0;
								status_tDBOutput_4 = pstmt_tDBOutput_4.executeBatch();
								for (int countEach_tDBOutput_4 : status_tDBOutput_4) {
									countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
								}
							} catch (java.sql.BatchUpdateException e) {
								for (int countEach_tDBOutput_4 : e.getUpdateCounts()) {
									countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
								}
								System.err.println(e.getMessage());
							}
							try {
								tmp_batchUpdateCount_tDBOutput_4 = pstmt_tDBOutput_4.getUpdateCount();
							} catch (java.sql.SQLException e) {
								System.err.println(e.getMessage());
							}
							tmp_batchUpdateCount_tDBOutput_4 = tmp_batchUpdateCount_tDBOutput_4 > countSum_tDBOutput_4
									? tmp_batchUpdateCount_tDBOutput_4
									: countSum_tDBOutput_4;
							insertedCount_tDBOutput_4 += tmp_batchUpdateCount_tDBOutput_4;
						}

						tos_count_tDBOutput_4++;

						/**
						 * [tDBOutput_4 main ] stop
						 */

						/**
						 * [tDBOutput_4 process_data_begin ] start
						 */

						currentComponent = "tDBOutput_4";

						/**
						 * [tDBOutput_4 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_4 process_data_end ] start
						 */

						currentComponent = "tDBOutput_4";

						/**
						 * [tDBOutput_4 process_data_end ] stop
						 */

						/**
						 * [tDBInput_4 process_data_end ] start
						 */

						currentComponent = "tDBInput_4";

						/**
						 * [tDBInput_4 process_data_end ] stop
						 */

						/**
						 * [tDBInput_4 end ] start
						 */

						currentComponent = "tDBInput_4";

					}
				} finally {
					if (rs_tDBInput_4 != null) {
						rs_tDBInput_4.close();
					}
					if (stmt_tDBInput_4 != null) {
						stmt_tDBInput_4.close();
					}
				}
				globalMap.put("tDBInput_4_NB_LINE", nb_line_tDBInput_4);

				ok_Hash.put("tDBInput_4", true);
				end_Hash.put("tDBInput_4", System.currentTimeMillis());

				/**
				 * [tDBInput_4 end ] stop
				 */

				/**
				 * [tDBOutput_4 end ] start
				 */

				currentComponent = "tDBOutput_4";

				int[] status_tDBOutput_4 = null;
				int countSum_tDBOutput_4 = 0;
				try {
					if (pstmt_tDBOutput_4 != null && batchSizeCounter_tDBOutput_4 > 0) {
						status_tDBOutput_4 = pstmt_tDBOutput_4.executeBatch();
						for (int countEach_tDBOutput_4 : status_tDBOutput_4) {
							countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
						}
					}
				} catch (java.sql.BatchUpdateException e) {
					for (int countEach_tDBOutput_4 : e.getUpdateCounts()) {
						countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
					}
					System.err.println(e.getMessage());
				}
				if (pstmt_tDBOutput_4 != null && batchSizeCounter_tDBOutput_4 > 0) {
					try {
						tmp_batchUpdateCount_tDBOutput_4 = pstmt_tDBOutput_4.getUpdateCount();
					} catch (java.sql.SQLException e) {

					}
					tmp_batchUpdateCount_tDBOutput_4 = tmp_batchUpdateCount_tDBOutput_4 > countSum_tDBOutput_4
							? tmp_batchUpdateCount_tDBOutput_4
							: countSum_tDBOutput_4;
					insertedCount_tDBOutput_4 += tmp_batchUpdateCount_tDBOutput_4;
				}
				if (pstmt_tDBOutput_4 != null) {
					pstmt_tDBOutput_4.close();
					resourceMap.remove("pstmt_tDBOutput_4");
				}
				resourceMap.put("statementClosed_tDBOutput_4", true);

				int rejectedCount_tDBOutput_4 = 0;
				nb_line_deleted_tDBOutput_4 = nb_line_deleted_tDBOutput_4 + deletedCount_tDBOutput_4;
				nb_line_update_tDBOutput_4 = nb_line_update_tDBOutput_4 + updatedCount_tDBOutput_4;
				nb_line_inserted_tDBOutput_4 = nb_line_inserted_tDBOutput_4 + insertedCount_tDBOutput_4;
				nb_line_rejected_tDBOutput_4 = nb_line_rejected_tDBOutput_4 + rejectedCount_tDBOutput_4;

				globalMap.put("tDBOutput_4_NB_LINE", nb_line_tDBOutput_4);
				globalMap.put("tDBOutput_4_NB_LINE_UPDATED", nb_line_update_tDBOutput_4);
				globalMap.put("tDBOutput_4_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_4);
				globalMap.put("tDBOutput_4_NB_LINE_DELETED", nb_line_deleted_tDBOutput_4);
				globalMap.put("tDBOutput_4_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_4);

				ok_Hash.put("tDBOutput_4", true);
				end_Hash.put("tDBOutput_4", System.currentTimeMillis());

				/**
				 * [tDBOutput_4 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_4 finally ] start
				 */

				currentComponent = "tDBInput_4";

				/**
				 * [tDBInput_4 finally ] stop
				 */

				/**
				 * [tDBOutput_4 finally ] start
				 */

				currentComponent = "tDBOutput_4";

				if (resourceMap.get("statementClosed_tDBOutput_4") == null) {
					java.sql.PreparedStatement pstmtToClose_tDBOutput_4 = null;
					if ((pstmtToClose_tDBOutput_4 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_4")) != null) {
						pstmtToClose_tDBOutput_4.close();
					}
				}

				/**
				 * [tDBOutput_4 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 1);
	}

	public static class outStruct implements routines.system.IPersistableRow<outStruct> {
		final static byte[] commonByteArrayLock_VINCERE_ETL_garrison_gen_data_contact = new byte[0];
		static byte[] commonByteArray_VINCERE_ETL_garrison_gen_data_contact = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String contact_externalid;

		public String getContact_externalid() {
			return this.contact_externalid;
		}

		public String company_externalid;

		public String getCompany_externalid() {
			return this.company_externalid;
		}

		public String contact_primary_email;

		public String getContact_primary_email() {
			return this.contact_primary_email;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.contact_externalid == null) ? 0 : this.contact_externalid.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final outStruct other = (outStruct) obj;

			if (this.contact_externalid == null) {
				if (other.contact_externalid != null)
					return false;

			} else if (!this.contact_externalid.equals(other.contact_externalid))

				return false;

			return true;
		}

		public void copyDataTo(outStruct other) {

			other.contact_externalid = this.contact_externalid;
			other.company_externalid = this.company_externalid;
			other.contact_primary_email = this.contact_primary_email;

		}

		public void copyKeysDataTo(outStruct other) {

			other.contact_externalid = this.contact_externalid;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_VINCERE_ETL_garrison_gen_data_contact.length) {
					if (length < 1024 && commonByteArray_VINCERE_ETL_garrison_gen_data_contact.length == 0) {
						commonByteArray_VINCERE_ETL_garrison_gen_data_contact = new byte[1024];
					} else {
						commonByteArray_VINCERE_ETL_garrison_gen_data_contact = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_VINCERE_ETL_garrison_gen_data_contact, 0, length);
				strReturn = new String(commonByteArray_VINCERE_ETL_garrison_gen_data_contact, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_VINCERE_ETL_garrison_gen_data_contact) {

				try {

					int length = 0;

					this.contact_externalid = readString(dis);

					this.company_externalid = readString(dis);

					this.contact_primary_email = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.contact_externalid, dos);

				// String

				writeString(this.company_externalid, dos);

				// String

				writeString(this.contact_primary_email, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("contact_externalid=" + contact_externalid);
			sb.append(",company_externalid=" + company_externalid);
			sb.append(",contact_primary_email=" + contact_primary_email);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(outStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.contact_externalid, other.contact_externalid);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_VINCERE_ETL_garrison_gen_data_contact = new byte[0];
		static byte[] commonByteArray_VINCERE_ETL_garrison_gen_data_contact = new byte[0];

		public String contact_externalid;

		public String getContact_externalid() {
			return this.contact_externalid;
		}

		public String company_externalid;

		public String getCompany_externalid() {
			return this.company_externalid;
		}

		public String contact_primary_email;

		public String getContact_primary_email() {
			return this.contact_primary_email;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_VINCERE_ETL_garrison_gen_data_contact.length) {
					if (length < 1024 && commonByteArray_VINCERE_ETL_garrison_gen_data_contact.length == 0) {
						commonByteArray_VINCERE_ETL_garrison_gen_data_contact = new byte[1024];
					} else {
						commonByteArray_VINCERE_ETL_garrison_gen_data_contact = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_VINCERE_ETL_garrison_gen_data_contact, 0, length);
				strReturn = new String(commonByteArray_VINCERE_ETL_garrison_gen_data_contact, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_VINCERE_ETL_garrison_gen_data_contact) {

				try {

					int length = 0;

					this.contact_externalid = readString(dis);

					this.company_externalid = readString(dis);

					this.contact_primary_email = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.contact_externalid, dos);

				// String

				writeString(this.company_externalid, dos);

				// String

				writeString(this.contact_primary_email, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("contact_externalid=" + contact_externalid);
			sb.append(",company_externalid=" + company_externalid);
			sb.append(",contact_primary_email=" + contact_primary_email);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row5Struct row5 = new row5Struct();
				outStruct out = new outStruct();

				/**
				 * [tDBOutput_5 begin ] start
				 */

				ok_Hash.put("tDBOutput_5", false);
				start_Hash.put("tDBOutput_5", System.currentTimeMillis());

				currentComponent = "tDBOutput_5";

				int tos_count_tDBOutput_5 = 0;

				int nb_line_tDBOutput_5 = 0;
				int nb_line_update_tDBOutput_5 = 0;
				int nb_line_inserted_tDBOutput_5 = 0;
				int nb_line_deleted_tDBOutput_5 = 0;
				int nb_line_rejected_tDBOutput_5 = 0;

				int deletedCount_tDBOutput_5 = 0;
				int updatedCount_tDBOutput_5 = 0;
				int insertedCount_tDBOutput_5 = 0;

				String tableName_tDBOutput_5 = "contact_primary_email";
				boolean whetherReject_tDBOutput_5 = false;

				int batchSize_tDBOutput_5 = 10000;
				int batchSizeCounter_tDBOutput_5 = 0;
				int tmp_batchUpdateCount_tDBOutput_5 = 0;

				java.sql.Connection conn_tDBOutput_5 = null;
				conn_tDBOutput_5 = (java.sql.Connection) globalMap.get("conn_tDBConnection_2");

				java.sql.DatabaseMetaData dbMetaData_tDBOutput_5 = conn_tDBOutput_5.getMetaData();
				boolean whetherExist_tDBOutput_5 = false;
				try (java.sql.ResultSet rsTable_tDBOutput_5 = dbMetaData_tDBOutput_5.getTables(null, null, null,
						new String[] { "TABLE" })) {
					while (rsTable_tDBOutput_5.next()) {
						String table_tDBOutput_5 = rsTable_tDBOutput_5.getString("TABLE_NAME");
						if (table_tDBOutput_5.equalsIgnoreCase("contact_primary_email")) {
							whetherExist_tDBOutput_5 = true;
							break;
						}
					}
				}
				if (whetherExist_tDBOutput_5) {
					try (java.sql.Statement stmtDrop_tDBOutput_5 = conn_tDBOutput_5.createStatement()) {
						stmtDrop_tDBOutput_5.execute("DROP TABLE \"" + tableName_tDBOutput_5 + "\"");
					}
				}
				try (java.sql.Statement stmtCreate_tDBOutput_5 = conn_tDBOutput_5.createStatement()) {
					stmtCreate_tDBOutput_5.execute("CREATE TABLE \"" + tableName_tDBOutput_5
							+ "\"(\"contact_externalid\" VARCHAR(13)   not null ,\"company_externalid\" VARCHAR(13)  ,\"contact_primary_email\" VARCHAR(200)  ,primary key(\"contact_externalid\"))");
				}
				String insert_tDBOutput_5 = "INSERT INTO \"" + "contact_primary_email"
						+ "\" (\"contact_externalid\",\"company_externalid\",\"contact_primary_email\") VALUES (?,?,?)";
				java.sql.PreparedStatement pstmt_tDBOutput_5 = conn_tDBOutput_5.prepareStatement(insert_tDBOutput_5);
				resourceMap.put("pstmt_tDBOutput_5", pstmt_tDBOutput_5);

				/**
				 * [tDBOutput_5 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				int tos_count_tMap_1 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
				outStruct out_tmp = new outStruct();
// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tDBInput_5 begin ] start
				 */

				ok_Hash.put("tDBInput_5", false);
				start_Hash.put("tDBInput_5", System.currentTimeMillis());

				currentComponent = "tDBInput_5";

				int tos_count_tDBInput_5 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_5 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_5 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_5 = new String[] { "FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_5, talendToDBArray_tDBInput_5);
				int nb_line_tDBInput_5 = 0;
				java.sql.Connection conn_tDBInput_5 = null;
				conn_tDBInput_5 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");
				String dbschema_tDBInput_5 = (String) globalMap.get("dbschema_tDBConnection_1");

				java.sql.Statement stmt_tDBInput_5 = conn_tDBInput_5.createStatement();

				String dbquery_tDBInput_5 = "\n\n\n\n\nwith contact as (\n	select\n	concat('', p.cid) as contact_externalid\n	, concat('', c.id) as company_externalid\n	, e."
						+ "Contactemail as contact_primary_email\n	, e.[Sequence]\n	from\n		dbo.employment as e\n	left outer join\n		dbo.people as p\n		o"
						+ "n e.cid = p.cid and e.deleteflag = 0\n	left outer join\n		dbo.company as c\n		on e.id = c.id\n	left outer join\n		dbo.company"
						+ "status as cs\n		on c.companystatus_id = cs.companystatus_id\n	left outer join\n		dbo.candidstatus as cans\n		on p.candidstat"
						+ "us_id = cans.candidstatus_id\n	where p.RoleType=1 and p.DeleteFlag=0\n)\nselect \n	cont.contact_externalid\n	, company_extern"
						+ "alid\n	, contact_primary_email\nfrom contact cont join (\n	select contact_externalid, max([Sequence]) as [Sequence] from co"
						+ "ntact group by contact_externalid\n) as current_company \non cont.contact_externalid=current_company.contact_externalid\nan"
						+ "d cont.[Sequence]=current_company.[Sequence]\n\n\n"

				;

				globalMap.put("tDBInput_5_QUERY", dbquery_tDBInput_5);
				java.sql.ResultSet rs_tDBInput_5 = null;

				try {
					rs_tDBInput_5 = stmt_tDBInput_5.executeQuery(dbquery_tDBInput_5);
					java.sql.ResultSetMetaData rsmd_tDBInput_5 = rs_tDBInput_5.getMetaData();
					int colQtyInRs_tDBInput_5 = rsmd_tDBInput_5.getColumnCount();

					String tmpContent_tDBInput_5 = null;

					while (rs_tDBInput_5.next()) {
						nb_line_tDBInput_5++;

						if (colQtyInRs_tDBInput_5 < 1) {
							row5.contact_externalid = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(1);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
									row5.contact_externalid = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row5.contact_externalid = tmpContent_tDBInput_5;
								}
							} else {
								row5.contact_externalid = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 2) {
							row5.company_externalid = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(2);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
									row5.company_externalid = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row5.company_externalid = tmpContent_tDBInput_5;
								}
							} else {
								row5.company_externalid = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 3) {
							row5.contact_primary_email = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(3);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(3).toUpperCase(java.util.Locale.ENGLISH))) {
									row5.contact_primary_email = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row5.contact_primary_email = tmpContent_tDBInput_5;
								}
							} else {
								row5.contact_primary_email = null;
							}
						}

						/**
						 * [tDBInput_5 begin ] stop
						 */

						/**
						 * [tDBInput_5 main ] start
						 */

						currentComponent = "tDBInput_5";

						tos_count_tDBInput_5++;

						/**
						 * [tDBInput_5 main ] stop
						 */

						/**
						 * [tDBInput_5 process_data_begin ] start
						 */

						currentComponent = "tDBInput_5";

						/**
						 * [tDBInput_5 process_data_begin ] stop
						 */

						/**
						 * [tMap_1 main ] start
						 */

						currentComponent = "tMap_1";

						boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_1 = false;
						boolean mainRowRejected_tMap_1 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
							// ###############################
							// # Output tables

							out = null;

// # Output table : 'out'
							out_tmp.contact_externalid = row5.contact_externalid;
							out_tmp.company_externalid = row5.company_externalid;
							out_tmp.contact_primary_email = Relational.ISNULL(row5.contact_primary_email)
									? row5.contact_primary_email
									: row5.contact_primary_email.toLowerCase();
							out = out_tmp;
// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_1 = false;

						tos_count_tMap_1++;

						/**
						 * [tMap_1 main ] stop
						 */

						/**
						 * [tMap_1 process_data_begin ] start
						 */

						currentComponent = "tMap_1";

						/**
						 * [tMap_1 process_data_begin ] stop
						 */
// Start of branch "out"
						if (out != null) {

							/**
							 * [tDBOutput_5 main ] start
							 */

							currentComponent = "tDBOutput_5";

							whetherReject_tDBOutput_5 = false;
							if (out.contact_externalid == null) {
								pstmt_tDBOutput_5.setNull(1, java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_5.setString(1, out.contact_externalid);
							}

							if (out.company_externalid == null) {
								pstmt_tDBOutput_5.setNull(2, java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_5.setString(2, out.company_externalid);
							}

							if (out.contact_primary_email == null) {
								pstmt_tDBOutput_5.setNull(3, java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_5.setString(3, out.contact_primary_email);
							}

							pstmt_tDBOutput_5.addBatch();
							batchSizeCounter_tDBOutput_5++;
							nb_line_tDBOutput_5++;
							if ((batchSize_tDBOutput_5 > 0)
									&& (batchSize_tDBOutput_5 <= batchSizeCounter_tDBOutput_5)) {
								int[] status_tDBOutput_5 = null;
								int countSum_tDBOutput_5 = 0;
								try {
									batchSizeCounter_tDBOutput_5 = 0;
									status_tDBOutput_5 = pstmt_tDBOutput_5.executeBatch();
									for (int countEach_tDBOutput_5 : status_tDBOutput_5) {
										countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0 : countEach_tDBOutput_5);
									}
								} catch (java.sql.BatchUpdateException e) {
									for (int countEach_tDBOutput_5 : e.getUpdateCounts()) {
										countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0 : countEach_tDBOutput_5);
									}
									System.err.println(e.getMessage());
								}
								try {
									tmp_batchUpdateCount_tDBOutput_5 = pstmt_tDBOutput_5.getUpdateCount();
								} catch (java.sql.SQLException e) {
									System.err.println(e.getMessage());
								}
								tmp_batchUpdateCount_tDBOutput_5 = tmp_batchUpdateCount_tDBOutput_5 > countSum_tDBOutput_5
										? tmp_batchUpdateCount_tDBOutput_5
										: countSum_tDBOutput_5;
								insertedCount_tDBOutput_5 += tmp_batchUpdateCount_tDBOutput_5;
							}

							tos_count_tDBOutput_5++;

							/**
							 * [tDBOutput_5 main ] stop
							 */

							/**
							 * [tDBOutput_5 process_data_begin ] start
							 */

							currentComponent = "tDBOutput_5";

							/**
							 * [tDBOutput_5 process_data_begin ] stop
							 */

							/**
							 * [tDBOutput_5 process_data_end ] start
							 */

							currentComponent = "tDBOutput_5";

							/**
							 * [tDBOutput_5 process_data_end ] stop
							 */

						} // End of branch "out"

						/**
						 * [tMap_1 process_data_end ] start
						 */

						currentComponent = "tMap_1";

						/**
						 * [tMap_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_5 process_data_end ] start
						 */

						currentComponent = "tDBInput_5";

						/**
						 * [tDBInput_5 process_data_end ] stop
						 */

						/**
						 * [tDBInput_5 end ] start
						 */

						currentComponent = "tDBInput_5";

					}
				} finally {
					if (rs_tDBInput_5 != null) {
						rs_tDBInput_5.close();
					}
					if (stmt_tDBInput_5 != null) {
						stmt_tDBInput_5.close();
					}
				}
				globalMap.put("tDBInput_5_NB_LINE", nb_line_tDBInput_5);

				ok_Hash.put("tDBInput_5", true);
				end_Hash.put("tDBInput_5", System.currentTimeMillis());

				/**
				 * [tDBInput_5 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

// ###############################
// # Lookup hashes releasing
// ###############################      

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tDBOutput_5 end ] start
				 */

				currentComponent = "tDBOutput_5";

				int[] status_tDBOutput_5 = null;
				int countSum_tDBOutput_5 = 0;
				try {
					if (pstmt_tDBOutput_5 != null && batchSizeCounter_tDBOutput_5 > 0) {
						status_tDBOutput_5 = pstmt_tDBOutput_5.executeBatch();
						for (int countEach_tDBOutput_5 : status_tDBOutput_5) {
							countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0 : countEach_tDBOutput_5);
						}
					}
				} catch (java.sql.BatchUpdateException e) {
					for (int countEach_tDBOutput_5 : e.getUpdateCounts()) {
						countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0 : countEach_tDBOutput_5);
					}
					System.err.println(e.getMessage());
				}
				if (pstmt_tDBOutput_5 != null && batchSizeCounter_tDBOutput_5 > 0) {
					try {
						tmp_batchUpdateCount_tDBOutput_5 = pstmt_tDBOutput_5.getUpdateCount();
					} catch (java.sql.SQLException e) {

					}
					tmp_batchUpdateCount_tDBOutput_5 = tmp_batchUpdateCount_tDBOutput_5 > countSum_tDBOutput_5
							? tmp_batchUpdateCount_tDBOutput_5
							: countSum_tDBOutput_5;
					insertedCount_tDBOutput_5 += tmp_batchUpdateCount_tDBOutput_5;
				}
				if (pstmt_tDBOutput_5 != null) {
					pstmt_tDBOutput_5.close();
					resourceMap.remove("pstmt_tDBOutput_5");
				}
				resourceMap.put("statementClosed_tDBOutput_5", true);

				int rejectedCount_tDBOutput_5 = 0;
				nb_line_deleted_tDBOutput_5 = nb_line_deleted_tDBOutput_5 + deletedCount_tDBOutput_5;
				nb_line_update_tDBOutput_5 = nb_line_update_tDBOutput_5 + updatedCount_tDBOutput_5;
				nb_line_inserted_tDBOutput_5 = nb_line_inserted_tDBOutput_5 + insertedCount_tDBOutput_5;
				nb_line_rejected_tDBOutput_5 = nb_line_rejected_tDBOutput_5 + rejectedCount_tDBOutput_5;

				globalMap.put("tDBOutput_5_NB_LINE", nb_line_tDBOutput_5);
				globalMap.put("tDBOutput_5_NB_LINE_UPDATED", nb_line_update_tDBOutput_5);
				globalMap.put("tDBOutput_5_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_5);
				globalMap.put("tDBOutput_5_NB_LINE_DELETED", nb_line_deleted_tDBOutput_5);
				globalMap.put("tDBOutput_5_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_5);

				ok_Hash.put("tDBOutput_5", true);
				end_Hash.put("tDBOutput_5", System.currentTimeMillis());

				/**
				 * [tDBOutput_5 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_5 finally ] start
				 */

				currentComponent = "tDBInput_5";

				/**
				 * [tDBInput_5 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tDBOutput_5 finally ] start
				 */

				currentComponent = "tDBOutput_5";

				if (resourceMap.get("statementClosed_tDBOutput_5") == null) {
					java.sql.PreparedStatement pstmtToClose_tDBOutput_5 = null;
					if ((pstmtToClose_tDBOutput_5 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_5")) != null) {
						pstmtToClose_tDBOutput_5.close();
					}
				}

				/**
				 * [tDBOutput_5 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_5_SUBPROCESS_STATE", 1);
	}

	public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_VINCERE_ETL_garrison_gen_data_contact = new byte[0];
		static byte[] commonByteArray_VINCERE_ETL_garrison_gen_data_contact = new byte[0];

		public int employment_id;

		public int getEmployment_id() {
			return this.employment_id;
		}

		public String contact_externalid;

		public String getContact_externalid() {
			return this.contact_externalid;
		}

		public String company_externalid;

		public String getCompany_externalid() {
			return this.company_externalid;
		}

		public String company_name;

		public String getCompany_name() {
			return this.company_name;
		}

		public String emp_from;

		public String getEmp_from() {
			return this.emp_from;
		}

		public String emp_to;

		public String getEmp_to() {
			return this.emp_to;
		}

		public String ReasonForLeaving;

		public String getReasonForLeaving() {
			return this.ReasonForLeaving;
		}

		public String BillRate;

		public String getBillRate() {
			return this.BillRate;
		}

		public String PayRate;

		public String getPayRate() {
			return this.PayRate;
		}

		public String PayRateUnit;

		public String getPayRateUnit() {
			return this.PayRateUnit;
		}

		public String PayCurrency;

		public String getPayCurrency() {
			return this.PayCurrency;
		}

		public Boolean fa;

		public Boolean getFa() {
			return this.fa;
		}

		public String emp_notes;

		public String getEmp_notes() {
			return this.emp_notes;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_VINCERE_ETL_garrison_gen_data_contact.length) {
					if (length < 1024 && commonByteArray_VINCERE_ETL_garrison_gen_data_contact.length == 0) {
						commonByteArray_VINCERE_ETL_garrison_gen_data_contact = new byte[1024];
					} else {
						commonByteArray_VINCERE_ETL_garrison_gen_data_contact = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_VINCERE_ETL_garrison_gen_data_contact, 0, length);
				strReturn = new String(commonByteArray_VINCERE_ETL_garrison_gen_data_contact, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_VINCERE_ETL_garrison_gen_data_contact) {

				try {

					int length = 0;

					this.employment_id = dis.readInt();

					this.contact_externalid = readString(dis);

					this.company_externalid = readString(dis);

					this.company_name = readString(dis);

					this.emp_from = readString(dis);

					this.emp_to = readString(dis);

					this.ReasonForLeaving = readString(dis);

					this.BillRate = readString(dis);

					this.PayRate = readString(dis);

					this.PayRateUnit = readString(dis);

					this.PayCurrency = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.fa = null;
					} else {
						this.fa = dis.readBoolean();
					}

					this.emp_notes = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.employment_id);

				// String

				writeString(this.contact_externalid, dos);

				// String

				writeString(this.company_externalid, dos);

				// String

				writeString(this.company_name, dos);

				// String

				writeString(this.emp_from, dos);

				// String

				writeString(this.emp_to, dos);

				// String

				writeString(this.ReasonForLeaving, dos);

				// String

				writeString(this.BillRate, dos);

				// String

				writeString(this.PayRate, dos);

				// String

				writeString(this.PayRateUnit, dos);

				// String

				writeString(this.PayCurrency, dos);

				// Boolean

				if (this.fa == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.fa);
				}

				// String

				writeString(this.emp_notes, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("employment_id=" + String.valueOf(employment_id));
			sb.append(",contact_externalid=" + contact_externalid);
			sb.append(",company_externalid=" + company_externalid);
			sb.append(",company_name=" + company_name);
			sb.append(",emp_from=" + emp_from);
			sb.append(",emp_to=" + emp_to);
			sb.append(",ReasonForLeaving=" + ReasonForLeaving);
			sb.append(",BillRate=" + BillRate);
			sb.append(",PayRate=" + PayRate);
			sb.append(",PayRateUnit=" + PayRateUnit);
			sb.append(",PayCurrency=" + PayCurrency);
			sb.append(",fa=" + String.valueOf(fa));
			sb.append(",emp_notes=" + emp_notes);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row6Struct row6 = new row6Struct();

				/**
				 * [tDBOutput_6 begin ] start
				 */

				ok_Hash.put("tDBOutput_6", false);
				start_Hash.put("tDBOutput_6", System.currentTimeMillis());

				currentComponent = "tDBOutput_6";

				int tos_count_tDBOutput_6 = 0;

				int nb_line_tDBOutput_6 = 0;
				int nb_line_update_tDBOutput_6 = 0;
				int nb_line_inserted_tDBOutput_6 = 0;
				int nb_line_deleted_tDBOutput_6 = 0;
				int nb_line_rejected_tDBOutput_6 = 0;

				int deletedCount_tDBOutput_6 = 0;
				int updatedCount_tDBOutput_6 = 0;
				int insertedCount_tDBOutput_6 = 0;

				String tableName_tDBOutput_6 = "contact_employment_history";
				boolean whetherReject_tDBOutput_6 = false;

				int batchSize_tDBOutput_6 = 10000;
				int batchSizeCounter_tDBOutput_6 = 0;
				int tmp_batchUpdateCount_tDBOutput_6 = 0;

				java.sql.Connection conn_tDBOutput_6 = null;
				conn_tDBOutput_6 = (java.sql.Connection) globalMap.get("conn_tDBConnection_2");

				java.sql.DatabaseMetaData dbMetaData_tDBOutput_6 = conn_tDBOutput_6.getMetaData();
				boolean whetherExist_tDBOutput_6 = false;
				try (java.sql.ResultSet rsTable_tDBOutput_6 = dbMetaData_tDBOutput_6.getTables(null, null, null,
						new String[] { "TABLE" })) {
					while (rsTable_tDBOutput_6.next()) {
						String table_tDBOutput_6 = rsTable_tDBOutput_6.getString("TABLE_NAME");
						if (table_tDBOutput_6.equalsIgnoreCase("contact_employment_history")) {
							whetherExist_tDBOutput_6 = true;
							break;
						}
					}
				}
				if (whetherExist_tDBOutput_6) {
					try (java.sql.Statement stmtDrop_tDBOutput_6 = conn_tDBOutput_6.createStatement()) {
						stmtDrop_tDBOutput_6.execute("DROP TABLE \"" + tableName_tDBOutput_6 + "\"");
					}
				}
				try (java.sql.Statement stmtCreate_tDBOutput_6 = conn_tDBOutput_6.createStatement()) {
					stmtCreate_tDBOutput_6.execute("CREATE TABLE \"" + tableName_tDBOutput_6
							+ "\"(\"employment_id\" INT  not null ,\"contact_externalid\" VARCHAR(13)   not null ,\"company_externalid\" VARCHAR(13)  ,\"company_name\" VARCHAR(56)  ,\"emp_from\" VARCHAR(10)  ,\"emp_to\" VARCHAR(10)  ,\"ReasonForLeaving\" VARCHAR(50)  ,\"BillRate\" VARCHAR(15)  ,\"PayRate\" VARCHAR(15)  ,\"PayRateUnit\" VARCHAR(1)  ,\"PayCurrency\" VARCHAR(10)  ,\"fa\" BIT ,\"emp_notes\" VARCHAR(1073741823)  )");
				}
				String insert_tDBOutput_6 = "INSERT INTO \"" + "contact_employment_history"
						+ "\" (\"employment_id\",\"contact_externalid\",\"company_externalid\",\"company_name\",\"emp_from\",\"emp_to\",\"ReasonForLeaving\",\"BillRate\",\"PayRate\",\"PayRateUnit\",\"PayCurrency\",\"fa\",\"emp_notes\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmt_tDBOutput_6 = conn_tDBOutput_6.prepareStatement(insert_tDBOutput_6);
				resourceMap.put("pstmt_tDBOutput_6", pstmt_tDBOutput_6);

				/**
				 * [tDBOutput_6 begin ] stop
				 */

				/**
				 * [tDBInput_6 begin ] start
				 */

				ok_Hash.put("tDBInput_6", false);
				start_Hash.put("tDBInput_6", System.currentTimeMillis());

				currentComponent = "tDBInput_6";

				int tos_count_tDBInput_6 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_6 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_6 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_6 = new String[] { "FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_6, talendToDBArray_tDBInput_6);
				int nb_line_tDBInput_6 = 0;
				java.sql.Connection conn_tDBInput_6 = null;
				conn_tDBInput_6 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");
				String dbschema_tDBInput_6 = (String) globalMap.get("dbschema_tDBConnection_1");

				java.sql.Statement stmt_tDBInput_6 = conn_tDBInput_6.createStatement();

				String dbquery_tDBInput_6 = "\n\n\n\n\n\n\nselect\n	e.id as employment_id\n	, concat('', p.cid) as contact_externalid\n	, concat('', c.id) as company_external"
						+ "id\n	, CASE ISNULL(E.Id, 0) WHEN 0 THEN CASE ISNULL(E.NLE, \n	0) WHEN 0 THEN E.CompanyName ELSE E.CompanyName + ' (NLE)' E"
						+ "ND ELSE CASE ISNULL(E.NLE, 0) \n	WHEN 0 THEN C.CompName ELSE C.CompName + ' (NLE)' END END AS company_name\n	, e.EmpFrom a"
						+ "s emp_from\n	, e.EmpTo as emp_to\n	, e.ReasonForLeaving\n	, e.BillRate\n	, e.PayRate\n	, e.PayRateUnit /* S: Salary, H: Hourl"
						+ "y */\n	, e.PayCurrency\n	, e.fa\n	, e.ContactsNotes as emp_notes\n	from\n		dbo.employment as e\n	left outer join\n		dbo.people "
						+ "as p\n		on e.cid = p.cid and e.deleteflag = 0\n	left outer join\n		dbo.company as c\n		on e.id = c.id\n	left outer join\n		dbo"
						+ ".companystatus as cs\n		on c.companystatus_id = cs.companystatus_id\n	left outer join\n		dbo.candidstatus as cans\n		on p.ca"
						+ "ndidstatus_id = cans.candidstatus_id\n	where p.RoleType=1 and p.DeleteFlag=0\n\n\n\n\n"

				;

				globalMap.put("tDBInput_6_QUERY", dbquery_tDBInput_6);
				java.sql.ResultSet rs_tDBInput_6 = null;

				try {
					rs_tDBInput_6 = stmt_tDBInput_6.executeQuery(dbquery_tDBInput_6);
					java.sql.ResultSetMetaData rsmd_tDBInput_6 = rs_tDBInput_6.getMetaData();
					int colQtyInRs_tDBInput_6 = rsmd_tDBInput_6.getColumnCount();

					String tmpContent_tDBInput_6 = null;

					while (rs_tDBInput_6.next()) {
						nb_line_tDBInput_6++;

						if (colQtyInRs_tDBInput_6 < 1) {
							row6.employment_id = 0;
						} else {

							row6.employment_id = rs_tDBInput_6.getInt(1);
							if (rs_tDBInput_6.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_6 < 2) {
							row6.contact_externalid = null;
						} else {

							tmpContent_tDBInput_6 = rs_tDBInput_6.getString(2);
							if (tmpContent_tDBInput_6 != null) {
								if (talendToDBList_tDBInput_6.contains(
										rsmd_tDBInput_6.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.contact_externalid = FormatterUtils.formatUnwithE(tmpContent_tDBInput_6);
								} else {
									row6.contact_externalid = tmpContent_tDBInput_6;
								}
							} else {
								row6.contact_externalid = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 3) {
							row6.company_externalid = null;
						} else {

							tmpContent_tDBInput_6 = rs_tDBInput_6.getString(3);
							if (tmpContent_tDBInput_6 != null) {
								if (talendToDBList_tDBInput_6.contains(
										rsmd_tDBInput_6.getColumnTypeName(3).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.company_externalid = FormatterUtils.formatUnwithE(tmpContent_tDBInput_6);
								} else {
									row6.company_externalid = tmpContent_tDBInput_6;
								}
							} else {
								row6.company_externalid = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 4) {
							row6.company_name = null;
						} else {

							tmpContent_tDBInput_6 = rs_tDBInput_6.getString(4);
							if (tmpContent_tDBInput_6 != null) {
								if (talendToDBList_tDBInput_6.contains(
										rsmd_tDBInput_6.getColumnTypeName(4).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.company_name = FormatterUtils.formatUnwithE(tmpContent_tDBInput_6);
								} else {
									row6.company_name = tmpContent_tDBInput_6;
								}
							} else {
								row6.company_name = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 5) {
							row6.emp_from = null;
						} else {

							tmpContent_tDBInput_6 = rs_tDBInput_6.getString(5);
							if (tmpContent_tDBInput_6 != null) {
								if (talendToDBList_tDBInput_6.contains(
										rsmd_tDBInput_6.getColumnTypeName(5).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.emp_from = FormatterUtils.formatUnwithE(tmpContent_tDBInput_6);
								} else {
									row6.emp_from = tmpContent_tDBInput_6;
								}
							} else {
								row6.emp_from = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 6) {
							row6.emp_to = null;
						} else {

							tmpContent_tDBInput_6 = rs_tDBInput_6.getString(6);
							if (tmpContent_tDBInput_6 != null) {
								if (talendToDBList_tDBInput_6.contains(
										rsmd_tDBInput_6.getColumnTypeName(6).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.emp_to = FormatterUtils.formatUnwithE(tmpContent_tDBInput_6);
								} else {
									row6.emp_to = tmpContent_tDBInput_6;
								}
							} else {
								row6.emp_to = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 7) {
							row6.ReasonForLeaving = null;
						} else {

							tmpContent_tDBInput_6 = rs_tDBInput_6.getString(7);
							if (tmpContent_tDBInput_6 != null) {
								if (talendToDBList_tDBInput_6.contains(
										rsmd_tDBInput_6.getColumnTypeName(7).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.ReasonForLeaving = FormatterUtils.formatUnwithE(tmpContent_tDBInput_6);
								} else {
									row6.ReasonForLeaving = tmpContent_tDBInput_6;
								}
							} else {
								row6.ReasonForLeaving = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 8) {
							row6.BillRate = null;
						} else {

							tmpContent_tDBInput_6 = rs_tDBInput_6.getString(8);
							if (tmpContent_tDBInput_6 != null) {
								if (talendToDBList_tDBInput_6.contains(
										rsmd_tDBInput_6.getColumnTypeName(8).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.BillRate = FormatterUtils.formatUnwithE(tmpContent_tDBInput_6);
								} else {
									row6.BillRate = tmpContent_tDBInput_6;
								}
							} else {
								row6.BillRate = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 9) {
							row6.PayRate = null;
						} else {

							tmpContent_tDBInput_6 = rs_tDBInput_6.getString(9);
							if (tmpContent_tDBInput_6 != null) {
								if (talendToDBList_tDBInput_6.contains(
										rsmd_tDBInput_6.getColumnTypeName(9).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.PayRate = FormatterUtils.formatUnwithE(tmpContent_tDBInput_6);
								} else {
									row6.PayRate = tmpContent_tDBInput_6;
								}
							} else {
								row6.PayRate = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 10) {
							row6.PayRateUnit = null;
						} else {

							tmpContent_tDBInput_6 = rs_tDBInput_6.getString(10);
							if (tmpContent_tDBInput_6 != null) {
								if (talendToDBList_tDBInput_6.contains(
										rsmd_tDBInput_6.getColumnTypeName(10).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.PayRateUnit = FormatterUtils.formatUnwithE(tmpContent_tDBInput_6);
								} else {
									row6.PayRateUnit = tmpContent_tDBInput_6;
								}
							} else {
								row6.PayRateUnit = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 11) {
							row6.PayCurrency = null;
						} else {

							tmpContent_tDBInput_6 = rs_tDBInput_6.getString(11);
							if (tmpContent_tDBInput_6 != null) {
								if (talendToDBList_tDBInput_6.contains(
										rsmd_tDBInput_6.getColumnTypeName(11).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.PayCurrency = FormatterUtils.formatUnwithE(tmpContent_tDBInput_6);
								} else {
									row6.PayCurrency = tmpContent_tDBInput_6;
								}
							} else {
								row6.PayCurrency = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 12) {
							row6.fa = null;
						} else {

							row6.fa = rs_tDBInput_6.getBoolean(12);
							if (rs_tDBInput_6.wasNull()) {
								row6.fa = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 13) {
							row6.emp_notes = null;
						} else {

							tmpContent_tDBInput_6 = rs_tDBInput_6.getString(13);
							if (tmpContent_tDBInput_6 != null) {
								if (talendToDBList_tDBInput_6.contains(
										rsmd_tDBInput_6.getColumnTypeName(13).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.emp_notes = FormatterUtils.formatUnwithE(tmpContent_tDBInput_6);
								} else {
									row6.emp_notes = tmpContent_tDBInput_6;
								}
							} else {
								row6.emp_notes = null;
							}
						}

						/**
						 * [tDBInput_6 begin ] stop
						 */

						/**
						 * [tDBInput_6 main ] start
						 */

						currentComponent = "tDBInput_6";

						tos_count_tDBInput_6++;

						/**
						 * [tDBInput_6 main ] stop
						 */

						/**
						 * [tDBInput_6 process_data_begin ] start
						 */

						currentComponent = "tDBInput_6";

						/**
						 * [tDBInput_6 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_6 main ] start
						 */

						currentComponent = "tDBOutput_6";

						whetherReject_tDBOutput_6 = false;
						pstmt_tDBOutput_6.setInt(1, row6.employment_id);

						if (row6.contact_externalid == null) {
							pstmt_tDBOutput_6.setNull(2, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_6.setString(2, row6.contact_externalid);
						}

						if (row6.company_externalid == null) {
							pstmt_tDBOutput_6.setNull(3, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_6.setString(3, row6.company_externalid);
						}

						if (row6.company_name == null) {
							pstmt_tDBOutput_6.setNull(4, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_6.setString(4, row6.company_name);
						}

						if (row6.emp_from == null) {
							pstmt_tDBOutput_6.setNull(5, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_6.setString(5, row6.emp_from);
						}

						if (row6.emp_to == null) {
							pstmt_tDBOutput_6.setNull(6, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_6.setString(6, row6.emp_to);
						}

						if (row6.ReasonForLeaving == null) {
							pstmt_tDBOutput_6.setNull(7, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_6.setString(7, row6.ReasonForLeaving);
						}

						if (row6.BillRate == null) {
							pstmt_tDBOutput_6.setNull(8, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_6.setString(8, row6.BillRate);
						}

						if (row6.PayRate == null) {
							pstmt_tDBOutput_6.setNull(9, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_6.setString(9, row6.PayRate);
						}

						if (row6.PayRateUnit == null) {
							pstmt_tDBOutput_6.setNull(10, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_6.setString(10, row6.PayRateUnit);
						}

						if (row6.PayCurrency == null) {
							pstmt_tDBOutput_6.setNull(11, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_6.setString(11, row6.PayCurrency);
						}

						if (row6.fa == null) {
							pstmt_tDBOutput_6.setNull(12, java.sql.Types.BOOLEAN);
						} else {
							pstmt_tDBOutput_6.setBoolean(12, row6.fa);
						}

						if (row6.emp_notes == null) {
							pstmt_tDBOutput_6.setNull(13, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_6.setString(13, row6.emp_notes);
						}

						pstmt_tDBOutput_6.addBatch();
						batchSizeCounter_tDBOutput_6++;
						nb_line_tDBOutput_6++;
						if ((batchSize_tDBOutput_6 > 0) && (batchSize_tDBOutput_6 <= batchSizeCounter_tDBOutput_6)) {
							int[] status_tDBOutput_6 = null;
							int countSum_tDBOutput_6 = 0;
							try {
								batchSizeCounter_tDBOutput_6 = 0;
								status_tDBOutput_6 = pstmt_tDBOutput_6.executeBatch();
								for (int countEach_tDBOutput_6 : status_tDBOutput_6) {
									countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0 : countEach_tDBOutput_6);
								}
							} catch (java.sql.BatchUpdateException e) {
								for (int countEach_tDBOutput_6 : e.getUpdateCounts()) {
									countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0 : countEach_tDBOutput_6);
								}
								System.err.println(e.getMessage());
							}
							try {
								tmp_batchUpdateCount_tDBOutput_6 = pstmt_tDBOutput_6.getUpdateCount();
							} catch (java.sql.SQLException e) {
								System.err.println(e.getMessage());
							}
							tmp_batchUpdateCount_tDBOutput_6 = tmp_batchUpdateCount_tDBOutput_6 > countSum_tDBOutput_6
									? tmp_batchUpdateCount_tDBOutput_6
									: countSum_tDBOutput_6;
							insertedCount_tDBOutput_6 += tmp_batchUpdateCount_tDBOutput_6;
						}

						tos_count_tDBOutput_6++;

						/**
						 * [tDBOutput_6 main ] stop
						 */

						/**
						 * [tDBOutput_6 process_data_begin ] start
						 */

						currentComponent = "tDBOutput_6";

						/**
						 * [tDBOutput_6 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_6 process_data_end ] start
						 */

						currentComponent = "tDBOutput_6";

						/**
						 * [tDBOutput_6 process_data_end ] stop
						 */

						/**
						 * [tDBInput_6 process_data_end ] start
						 */

						currentComponent = "tDBInput_6";

						/**
						 * [tDBInput_6 process_data_end ] stop
						 */

						/**
						 * [tDBInput_6 end ] start
						 */

						currentComponent = "tDBInput_6";

					}
				} finally {
					if (rs_tDBInput_6 != null) {
						rs_tDBInput_6.close();
					}
					if (stmt_tDBInput_6 != null) {
						stmt_tDBInput_6.close();
					}
				}
				globalMap.put("tDBInput_6_NB_LINE", nb_line_tDBInput_6);

				ok_Hash.put("tDBInput_6", true);
				end_Hash.put("tDBInput_6", System.currentTimeMillis());

				/**
				 * [tDBInput_6 end ] stop
				 */

				/**
				 * [tDBOutput_6 end ] start
				 */

				currentComponent = "tDBOutput_6";

				int[] status_tDBOutput_6 = null;
				int countSum_tDBOutput_6 = 0;
				try {
					if (pstmt_tDBOutput_6 != null && batchSizeCounter_tDBOutput_6 > 0) {
						status_tDBOutput_6 = pstmt_tDBOutput_6.executeBatch();
						for (int countEach_tDBOutput_6 : status_tDBOutput_6) {
							countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0 : countEach_tDBOutput_6);
						}
					}
				} catch (java.sql.BatchUpdateException e) {
					for (int countEach_tDBOutput_6 : e.getUpdateCounts()) {
						countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0 : countEach_tDBOutput_6);
					}
					System.err.println(e.getMessage());
				}
				if (pstmt_tDBOutput_6 != null && batchSizeCounter_tDBOutput_6 > 0) {
					try {
						tmp_batchUpdateCount_tDBOutput_6 = pstmt_tDBOutput_6.getUpdateCount();
					} catch (java.sql.SQLException e) {

					}
					tmp_batchUpdateCount_tDBOutput_6 = tmp_batchUpdateCount_tDBOutput_6 > countSum_tDBOutput_6
							? tmp_batchUpdateCount_tDBOutput_6
							: countSum_tDBOutput_6;
					insertedCount_tDBOutput_6 += tmp_batchUpdateCount_tDBOutput_6;
				}
				if (pstmt_tDBOutput_6 != null) {
					pstmt_tDBOutput_6.close();
					resourceMap.remove("pstmt_tDBOutput_6");
				}
				resourceMap.put("statementClosed_tDBOutput_6", true);

				int rejectedCount_tDBOutput_6 = 0;
				nb_line_deleted_tDBOutput_6 = nb_line_deleted_tDBOutput_6 + deletedCount_tDBOutput_6;
				nb_line_update_tDBOutput_6 = nb_line_update_tDBOutput_6 + updatedCount_tDBOutput_6;
				nb_line_inserted_tDBOutput_6 = nb_line_inserted_tDBOutput_6 + insertedCount_tDBOutput_6;
				nb_line_rejected_tDBOutput_6 = nb_line_rejected_tDBOutput_6 + rejectedCount_tDBOutput_6;

				globalMap.put("tDBOutput_6_NB_LINE", nb_line_tDBOutput_6);
				globalMap.put("tDBOutput_6_NB_LINE_UPDATED", nb_line_update_tDBOutput_6);
				globalMap.put("tDBOutput_6_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_6);
				globalMap.put("tDBOutput_6_NB_LINE_DELETED", nb_line_deleted_tDBOutput_6);
				globalMap.put("tDBOutput_6_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_6);

				ok_Hash.put("tDBOutput_6", true);
				end_Hash.put("tDBOutput_6", System.currentTimeMillis());

				/**
				 * [tDBOutput_6 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_6 finally ] start
				 */

				currentComponent = "tDBInput_6";

				/**
				 * [tDBInput_6 finally ] stop
				 */

				/**
				 * [tDBOutput_6 finally ] start
				 */

				currentComponent = "tDBOutput_6";

				if (resourceMap.get("statementClosed_tDBOutput_6") == null) {
					java.sql.PreparedStatement pstmtToClose_tDBOutput_6 = null;
					if ((pstmtToClose_tDBOutput_6 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_6")) != null) {
						pstmtToClose_tDBOutput_6.close();
					}
				}

				/**
				 * [tDBOutput_6 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_6_SUBPROCESS_STATE", 1);
	}

	public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock_VINCERE_ETL_garrison_gen_data_contact = new byte[0];
		static byte[] commonByteArray_VINCERE_ETL_garrison_gen_data_contact = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String contact_externalid;

		public String getContact_externalid() {
			return this.contact_externalid;
		}

		public String home_email;

		public String getHome_email() {
			return this.home_email;
		}

		public String second_home_email;

		public String getSecond_home_email() {
			return this.second_home_email;
		}

		public String personal_home_page;

		public String getPersonal_home_page() {
			return this.personal_home_page;
		}

		public String home_phone;

		public String getHome_phone() {
			return this.home_phone;
		}

		public String cell_phone;

		public String getCell_phone() {
			return this.cell_phone;
		}

		public String street;

		public String getStreet() {
			return this.street;
		}

		public String Street2;

		public String getStreet2() {
			return this.Street2;
		}

		public String city;

		public String getCity() {
			return this.city;
		}

		public String state;

		public String getState() {
			return this.state;
		}

		public String zip;

		public String getZip() {
			return this.zip;
		}

		public String country;

		public String getCountry() {
			return this.country;
		}

		public java.util.Date birthday;

		public java.util.Date getBirthday() {
			return this.birthday;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.contact_externalid == null) ? 0 : this.contact_externalid.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row7Struct other = (row7Struct) obj;

			if (this.contact_externalid == null) {
				if (other.contact_externalid != null)
					return false;

			} else if (!this.contact_externalid.equals(other.contact_externalid))

				return false;

			return true;
		}

		public void copyDataTo(row7Struct other) {

			other.contact_externalid = this.contact_externalid;
			other.home_email = this.home_email;
			other.second_home_email = this.second_home_email;
			other.personal_home_page = this.personal_home_page;
			other.home_phone = this.home_phone;
			other.cell_phone = this.cell_phone;
			other.street = this.street;
			other.Street2 = this.Street2;
			other.city = this.city;
			other.state = this.state;
			other.zip = this.zip;
			other.country = this.country;
			other.birthday = this.birthday;

		}

		public void copyKeysDataTo(row7Struct other) {

			other.contact_externalid = this.contact_externalid;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_VINCERE_ETL_garrison_gen_data_contact.length) {
					if (length < 1024 && commonByteArray_VINCERE_ETL_garrison_gen_data_contact.length == 0) {
						commonByteArray_VINCERE_ETL_garrison_gen_data_contact = new byte[1024];
					} else {
						commonByteArray_VINCERE_ETL_garrison_gen_data_contact = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_VINCERE_ETL_garrison_gen_data_contact, 0, length);
				strReturn = new String(commonByteArray_VINCERE_ETL_garrison_gen_data_contact, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_VINCERE_ETL_garrison_gen_data_contact) {

				try {

					int length = 0;

					this.contact_externalid = readString(dis);

					this.home_email = readString(dis);

					this.second_home_email = readString(dis);

					this.personal_home_page = readString(dis);

					this.home_phone = readString(dis);

					this.cell_phone = readString(dis);

					this.street = readString(dis);

					this.Street2 = readString(dis);

					this.city = readString(dis);

					this.state = readString(dis);

					this.zip = readString(dis);

					this.country = readString(dis);

					this.birthday = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.contact_externalid, dos);

				// String

				writeString(this.home_email, dos);

				// String

				writeString(this.second_home_email, dos);

				// String

				writeString(this.personal_home_page, dos);

				// String

				writeString(this.home_phone, dos);

				// String

				writeString(this.cell_phone, dos);

				// String

				writeString(this.street, dos);

				// String

				writeString(this.Street2, dos);

				// String

				writeString(this.city, dos);

				// String

				writeString(this.state, dos);

				// String

				writeString(this.zip, dos);

				// String

				writeString(this.country, dos);

				// java.util.Date

				writeDate(this.birthday, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("contact_externalid=" + contact_externalid);
			sb.append(",home_email=" + home_email);
			sb.append(",second_home_email=" + second_home_email);
			sb.append(",personal_home_page=" + personal_home_page);
			sb.append(",home_phone=" + home_phone);
			sb.append(",cell_phone=" + cell_phone);
			sb.append(",street=" + street);
			sb.append(",Street2=" + Street2);
			sb.append(",city=" + city);
			sb.append(",state=" + state);
			sb.append(",zip=" + zip);
			sb.append(",country=" + country);
			sb.append(",birthday=" + String.valueOf(birthday));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.contact_externalid, other.contact_externalid);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_7_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row7Struct row7 = new row7Struct();

				/**
				 * [tDBOutput_7 begin ] start
				 */

				ok_Hash.put("tDBOutput_7", false);
				start_Hash.put("tDBOutput_7", System.currentTimeMillis());

				currentComponent = "tDBOutput_7";

				int tos_count_tDBOutput_7 = 0;

				int nb_line_tDBOutput_7 = 0;
				int nb_line_update_tDBOutput_7 = 0;
				int nb_line_inserted_tDBOutput_7 = 0;
				int nb_line_deleted_tDBOutput_7 = 0;
				int nb_line_rejected_tDBOutput_7 = 0;

				int deletedCount_tDBOutput_7 = 0;
				int updatedCount_tDBOutput_7 = 0;
				int insertedCount_tDBOutput_7 = 0;

				String tableName_tDBOutput_7 = "contact_personal_info";
				boolean whetherReject_tDBOutput_7 = false;

				int batchSize_tDBOutput_7 = 10000;
				int batchSizeCounter_tDBOutput_7 = 0;
				int tmp_batchUpdateCount_tDBOutput_7 = 0;

				java.sql.Connection conn_tDBOutput_7 = null;
				conn_tDBOutput_7 = (java.sql.Connection) globalMap.get("conn_tDBConnection_2");

				java.sql.DatabaseMetaData dbMetaData_tDBOutput_7 = conn_tDBOutput_7.getMetaData();
				boolean whetherExist_tDBOutput_7 = false;
				try (java.sql.ResultSet rsTable_tDBOutput_7 = dbMetaData_tDBOutput_7.getTables(null, null, null,
						new String[] { "TABLE" })) {
					while (rsTable_tDBOutput_7.next()) {
						String table_tDBOutput_7 = rsTable_tDBOutput_7.getString("TABLE_NAME");
						if (table_tDBOutput_7.equalsIgnoreCase("contact_personal_info")) {
							whetherExist_tDBOutput_7 = true;
							break;
						}
					}
				}
				if (whetherExist_tDBOutput_7) {
					try (java.sql.Statement stmtDrop_tDBOutput_7 = conn_tDBOutput_7.createStatement()) {
						stmtDrop_tDBOutput_7.execute("DROP TABLE \"" + tableName_tDBOutput_7 + "\"");
					}
				}
				try (java.sql.Statement stmtCreate_tDBOutput_7 = conn_tDBOutput_7.createStatement()) {
					stmtCreate_tDBOutput_7.execute("CREATE TABLE \"" + tableName_tDBOutput_7
							+ "\"(\"contact_externalid\" VARCHAR(13)   not null ,\"home_email\" VARCHAR(200)  ,\"second_home_email\" VARCHAR(200)  ,\"personal_home_page\" VARCHAR(100)  ,\"home_phone\" VARCHAR(50)  ,\"cell_phone\" VARCHAR(50)  ,\"street\" VARCHAR(60)  ,\"Street2\" VARCHAR(60)  ,\"city\" VARCHAR(40)  ,\"state\" VARCHAR(15)  ,\"zip\" VARCHAR(10)  ,\"country\" VARCHAR(50)  ,\"birthday\" DATETIME ,primary key(\"contact_externalid\"))");
				}
				String insert_tDBOutput_7 = "INSERT INTO \"" + "contact_personal_info"
						+ "\" (\"contact_externalid\",\"home_email\",\"second_home_email\",\"personal_home_page\",\"home_phone\",\"cell_phone\",\"street\",\"Street2\",\"city\",\"state\",\"zip\",\"country\",\"birthday\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmt_tDBOutput_7 = conn_tDBOutput_7.prepareStatement(insert_tDBOutput_7);
				resourceMap.put("pstmt_tDBOutput_7", pstmt_tDBOutput_7);

				/**
				 * [tDBOutput_7 begin ] stop
				 */

				/**
				 * [tDBInput_7 begin ] start
				 */

				ok_Hash.put("tDBInput_7", false);
				start_Hash.put("tDBInput_7", System.currentTimeMillis());

				currentComponent = "tDBInput_7";

				int tos_count_tDBInput_7 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_7 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_7 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_7 = new String[] { "FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_7, talendToDBArray_tDBInput_7);
				int nb_line_tDBInput_7 = 0;
				java.sql.Connection conn_tDBInput_7 = null;
				conn_tDBInput_7 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");
				String dbschema_tDBInput_7 = (String) globalMap.get("dbschema_tDBConnection_1");

				java.sql.Statement stmt_tDBInput_7 = conn_tDBInput_7.createStatement();

				String dbquery_tDBInput_7 = "\n\nselect \nconcat('', p.cid) as contact_externalid\n, p.email as home_email\n, p.email2 as second_home_email\n, p.HomePage "
						+ "as personal_home_page\n, p.homephone as home_phone\n, p.CellPhone as cell_phone\n, p.street\n, p.Street2\n, p.city\n, p.state\n"
						+ ", p.zip\n, p.Locale as country\n, p.birthday\nfrom People p\nleft join MhUsers u on p.CandidRecruiter=u.username\nwhere p.Rol"
						+ "eType=1\nand p.DeleteFlag=0\n\n\n\n\n\n\n\n"

				;

				globalMap.put("tDBInput_7_QUERY", dbquery_tDBInput_7);
				java.sql.ResultSet rs_tDBInput_7 = null;

				try {
					rs_tDBInput_7 = stmt_tDBInput_7.executeQuery(dbquery_tDBInput_7);
					java.sql.ResultSetMetaData rsmd_tDBInput_7 = rs_tDBInput_7.getMetaData();
					int colQtyInRs_tDBInput_7 = rsmd_tDBInput_7.getColumnCount();

					String tmpContent_tDBInput_7 = null;

					while (rs_tDBInput_7.next()) {
						nb_line_tDBInput_7++;

						if (colQtyInRs_tDBInput_7 < 1) {
							row7.contact_externalid = null;
						} else {

							tmpContent_tDBInput_7 = rs_tDBInput_7.getString(1);
							if (tmpContent_tDBInput_7 != null) {
								if (talendToDBList_tDBInput_7.contains(
										rsmd_tDBInput_7.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
									row7.contact_externalid = FormatterUtils.formatUnwithE(tmpContent_tDBInput_7);
								} else {
									row7.contact_externalid = tmpContent_tDBInput_7;
								}
							} else {
								row7.contact_externalid = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 2) {
							row7.home_email = null;
						} else {

							tmpContent_tDBInput_7 = rs_tDBInput_7.getString(2);
							if (tmpContent_tDBInput_7 != null) {
								if (talendToDBList_tDBInput_7.contains(
										rsmd_tDBInput_7.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
									row7.home_email = FormatterUtils.formatUnwithE(tmpContent_tDBInput_7);
								} else {
									row7.home_email = tmpContent_tDBInput_7;
								}
							} else {
								row7.home_email = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 3) {
							row7.second_home_email = null;
						} else {

							tmpContent_tDBInput_7 = rs_tDBInput_7.getString(3);
							if (tmpContent_tDBInput_7 != null) {
								if (talendToDBList_tDBInput_7.contains(
										rsmd_tDBInput_7.getColumnTypeName(3).toUpperCase(java.util.Locale.ENGLISH))) {
									row7.second_home_email = FormatterUtils.formatUnwithE(tmpContent_tDBInput_7);
								} else {
									row7.second_home_email = tmpContent_tDBInput_7;
								}
							} else {
								row7.second_home_email = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 4) {
							row7.personal_home_page = null;
						} else {

							tmpContent_tDBInput_7 = rs_tDBInput_7.getString(4);
							if (tmpContent_tDBInput_7 != null) {
								if (talendToDBList_tDBInput_7.contains(
										rsmd_tDBInput_7.getColumnTypeName(4).toUpperCase(java.util.Locale.ENGLISH))) {
									row7.personal_home_page = FormatterUtils.formatUnwithE(tmpContent_tDBInput_7);
								} else {
									row7.personal_home_page = tmpContent_tDBInput_7;
								}
							} else {
								row7.personal_home_page = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 5) {
							row7.home_phone = null;
						} else {

							tmpContent_tDBInput_7 = rs_tDBInput_7.getString(5);
							if (tmpContent_tDBInput_7 != null) {
								if (talendToDBList_tDBInput_7.contains(
										rsmd_tDBInput_7.getColumnTypeName(5).toUpperCase(java.util.Locale.ENGLISH))) {
									row7.home_phone = FormatterUtils.formatUnwithE(tmpContent_tDBInput_7);
								} else {
									row7.home_phone = tmpContent_tDBInput_7;
								}
							} else {
								row7.home_phone = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 6) {
							row7.cell_phone = null;
						} else {

							tmpContent_tDBInput_7 = rs_tDBInput_7.getString(6);
							if (tmpContent_tDBInput_7 != null) {
								if (talendToDBList_tDBInput_7.contains(
										rsmd_tDBInput_7.getColumnTypeName(6).toUpperCase(java.util.Locale.ENGLISH))) {
									row7.cell_phone = FormatterUtils.formatUnwithE(tmpContent_tDBInput_7);
								} else {
									row7.cell_phone = tmpContent_tDBInput_7;
								}
							} else {
								row7.cell_phone = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 7) {
							row7.street = null;
						} else {

							tmpContent_tDBInput_7 = rs_tDBInput_7.getString(7);
							if (tmpContent_tDBInput_7 != null) {
								if (talendToDBList_tDBInput_7.contains(
										rsmd_tDBInput_7.getColumnTypeName(7).toUpperCase(java.util.Locale.ENGLISH))) {
									row7.street = FormatterUtils.formatUnwithE(tmpContent_tDBInput_7);
								} else {
									row7.street = tmpContent_tDBInput_7;
								}
							} else {
								row7.street = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 8) {
							row7.Street2 = null;
						} else {

							tmpContent_tDBInput_7 = rs_tDBInput_7.getString(8);
							if (tmpContent_tDBInput_7 != null) {
								if (talendToDBList_tDBInput_7.contains(
										rsmd_tDBInput_7.getColumnTypeName(8).toUpperCase(java.util.Locale.ENGLISH))) {
									row7.Street2 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_7);
								} else {
									row7.Street2 = tmpContent_tDBInput_7;
								}
							} else {
								row7.Street2 = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 9) {
							row7.city = null;
						} else {

							tmpContent_tDBInput_7 = rs_tDBInput_7.getString(9);
							if (tmpContent_tDBInput_7 != null) {
								if (talendToDBList_tDBInput_7.contains(
										rsmd_tDBInput_7.getColumnTypeName(9).toUpperCase(java.util.Locale.ENGLISH))) {
									row7.city = FormatterUtils.formatUnwithE(tmpContent_tDBInput_7);
								} else {
									row7.city = tmpContent_tDBInput_7;
								}
							} else {
								row7.city = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 10) {
							row7.state = null;
						} else {

							tmpContent_tDBInput_7 = rs_tDBInput_7.getString(10);
							if (tmpContent_tDBInput_7 != null) {
								if (talendToDBList_tDBInput_7.contains(
										rsmd_tDBInput_7.getColumnTypeName(10).toUpperCase(java.util.Locale.ENGLISH))) {
									row7.state = FormatterUtils.formatUnwithE(tmpContent_tDBInput_7);
								} else {
									row7.state = tmpContent_tDBInput_7;
								}
							} else {
								row7.state = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 11) {
							row7.zip = null;
						} else {

							tmpContent_tDBInput_7 = rs_tDBInput_7.getString(11);
							if (tmpContent_tDBInput_7 != null) {
								if (talendToDBList_tDBInput_7.contains(
										rsmd_tDBInput_7.getColumnTypeName(11).toUpperCase(java.util.Locale.ENGLISH))) {
									row7.zip = FormatterUtils.formatUnwithE(tmpContent_tDBInput_7);
								} else {
									row7.zip = tmpContent_tDBInput_7;
								}
							} else {
								row7.zip = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 12) {
							row7.country = null;
						} else {

							tmpContent_tDBInput_7 = rs_tDBInput_7.getString(12);
							if (tmpContent_tDBInput_7 != null) {
								if (talendToDBList_tDBInput_7.contains(
										rsmd_tDBInput_7.getColumnTypeName(12).toUpperCase(java.util.Locale.ENGLISH))) {
									row7.country = FormatterUtils.formatUnwithE(tmpContent_tDBInput_7);
								} else {
									row7.country = tmpContent_tDBInput_7;
								}
							} else {
								row7.country = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 13) {
							row7.birthday = null;
						} else {

							row7.birthday = mssqlGTU_tDBInput_7.getDate(rsmd_tDBInput_7, rs_tDBInput_7, 13);

						}

						/**
						 * [tDBInput_7 begin ] stop
						 */

						/**
						 * [tDBInput_7 main ] start
						 */

						currentComponent = "tDBInput_7";

						tos_count_tDBInput_7++;

						/**
						 * [tDBInput_7 main ] stop
						 */

						/**
						 * [tDBInput_7 process_data_begin ] start
						 */

						currentComponent = "tDBInput_7";

						/**
						 * [tDBInput_7 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_7 main ] start
						 */

						currentComponent = "tDBOutput_7";

						whetherReject_tDBOutput_7 = false;
						if (row7.contact_externalid == null) {
							pstmt_tDBOutput_7.setNull(1, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_7.setString(1, row7.contact_externalid);
						}

						if (row7.home_email == null) {
							pstmt_tDBOutput_7.setNull(2, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_7.setString(2, row7.home_email);
						}

						if (row7.second_home_email == null) {
							pstmt_tDBOutput_7.setNull(3, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_7.setString(3, row7.second_home_email);
						}

						if (row7.personal_home_page == null) {
							pstmt_tDBOutput_7.setNull(4, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_7.setString(4, row7.personal_home_page);
						}

						if (row7.home_phone == null) {
							pstmt_tDBOutput_7.setNull(5, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_7.setString(5, row7.home_phone);
						}

						if (row7.cell_phone == null) {
							pstmt_tDBOutput_7.setNull(6, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_7.setString(6, row7.cell_phone);
						}

						if (row7.street == null) {
							pstmt_tDBOutput_7.setNull(7, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_7.setString(7, row7.street);
						}

						if (row7.Street2 == null) {
							pstmt_tDBOutput_7.setNull(8, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_7.setString(8, row7.Street2);
						}

						if (row7.city == null) {
							pstmt_tDBOutput_7.setNull(9, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_7.setString(9, row7.city);
						}

						if (row7.state == null) {
							pstmt_tDBOutput_7.setNull(10, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_7.setString(10, row7.state);
						}

						if (row7.zip == null) {
							pstmt_tDBOutput_7.setNull(11, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_7.setString(11, row7.zip);
						}

						if (row7.country == null) {
							pstmt_tDBOutput_7.setNull(12, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_7.setString(12, row7.country);
						}

						if (row7.birthday != null) {
							pstmt_tDBOutput_7.setTimestamp(13, new java.sql.Timestamp(row7.birthday.getTime()));
						} else {
							pstmt_tDBOutput_7.setNull(13, java.sql.Types.TIMESTAMP);
						}

						pstmt_tDBOutput_7.addBatch();
						batchSizeCounter_tDBOutput_7++;
						nb_line_tDBOutput_7++;
						if ((batchSize_tDBOutput_7 > 0) && (batchSize_tDBOutput_7 <= batchSizeCounter_tDBOutput_7)) {
							int[] status_tDBOutput_7 = null;
							int countSum_tDBOutput_7 = 0;
							try {
								batchSizeCounter_tDBOutput_7 = 0;
								status_tDBOutput_7 = pstmt_tDBOutput_7.executeBatch();
								for (int countEach_tDBOutput_7 : status_tDBOutput_7) {
									countSum_tDBOutput_7 += (countEach_tDBOutput_7 < 0 ? 0 : countEach_tDBOutput_7);
								}
							} catch (java.sql.BatchUpdateException e) {
								for (int countEach_tDBOutput_7 : e.getUpdateCounts()) {
									countSum_tDBOutput_7 += (countEach_tDBOutput_7 < 0 ? 0 : countEach_tDBOutput_7);
								}
								System.err.println(e.getMessage());
							}
							try {
								tmp_batchUpdateCount_tDBOutput_7 = pstmt_tDBOutput_7.getUpdateCount();
							} catch (java.sql.SQLException e) {
								System.err.println(e.getMessage());
							}
							tmp_batchUpdateCount_tDBOutput_7 = tmp_batchUpdateCount_tDBOutput_7 > countSum_tDBOutput_7
									? tmp_batchUpdateCount_tDBOutput_7
									: countSum_tDBOutput_7;
							insertedCount_tDBOutput_7 += tmp_batchUpdateCount_tDBOutput_7;
						}

						tos_count_tDBOutput_7++;

						/**
						 * [tDBOutput_7 main ] stop
						 */

						/**
						 * [tDBOutput_7 process_data_begin ] start
						 */

						currentComponent = "tDBOutput_7";

						/**
						 * [tDBOutput_7 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_7 process_data_end ] start
						 */

						currentComponent = "tDBOutput_7";

						/**
						 * [tDBOutput_7 process_data_end ] stop
						 */

						/**
						 * [tDBInput_7 process_data_end ] start
						 */

						currentComponent = "tDBInput_7";

						/**
						 * [tDBInput_7 process_data_end ] stop
						 */

						/**
						 * [tDBInput_7 end ] start
						 */

						currentComponent = "tDBInput_7";

					}
				} finally {
					if (rs_tDBInput_7 != null) {
						rs_tDBInput_7.close();
					}
					if (stmt_tDBInput_7 != null) {
						stmt_tDBInput_7.close();
					}
				}
				globalMap.put("tDBInput_7_NB_LINE", nb_line_tDBInput_7);

				ok_Hash.put("tDBInput_7", true);
				end_Hash.put("tDBInput_7", System.currentTimeMillis());

				/**
				 * [tDBInput_7 end ] stop
				 */

				/**
				 * [tDBOutput_7 end ] start
				 */

				currentComponent = "tDBOutput_7";

				int[] status_tDBOutput_7 = null;
				int countSum_tDBOutput_7 = 0;
				try {
					if (pstmt_tDBOutput_7 != null && batchSizeCounter_tDBOutput_7 > 0) {
						status_tDBOutput_7 = pstmt_tDBOutput_7.executeBatch();
						for (int countEach_tDBOutput_7 : status_tDBOutput_7) {
							countSum_tDBOutput_7 += (countEach_tDBOutput_7 < 0 ? 0 : countEach_tDBOutput_7);
						}
					}
				} catch (java.sql.BatchUpdateException e) {
					for (int countEach_tDBOutput_7 : e.getUpdateCounts()) {
						countSum_tDBOutput_7 += (countEach_tDBOutput_7 < 0 ? 0 : countEach_tDBOutput_7);
					}
					System.err.println(e.getMessage());
				}
				if (pstmt_tDBOutput_7 != null && batchSizeCounter_tDBOutput_7 > 0) {
					try {
						tmp_batchUpdateCount_tDBOutput_7 = pstmt_tDBOutput_7.getUpdateCount();
					} catch (java.sql.SQLException e) {

					}
					tmp_batchUpdateCount_tDBOutput_7 = tmp_batchUpdateCount_tDBOutput_7 > countSum_tDBOutput_7
							? tmp_batchUpdateCount_tDBOutput_7
							: countSum_tDBOutput_7;
					insertedCount_tDBOutput_7 += tmp_batchUpdateCount_tDBOutput_7;
				}
				if (pstmt_tDBOutput_7 != null) {
					pstmt_tDBOutput_7.close();
					resourceMap.remove("pstmt_tDBOutput_7");
				}
				resourceMap.put("statementClosed_tDBOutput_7", true);

				int rejectedCount_tDBOutput_7 = 0;
				nb_line_deleted_tDBOutput_7 = nb_line_deleted_tDBOutput_7 + deletedCount_tDBOutput_7;
				nb_line_update_tDBOutput_7 = nb_line_update_tDBOutput_7 + updatedCount_tDBOutput_7;
				nb_line_inserted_tDBOutput_7 = nb_line_inserted_tDBOutput_7 + insertedCount_tDBOutput_7;
				nb_line_rejected_tDBOutput_7 = nb_line_rejected_tDBOutput_7 + rejectedCount_tDBOutput_7;

				globalMap.put("tDBOutput_7_NB_LINE", nb_line_tDBOutput_7);
				globalMap.put("tDBOutput_7_NB_LINE_UPDATED", nb_line_update_tDBOutput_7);
				globalMap.put("tDBOutput_7_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_7);
				globalMap.put("tDBOutput_7_NB_LINE_DELETED", nb_line_deleted_tDBOutput_7);
				globalMap.put("tDBOutput_7_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_7);

				ok_Hash.put("tDBOutput_7", true);
				end_Hash.put("tDBOutput_7", System.currentTimeMillis());

				/**
				 * [tDBOutput_7 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_7 finally ] start
				 */

				currentComponent = "tDBInput_7";

				/**
				 * [tDBInput_7 finally ] stop
				 */

				/**
				 * [tDBOutput_7 finally ] start
				 */

				currentComponent = "tDBOutput_7";

				if (resourceMap.get("statementClosed_tDBOutput_7") == null) {
					java.sql.PreparedStatement pstmtToClose_tDBOutput_7 = null;
					if ((pstmtToClose_tDBOutput_7 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_7")) != null) {
						pstmtToClose_tDBOutput_7.close();
					}
				}

				/**
				 * [tDBOutput_7 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_7_SUBPROCESS_STATE", 1);
	}

	public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
		final static byte[] commonByteArrayLock_VINCERE_ETL_garrison_gen_data_contact = new byte[0];
		static byte[] commonByteArray_VINCERE_ETL_garrison_gen_data_contact = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String contact_externalid;

		public String getContact_externalid() {
			return this.contact_externalid;
		}

		public String DegreeType1;

		public String getDegreeType1() {
			return this.DegreeType1;
		}

		public String DegreeType2;

		public String getDegreeType2() {
			return this.DegreeType2;
		}

		public String DegreeType3;

		public String getDegreeType3() {
			return this.DegreeType3;
		}

		public String DegreeType4;

		public String getDegreeType4() {
			return this.DegreeType4;
		}

		public String DegreeType5;

		public String getDegreeType5() {
			return this.DegreeType5;
		}

		public String DegreeType6;

		public String getDegreeType6() {
			return this.DegreeType6;
		}

		public String school;

		public String getSchool() {
			return this.school;
		}

		public String Education4;

		public String getEducation4() {
			return this.Education4;
		}

		public String Education5;

		public String getEducation5() {
			return this.Education5;
		}

		public String Education6;

		public String getEducation6() {
			return this.Education6;
		}

		public String EducationDeg4;

		public String getEducationDeg4() {
			return this.EducationDeg4;
		}

		public String EducationDeg5;

		public String getEducationDeg5() {
			return this.EducationDeg5;
		}

		public String EducationDeg6;

		public String getEducationDeg6() {
			return this.EducationDeg6;
		}

		public String EducationHonors1;

		public String getEducationHonors1() {
			return this.EducationHonors1;
		}

		public String EducationHonors2;

		public String getEducationHonors2() {
			return this.EducationHonors2;
		}

		public String EducationHonors3;

		public String getEducationHonors3() {
			return this.EducationHonors3;
		}

		public String EducationHonors4;

		public String getEducationHonors4() {
			return this.EducationHonors4;
		}

		public String EducationHonors5;

		public String getEducationHonors5() {
			return this.EducationHonors5;
		}

		public String EducationHonors6;

		public String getEducationHonors6() {
			return this.EducationHonors6;
		}

		public Short EducationYear4;

		public Short getEducationYear4() {
			return this.EducationYear4;
		}

		public Short EducationYear5;

		public Short getEducationYear5() {
			return this.EducationYear5;
		}

		public Short EducationYear6;

		public Short getEducationYear6() {
			return this.EducationYear6;
		}

		public Short bsyear;

		public Short getBsyear() {
			return this.bsyear;
		}

		public String NotesSchool;

		public String getNotesSchool() {
			return this.NotesSchool;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.contact_externalid == null) ? 0 : this.contact_externalid.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row8Struct other = (row8Struct) obj;

			if (this.contact_externalid == null) {
				if (other.contact_externalid != null)
					return false;

			} else if (!this.contact_externalid.equals(other.contact_externalid))

				return false;

			return true;
		}

		public void copyDataTo(row8Struct other) {

			other.contact_externalid = this.contact_externalid;
			other.DegreeType1 = this.DegreeType1;
			other.DegreeType2 = this.DegreeType2;
			other.DegreeType3 = this.DegreeType3;
			other.DegreeType4 = this.DegreeType4;
			other.DegreeType5 = this.DegreeType5;
			other.DegreeType6 = this.DegreeType6;
			other.school = this.school;
			other.Education4 = this.Education4;
			other.Education5 = this.Education5;
			other.Education6 = this.Education6;
			other.EducationDeg4 = this.EducationDeg4;
			other.EducationDeg5 = this.EducationDeg5;
			other.EducationDeg6 = this.EducationDeg6;
			other.EducationHonors1 = this.EducationHonors1;
			other.EducationHonors2 = this.EducationHonors2;
			other.EducationHonors3 = this.EducationHonors3;
			other.EducationHonors4 = this.EducationHonors4;
			other.EducationHonors5 = this.EducationHonors5;
			other.EducationHonors6 = this.EducationHonors6;
			other.EducationYear4 = this.EducationYear4;
			other.EducationYear5 = this.EducationYear5;
			other.EducationYear6 = this.EducationYear6;
			other.bsyear = this.bsyear;
			other.NotesSchool = this.NotesSchool;

		}

		public void copyKeysDataTo(row8Struct other) {

			other.contact_externalid = this.contact_externalid;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_VINCERE_ETL_garrison_gen_data_contact.length) {
					if (length < 1024 && commonByteArray_VINCERE_ETL_garrison_gen_data_contact.length == 0) {
						commonByteArray_VINCERE_ETL_garrison_gen_data_contact = new byte[1024];
					} else {
						commonByteArray_VINCERE_ETL_garrison_gen_data_contact = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_VINCERE_ETL_garrison_gen_data_contact, 0, length);
				strReturn = new String(commonByteArray_VINCERE_ETL_garrison_gen_data_contact, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_VINCERE_ETL_garrison_gen_data_contact) {

				try {

					int length = 0;

					this.contact_externalid = readString(dis);

					this.DegreeType1 = readString(dis);

					this.DegreeType2 = readString(dis);

					this.DegreeType3 = readString(dis);

					this.DegreeType4 = readString(dis);

					this.DegreeType5 = readString(dis);

					this.DegreeType6 = readString(dis);

					this.school = readString(dis);

					this.Education4 = readString(dis);

					this.Education5 = readString(dis);

					this.Education6 = readString(dis);

					this.EducationDeg4 = readString(dis);

					this.EducationDeg5 = readString(dis);

					this.EducationDeg6 = readString(dis);

					this.EducationHonors1 = readString(dis);

					this.EducationHonors2 = readString(dis);

					this.EducationHonors3 = readString(dis);

					this.EducationHonors4 = readString(dis);

					this.EducationHonors5 = readString(dis);

					this.EducationHonors6 = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.EducationYear4 = null;
					} else {
						this.EducationYear4 = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.EducationYear5 = null;
					} else {
						this.EducationYear5 = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.EducationYear6 = null;
					} else {
						this.EducationYear6 = dis.readShort();
					}

					length = dis.readByte();
					if (length == -1) {
						this.bsyear = null;
					} else {
						this.bsyear = dis.readShort();
					}

					this.NotesSchool = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.contact_externalid, dos);

				// String

				writeString(this.DegreeType1, dos);

				// String

				writeString(this.DegreeType2, dos);

				// String

				writeString(this.DegreeType3, dos);

				// String

				writeString(this.DegreeType4, dos);

				// String

				writeString(this.DegreeType5, dos);

				// String

				writeString(this.DegreeType6, dos);

				// String

				writeString(this.school, dos);

				// String

				writeString(this.Education4, dos);

				// String

				writeString(this.Education5, dos);

				// String

				writeString(this.Education6, dos);

				// String

				writeString(this.EducationDeg4, dos);

				// String

				writeString(this.EducationDeg5, dos);

				// String

				writeString(this.EducationDeg6, dos);

				// String

				writeString(this.EducationHonors1, dos);

				// String

				writeString(this.EducationHonors2, dos);

				// String

				writeString(this.EducationHonors3, dos);

				// String

				writeString(this.EducationHonors4, dos);

				// String

				writeString(this.EducationHonors5, dos);

				// String

				writeString(this.EducationHonors6, dos);

				// Short

				if (this.EducationYear4 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.EducationYear4);
				}

				// Short

				if (this.EducationYear5 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.EducationYear5);
				}

				// Short

				if (this.EducationYear6 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.EducationYear6);
				}

				// Short

				if (this.bsyear == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.bsyear);
				}

				// String

				writeString(this.NotesSchool, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("contact_externalid=" + contact_externalid);
			sb.append(",DegreeType1=" + DegreeType1);
			sb.append(",DegreeType2=" + DegreeType2);
			sb.append(",DegreeType3=" + DegreeType3);
			sb.append(",DegreeType4=" + DegreeType4);
			sb.append(",DegreeType5=" + DegreeType5);
			sb.append(",DegreeType6=" + DegreeType6);
			sb.append(",school=" + school);
			sb.append(",Education4=" + Education4);
			sb.append(",Education5=" + Education5);
			sb.append(",Education6=" + Education6);
			sb.append(",EducationDeg4=" + EducationDeg4);
			sb.append(",EducationDeg5=" + EducationDeg5);
			sb.append(",EducationDeg6=" + EducationDeg6);
			sb.append(",EducationHonors1=" + EducationHonors1);
			sb.append(",EducationHonors2=" + EducationHonors2);
			sb.append(",EducationHonors3=" + EducationHonors3);
			sb.append(",EducationHonors4=" + EducationHonors4);
			sb.append(",EducationHonors5=" + EducationHonors5);
			sb.append(",EducationHonors6=" + EducationHonors6);
			sb.append(",EducationYear4=" + String.valueOf(EducationYear4));
			sb.append(",EducationYear5=" + String.valueOf(EducationYear5));
			sb.append(",EducationYear6=" + String.valueOf(EducationYear6));
			sb.append(",bsyear=" + String.valueOf(bsyear));
			sb.append(",NotesSchool=" + NotesSchool);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row8Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.contact_externalid, other.contact_externalid);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_8_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row8Struct row8 = new row8Struct();

				/**
				 * [tDBOutput_8 begin ] start
				 */

				ok_Hash.put("tDBOutput_8", false);
				start_Hash.put("tDBOutput_8", System.currentTimeMillis());

				currentComponent = "tDBOutput_8";

				int tos_count_tDBOutput_8 = 0;

				int nb_line_tDBOutput_8 = 0;
				int nb_line_update_tDBOutput_8 = 0;
				int nb_line_inserted_tDBOutput_8 = 0;
				int nb_line_deleted_tDBOutput_8 = 0;
				int nb_line_rejected_tDBOutput_8 = 0;

				int deletedCount_tDBOutput_8 = 0;
				int updatedCount_tDBOutput_8 = 0;
				int insertedCount_tDBOutput_8 = 0;

				String tableName_tDBOutput_8 = "contact_education";
				boolean whetherReject_tDBOutput_8 = false;

				int batchSize_tDBOutput_8 = 10000;
				int batchSizeCounter_tDBOutput_8 = 0;
				int tmp_batchUpdateCount_tDBOutput_8 = 0;

				java.sql.Connection conn_tDBOutput_8 = null;
				conn_tDBOutput_8 = (java.sql.Connection) globalMap.get("conn_tDBConnection_2");

				java.sql.DatabaseMetaData dbMetaData_tDBOutput_8 = conn_tDBOutput_8.getMetaData();
				boolean whetherExist_tDBOutput_8 = false;
				try (java.sql.ResultSet rsTable_tDBOutput_8 = dbMetaData_tDBOutput_8.getTables(null, null, null,
						new String[] { "TABLE" })) {
					while (rsTable_tDBOutput_8.next()) {
						String table_tDBOutput_8 = rsTable_tDBOutput_8.getString("TABLE_NAME");
						if (table_tDBOutput_8.equalsIgnoreCase("contact_education")) {
							whetherExist_tDBOutput_8 = true;
							break;
						}
					}
				}
				if (whetherExist_tDBOutput_8) {
					try (java.sql.Statement stmtDrop_tDBOutput_8 = conn_tDBOutput_8.createStatement()) {
						stmtDrop_tDBOutput_8.execute("DROP TABLE \"" + tableName_tDBOutput_8 + "\"");
					}
				}
				try (java.sql.Statement stmtCreate_tDBOutput_8 = conn_tDBOutput_8.createStatement()) {
					stmtCreate_tDBOutput_8.execute("CREATE TABLE \"" + tableName_tDBOutput_8
							+ "\"(\"contact_externalid\" VARCHAR(13)   not null ,\"DegreeType1\" VARCHAR(25)  ,\"DegreeType2\" VARCHAR(25)  ,\"DegreeType3\" VARCHAR(25)  ,\"DegreeType4\" VARCHAR(25)  ,\"DegreeType5\" VARCHAR(25)  ,\"DegreeType6\" VARCHAR(25)  ,\"school\" VARCHAR(40)  ,\"Education4\" VARCHAR(40)  ,\"Education5\" VARCHAR(40)  ,\"Education6\" VARCHAR(40)  ,\"EducationDeg4\" VARCHAR(40)  ,\"EducationDeg5\" VARCHAR(40)  ,\"EducationDeg6\" VARCHAR(40)  ,\"EducationHonors1\" VARCHAR(40)  ,\"EducationHonors2\" VARCHAR(40)  ,\"EducationHonors3\" VARCHAR(40)  ,\"EducationHonors4\" VARCHAR(40)  ,\"EducationHonors5\" VARCHAR(40)  ,\"EducationHonors6\" VARCHAR(40)  ,\"EducationYear4\" SMALLINT ,\"EducationYear5\" SMALLINT ,\"EducationYear6\" SMALLINT ,\"bsyear\" SMALLINT ,\"NotesSchool\" VARCHAR(1073741823)  ,primary key(\"contact_externalid\"))");
				}
				String insert_tDBOutput_8 = "INSERT INTO \"" + "contact_education"
						+ "\" (\"contact_externalid\",\"DegreeType1\",\"DegreeType2\",\"DegreeType3\",\"DegreeType4\",\"DegreeType5\",\"DegreeType6\",\"school\",\"Education4\",\"Education5\",\"Education6\",\"EducationDeg4\",\"EducationDeg5\",\"EducationDeg6\",\"EducationHonors1\",\"EducationHonors2\",\"EducationHonors3\",\"EducationHonors4\",\"EducationHonors5\",\"EducationHonors6\",\"EducationYear4\",\"EducationYear5\",\"EducationYear6\",\"bsyear\",\"NotesSchool\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmt_tDBOutput_8 = conn_tDBOutput_8.prepareStatement(insert_tDBOutput_8);
				resourceMap.put("pstmt_tDBOutput_8", pstmt_tDBOutput_8);

				/**
				 * [tDBOutput_8 begin ] stop
				 */

				/**
				 * [tDBInput_8 begin ] start
				 */

				ok_Hash.put("tDBInput_8", false);
				start_Hash.put("tDBInput_8", System.currentTimeMillis());

				currentComponent = "tDBInput_8";

				int tos_count_tDBInput_8 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_8 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_8 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_8 = new String[] { "FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_8, talendToDBArray_tDBInput_8);
				int nb_line_tDBInput_8 = 0;
				java.sql.Connection conn_tDBInput_8 = null;
				conn_tDBInput_8 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");
				String dbschema_tDBInput_8 = (String) globalMap.get("dbschema_tDBConnection_1");

				java.sql.Statement stmt_tDBInput_8 = conn_tDBInput_8.createStatement();

				String dbquery_tDBInput_8 = "\n\n\n\n\nselect \nconcat('', p.cid) as contact_externalid\n, p.DegreeType1\n, p.DegreeType2\n, p.DegreeType3\n, p.DegreeType4\n, "
						+ "p.DegreeType5\n, p.DegreeType6\n, p.bs as school\n, p.Education4\n, p.Education5\n, p.Education6\n, p.EducationDeg4\n, p.Educat"
						+ "ionDeg5\n, p.EducationDeg6\n, p.EducationHonors1\n, p.EducationHonors2\n, p.EducationHonors3\n, p.EducationHonors4\n, p.Educat"
						+ "ionHonors5\n, p.EducationHonors6\n, p.EducationYear4\n, p.EducationYear5\n, p.EducationYear6\n, p.bsyear\n, p.NotesSchool\nfrom"
						+ " People p\nleft join MhUsers u on p.CandidRecruiter=u.username\nwhere p.RoleType=1\nand p.DeleteFlag=0\n\n\n\n\n"

				;

				globalMap.put("tDBInput_8_QUERY", dbquery_tDBInput_8);
				java.sql.ResultSet rs_tDBInput_8 = null;

				try {
					rs_tDBInput_8 = stmt_tDBInput_8.executeQuery(dbquery_tDBInput_8);
					java.sql.ResultSetMetaData rsmd_tDBInput_8 = rs_tDBInput_8.getMetaData();
					int colQtyInRs_tDBInput_8 = rsmd_tDBInput_8.getColumnCount();

					String tmpContent_tDBInput_8 = null;

					while (rs_tDBInput_8.next()) {
						nb_line_tDBInput_8++;

						if (colQtyInRs_tDBInput_8 < 1) {
							row8.contact_externalid = null;
						} else {

							tmpContent_tDBInput_8 = rs_tDBInput_8.getString(1);
							if (tmpContent_tDBInput_8 != null) {
								if (talendToDBList_tDBInput_8.contains(
										rsmd_tDBInput_8.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
									row8.contact_externalid = FormatterUtils.formatUnwithE(tmpContent_tDBInput_8);
								} else {
									row8.contact_externalid = tmpContent_tDBInput_8;
								}
							} else {
								row8.contact_externalid = null;
							}
						}
						if (colQtyInRs_tDBInput_8 < 2) {
							row8.DegreeType1 = null;
						} else {

							tmpContent_tDBInput_8 = rs_tDBInput_8.getString(2);
							if (tmpContent_tDBInput_8 != null) {
								if (talendToDBList_tDBInput_8.contains(
										rsmd_tDBInput_8.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
									row8.DegreeType1 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_8);
								} else {
									row8.DegreeType1 = tmpContent_tDBInput_8;
								}
							} else {
								row8.DegreeType1 = null;
							}
						}
						if (colQtyInRs_tDBInput_8 < 3) {
							row8.DegreeType2 = null;
						} else {

							tmpContent_tDBInput_8 = rs_tDBInput_8.getString(3);
							if (tmpContent_tDBInput_8 != null) {
								if (talendToDBList_tDBInput_8.contains(
										rsmd_tDBInput_8.getColumnTypeName(3).toUpperCase(java.util.Locale.ENGLISH))) {
									row8.DegreeType2 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_8);
								} else {
									row8.DegreeType2 = tmpContent_tDBInput_8;
								}
							} else {
								row8.DegreeType2 = null;
							}
						}
						if (colQtyInRs_tDBInput_8 < 4) {
							row8.DegreeType3 = null;
						} else {

							tmpContent_tDBInput_8 = rs_tDBInput_8.getString(4);
							if (tmpContent_tDBInput_8 != null) {
								if (talendToDBList_tDBInput_8.contains(
										rsmd_tDBInput_8.getColumnTypeName(4).toUpperCase(java.util.Locale.ENGLISH))) {
									row8.DegreeType3 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_8);
								} else {
									row8.DegreeType3 = tmpContent_tDBInput_8;
								}
							} else {
								row8.DegreeType3 = null;
							}
						}
						if (colQtyInRs_tDBInput_8 < 5) {
							row8.DegreeType4 = null;
						} else {

							tmpContent_tDBInput_8 = rs_tDBInput_8.getString(5);
							if (tmpContent_tDBInput_8 != null) {
								if (talendToDBList_tDBInput_8.contains(
										rsmd_tDBInput_8.getColumnTypeName(5).toUpperCase(java.util.Locale.ENGLISH))) {
									row8.DegreeType4 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_8);
								} else {
									row8.DegreeType4 = tmpContent_tDBInput_8;
								}
							} else {
								row8.DegreeType4 = null;
							}
						}
						if (colQtyInRs_tDBInput_8 < 6) {
							row8.DegreeType5 = null;
						} else {

							tmpContent_tDBInput_8 = rs_tDBInput_8.getString(6);
							if (tmpContent_tDBInput_8 != null) {
								if (talendToDBList_tDBInput_8.contains(
										rsmd_tDBInput_8.getColumnTypeName(6).toUpperCase(java.util.Locale.ENGLISH))) {
									row8.DegreeType5 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_8);
								} else {
									row8.DegreeType5 = tmpContent_tDBInput_8;
								}
							} else {
								row8.DegreeType5 = null;
							}
						}
						if (colQtyInRs_tDBInput_8 < 7) {
							row8.DegreeType6 = null;
						} else {

							tmpContent_tDBInput_8 = rs_tDBInput_8.getString(7);
							if (tmpContent_tDBInput_8 != null) {
								if (talendToDBList_tDBInput_8.contains(
										rsmd_tDBInput_8.getColumnTypeName(7).toUpperCase(java.util.Locale.ENGLISH))) {
									row8.DegreeType6 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_8);
								} else {
									row8.DegreeType6 = tmpContent_tDBInput_8;
								}
							} else {
								row8.DegreeType6 = null;
							}
						}
						if (colQtyInRs_tDBInput_8 < 8) {
							row8.school = null;
						} else {

							tmpContent_tDBInput_8 = rs_tDBInput_8.getString(8);
							if (tmpContent_tDBInput_8 != null) {
								if (talendToDBList_tDBInput_8.contains(
										rsmd_tDBInput_8.getColumnTypeName(8).toUpperCase(java.util.Locale.ENGLISH))) {
									row8.school = FormatterUtils.formatUnwithE(tmpContent_tDBInput_8);
								} else {
									row8.school = tmpContent_tDBInput_8;
								}
							} else {
								row8.school = null;
							}
						}
						if (colQtyInRs_tDBInput_8 < 9) {
							row8.Education4 = null;
						} else {

							tmpContent_tDBInput_8 = rs_tDBInput_8.getString(9);
							if (tmpContent_tDBInput_8 != null) {
								if (talendToDBList_tDBInput_8.contains(
										rsmd_tDBInput_8.getColumnTypeName(9).toUpperCase(java.util.Locale.ENGLISH))) {
									row8.Education4 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_8);
								} else {
									row8.Education4 = tmpContent_tDBInput_8;
								}
							} else {
								row8.Education4 = null;
							}
						}
						if (colQtyInRs_tDBInput_8 < 10) {
							row8.Education5 = null;
						} else {

							tmpContent_tDBInput_8 = rs_tDBInput_8.getString(10);
							if (tmpContent_tDBInput_8 != null) {
								if (talendToDBList_tDBInput_8.contains(
										rsmd_tDBInput_8.getColumnTypeName(10).toUpperCase(java.util.Locale.ENGLISH))) {
									row8.Education5 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_8);
								} else {
									row8.Education5 = tmpContent_tDBInput_8;
								}
							} else {
								row8.Education5 = null;
							}
						}
						if (colQtyInRs_tDBInput_8 < 11) {
							row8.Education6 = null;
						} else {

							tmpContent_tDBInput_8 = rs_tDBInput_8.getString(11);
							if (tmpContent_tDBInput_8 != null) {
								if (talendToDBList_tDBInput_8.contains(
										rsmd_tDBInput_8.getColumnTypeName(11).toUpperCase(java.util.Locale.ENGLISH))) {
									row8.Education6 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_8);
								} else {
									row8.Education6 = tmpContent_tDBInput_8;
								}
							} else {
								row8.Education6 = null;
							}
						}
						if (colQtyInRs_tDBInput_8 < 12) {
							row8.EducationDeg4 = null;
						} else {

							tmpContent_tDBInput_8 = rs_tDBInput_8.getString(12);
							if (tmpContent_tDBInput_8 != null) {
								if (talendToDBList_tDBInput_8.contains(
										rsmd_tDBInput_8.getColumnTypeName(12).toUpperCase(java.util.Locale.ENGLISH))) {
									row8.EducationDeg4 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_8);
								} else {
									row8.EducationDeg4 = tmpContent_tDBInput_8;
								}
							} else {
								row8.EducationDeg4 = null;
							}
						}
						if (colQtyInRs_tDBInput_8 < 13) {
							row8.EducationDeg5 = null;
						} else {

							tmpContent_tDBInput_8 = rs_tDBInput_8.getString(13);
							if (tmpContent_tDBInput_8 != null) {
								if (talendToDBList_tDBInput_8.contains(
										rsmd_tDBInput_8.getColumnTypeName(13).toUpperCase(java.util.Locale.ENGLISH))) {
									row8.EducationDeg5 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_8);
								} else {
									row8.EducationDeg5 = tmpContent_tDBInput_8;
								}
							} else {
								row8.EducationDeg5 = null;
							}
						}
						if (colQtyInRs_tDBInput_8 < 14) {
							row8.EducationDeg6 = null;
						} else {

							tmpContent_tDBInput_8 = rs_tDBInput_8.getString(14);
							if (tmpContent_tDBInput_8 != null) {
								if (talendToDBList_tDBInput_8.contains(
										rsmd_tDBInput_8.getColumnTypeName(14).toUpperCase(java.util.Locale.ENGLISH))) {
									row8.EducationDeg6 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_8);
								} else {
									row8.EducationDeg6 = tmpContent_tDBInput_8;
								}
							} else {
								row8.EducationDeg6 = null;
							}
						}
						if (colQtyInRs_tDBInput_8 < 15) {
							row8.EducationHonors1 = null;
						} else {

							tmpContent_tDBInput_8 = rs_tDBInput_8.getString(15);
							if (tmpContent_tDBInput_8 != null) {
								if (talendToDBList_tDBInput_8.contains(
										rsmd_tDBInput_8.getColumnTypeName(15).toUpperCase(java.util.Locale.ENGLISH))) {
									row8.EducationHonors1 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_8);
								} else {
									row8.EducationHonors1 = tmpContent_tDBInput_8;
								}
							} else {
								row8.EducationHonors1 = null;
							}
						}
						if (colQtyInRs_tDBInput_8 < 16) {
							row8.EducationHonors2 = null;
						} else {

							tmpContent_tDBInput_8 = rs_tDBInput_8.getString(16);
							if (tmpContent_tDBInput_8 != null) {
								if (talendToDBList_tDBInput_8.contains(
										rsmd_tDBInput_8.getColumnTypeName(16).toUpperCase(java.util.Locale.ENGLISH))) {
									row8.EducationHonors2 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_8);
								} else {
									row8.EducationHonors2 = tmpContent_tDBInput_8;
								}
							} else {
								row8.EducationHonors2 = null;
							}
						}
						if (colQtyInRs_tDBInput_8 < 17) {
							row8.EducationHonors3 = null;
						} else {

							tmpContent_tDBInput_8 = rs_tDBInput_8.getString(17);
							if (tmpContent_tDBInput_8 != null) {
								if (talendToDBList_tDBInput_8.contains(
										rsmd_tDBInput_8.getColumnTypeName(17).toUpperCase(java.util.Locale.ENGLISH))) {
									row8.EducationHonors3 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_8);
								} else {
									row8.EducationHonors3 = tmpContent_tDBInput_8;
								}
							} else {
								row8.EducationHonors3 = null;
							}
						}
						if (colQtyInRs_tDBInput_8 < 18) {
							row8.EducationHonors4 = null;
						} else {

							tmpContent_tDBInput_8 = rs_tDBInput_8.getString(18);
							if (tmpContent_tDBInput_8 != null) {
								if (talendToDBList_tDBInput_8.contains(
										rsmd_tDBInput_8.getColumnTypeName(18).toUpperCase(java.util.Locale.ENGLISH))) {
									row8.EducationHonors4 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_8);
								} else {
									row8.EducationHonors4 = tmpContent_tDBInput_8;
								}
							} else {
								row8.EducationHonors4 = null;
							}
						}
						if (colQtyInRs_tDBInput_8 < 19) {
							row8.EducationHonors5 = null;
						} else {

							tmpContent_tDBInput_8 = rs_tDBInput_8.getString(19);
							if (tmpContent_tDBInput_8 != null) {
								if (talendToDBList_tDBInput_8.contains(
										rsmd_tDBInput_8.getColumnTypeName(19).toUpperCase(java.util.Locale.ENGLISH))) {
									row8.EducationHonors5 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_8);
								} else {
									row8.EducationHonors5 = tmpContent_tDBInput_8;
								}
							} else {
								row8.EducationHonors5 = null;
							}
						}
						if (colQtyInRs_tDBInput_8 < 20) {
							row8.EducationHonors6 = null;
						} else {

							tmpContent_tDBInput_8 = rs_tDBInput_8.getString(20);
							if (tmpContent_tDBInput_8 != null) {
								if (talendToDBList_tDBInput_8.contains(
										rsmd_tDBInput_8.getColumnTypeName(20).toUpperCase(java.util.Locale.ENGLISH))) {
									row8.EducationHonors6 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_8);
								} else {
									row8.EducationHonors6 = tmpContent_tDBInput_8;
								}
							} else {
								row8.EducationHonors6 = null;
							}
						}
						if (colQtyInRs_tDBInput_8 < 21) {
							row8.EducationYear4 = null;
						} else {

							row8.EducationYear4 = rs_tDBInput_8.getShort(21);
							if (rs_tDBInput_8.wasNull()) {
								row8.EducationYear4 = null;
							}
						}
						if (colQtyInRs_tDBInput_8 < 22) {
							row8.EducationYear5 = null;
						} else {

							row8.EducationYear5 = rs_tDBInput_8.getShort(22);
							if (rs_tDBInput_8.wasNull()) {
								row8.EducationYear5 = null;
							}
						}
						if (colQtyInRs_tDBInput_8 < 23) {
							row8.EducationYear6 = null;
						} else {

							row8.EducationYear6 = rs_tDBInput_8.getShort(23);
							if (rs_tDBInput_8.wasNull()) {
								row8.EducationYear6 = null;
							}
						}
						if (colQtyInRs_tDBInput_8 < 24) {
							row8.bsyear = null;
						} else {

							row8.bsyear = rs_tDBInput_8.getShort(24);
							if (rs_tDBInput_8.wasNull()) {
								row8.bsyear = null;
							}
						}
						if (colQtyInRs_tDBInput_8 < 25) {
							row8.NotesSchool = null;
						} else {

							tmpContent_tDBInput_8 = rs_tDBInput_8.getString(25);
							if (tmpContent_tDBInput_8 != null) {
								if (talendToDBList_tDBInput_8.contains(
										rsmd_tDBInput_8.getColumnTypeName(25).toUpperCase(java.util.Locale.ENGLISH))) {
									row8.NotesSchool = FormatterUtils.formatUnwithE(tmpContent_tDBInput_8);
								} else {
									row8.NotesSchool = tmpContent_tDBInput_8;
								}
							} else {
								row8.NotesSchool = null;
							}
						}

						/**
						 * [tDBInput_8 begin ] stop
						 */

						/**
						 * [tDBInput_8 main ] start
						 */

						currentComponent = "tDBInput_8";

						tos_count_tDBInput_8++;

						/**
						 * [tDBInput_8 main ] stop
						 */

						/**
						 * [tDBInput_8 process_data_begin ] start
						 */

						currentComponent = "tDBInput_8";

						/**
						 * [tDBInput_8 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_8 main ] start
						 */

						currentComponent = "tDBOutput_8";

						whetherReject_tDBOutput_8 = false;
						if (row8.contact_externalid == null) {
							pstmt_tDBOutput_8.setNull(1, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_8.setString(1, row8.contact_externalid);
						}

						if (row8.DegreeType1 == null) {
							pstmt_tDBOutput_8.setNull(2, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_8.setString(2, row8.DegreeType1);
						}

						if (row8.DegreeType2 == null) {
							pstmt_tDBOutput_8.setNull(3, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_8.setString(3, row8.DegreeType2);
						}

						if (row8.DegreeType3 == null) {
							pstmt_tDBOutput_8.setNull(4, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_8.setString(4, row8.DegreeType3);
						}

						if (row8.DegreeType4 == null) {
							pstmt_tDBOutput_8.setNull(5, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_8.setString(5, row8.DegreeType4);
						}

						if (row8.DegreeType5 == null) {
							pstmt_tDBOutput_8.setNull(6, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_8.setString(6, row8.DegreeType5);
						}

						if (row8.DegreeType6 == null) {
							pstmt_tDBOutput_8.setNull(7, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_8.setString(7, row8.DegreeType6);
						}

						if (row8.school == null) {
							pstmt_tDBOutput_8.setNull(8, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_8.setString(8, row8.school);
						}

						if (row8.Education4 == null) {
							pstmt_tDBOutput_8.setNull(9, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_8.setString(9, row8.Education4);
						}

						if (row8.Education5 == null) {
							pstmt_tDBOutput_8.setNull(10, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_8.setString(10, row8.Education5);
						}

						if (row8.Education6 == null) {
							pstmt_tDBOutput_8.setNull(11, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_8.setString(11, row8.Education6);
						}

						if (row8.EducationDeg4 == null) {
							pstmt_tDBOutput_8.setNull(12, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_8.setString(12, row8.EducationDeg4);
						}

						if (row8.EducationDeg5 == null) {
							pstmt_tDBOutput_8.setNull(13, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_8.setString(13, row8.EducationDeg5);
						}

						if (row8.EducationDeg6 == null) {
							pstmt_tDBOutput_8.setNull(14, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_8.setString(14, row8.EducationDeg6);
						}

						if (row8.EducationHonors1 == null) {
							pstmt_tDBOutput_8.setNull(15, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_8.setString(15, row8.EducationHonors1);
						}

						if (row8.EducationHonors2 == null) {
							pstmt_tDBOutput_8.setNull(16, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_8.setString(16, row8.EducationHonors2);
						}

						if (row8.EducationHonors3 == null) {
							pstmt_tDBOutput_8.setNull(17, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_8.setString(17, row8.EducationHonors3);
						}

						if (row8.EducationHonors4 == null) {
							pstmt_tDBOutput_8.setNull(18, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_8.setString(18, row8.EducationHonors4);
						}

						if (row8.EducationHonors5 == null) {
							pstmt_tDBOutput_8.setNull(19, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_8.setString(19, row8.EducationHonors5);
						}

						if (row8.EducationHonors6 == null) {
							pstmt_tDBOutput_8.setNull(20, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_8.setString(20, row8.EducationHonors6);
						}

						if (row8.EducationYear4 == null) {
							pstmt_tDBOutput_8.setNull(21, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_8.setShort(21, row8.EducationYear4);
						}

						if (row8.EducationYear5 == null) {
							pstmt_tDBOutput_8.setNull(22, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_8.setShort(22, row8.EducationYear5);
						}

						if (row8.EducationYear6 == null) {
							pstmt_tDBOutput_8.setNull(23, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_8.setShort(23, row8.EducationYear6);
						}

						if (row8.bsyear == null) {
							pstmt_tDBOutput_8.setNull(24, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_8.setShort(24, row8.bsyear);
						}

						if (row8.NotesSchool == null) {
							pstmt_tDBOutput_8.setNull(25, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_8.setString(25, row8.NotesSchool);
						}

						pstmt_tDBOutput_8.addBatch();
						batchSizeCounter_tDBOutput_8++;
						nb_line_tDBOutput_8++;
						if ((batchSize_tDBOutput_8 > 0) && (batchSize_tDBOutput_8 <= batchSizeCounter_tDBOutput_8)) {
							int[] status_tDBOutput_8 = null;
							int countSum_tDBOutput_8 = 0;
							try {
								batchSizeCounter_tDBOutput_8 = 0;
								status_tDBOutput_8 = pstmt_tDBOutput_8.executeBatch();
								for (int countEach_tDBOutput_8 : status_tDBOutput_8) {
									countSum_tDBOutput_8 += (countEach_tDBOutput_8 < 0 ? 0 : countEach_tDBOutput_8);
								}
							} catch (java.sql.BatchUpdateException e) {
								for (int countEach_tDBOutput_8 : e.getUpdateCounts()) {
									countSum_tDBOutput_8 += (countEach_tDBOutput_8 < 0 ? 0 : countEach_tDBOutput_8);
								}
								System.err.println(e.getMessage());
							}
							try {
								tmp_batchUpdateCount_tDBOutput_8 = pstmt_tDBOutput_8.getUpdateCount();
							} catch (java.sql.SQLException e) {
								System.err.println(e.getMessage());
							}
							tmp_batchUpdateCount_tDBOutput_8 = tmp_batchUpdateCount_tDBOutput_8 > countSum_tDBOutput_8
									? tmp_batchUpdateCount_tDBOutput_8
									: countSum_tDBOutput_8;
							insertedCount_tDBOutput_8 += tmp_batchUpdateCount_tDBOutput_8;
						}

						tos_count_tDBOutput_8++;

						/**
						 * [tDBOutput_8 main ] stop
						 */

						/**
						 * [tDBOutput_8 process_data_begin ] start
						 */

						currentComponent = "tDBOutput_8";

						/**
						 * [tDBOutput_8 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_8 process_data_end ] start
						 */

						currentComponent = "tDBOutput_8";

						/**
						 * [tDBOutput_8 process_data_end ] stop
						 */

						/**
						 * [tDBInput_8 process_data_end ] start
						 */

						currentComponent = "tDBInput_8";

						/**
						 * [tDBInput_8 process_data_end ] stop
						 */

						/**
						 * [tDBInput_8 end ] start
						 */

						currentComponent = "tDBInput_8";

					}
				} finally {
					if (rs_tDBInput_8 != null) {
						rs_tDBInput_8.close();
					}
					if (stmt_tDBInput_8 != null) {
						stmt_tDBInput_8.close();
					}
				}
				globalMap.put("tDBInput_8_NB_LINE", nb_line_tDBInput_8);

				ok_Hash.put("tDBInput_8", true);
				end_Hash.put("tDBInput_8", System.currentTimeMillis());

				/**
				 * [tDBInput_8 end ] stop
				 */

				/**
				 * [tDBOutput_8 end ] start
				 */

				currentComponent = "tDBOutput_8";

				int[] status_tDBOutput_8 = null;
				int countSum_tDBOutput_8 = 0;
				try {
					if (pstmt_tDBOutput_8 != null && batchSizeCounter_tDBOutput_8 > 0) {
						status_tDBOutput_8 = pstmt_tDBOutput_8.executeBatch();
						for (int countEach_tDBOutput_8 : status_tDBOutput_8) {
							countSum_tDBOutput_8 += (countEach_tDBOutput_8 < 0 ? 0 : countEach_tDBOutput_8);
						}
					}
				} catch (java.sql.BatchUpdateException e) {
					for (int countEach_tDBOutput_8 : e.getUpdateCounts()) {
						countSum_tDBOutput_8 += (countEach_tDBOutput_8 < 0 ? 0 : countEach_tDBOutput_8);
					}
					System.err.println(e.getMessage());
				}
				if (pstmt_tDBOutput_8 != null && batchSizeCounter_tDBOutput_8 > 0) {
					try {
						tmp_batchUpdateCount_tDBOutput_8 = pstmt_tDBOutput_8.getUpdateCount();
					} catch (java.sql.SQLException e) {

					}
					tmp_batchUpdateCount_tDBOutput_8 = tmp_batchUpdateCount_tDBOutput_8 > countSum_tDBOutput_8
							? tmp_batchUpdateCount_tDBOutput_8
							: countSum_tDBOutput_8;
					insertedCount_tDBOutput_8 += tmp_batchUpdateCount_tDBOutput_8;
				}
				if (pstmt_tDBOutput_8 != null) {
					pstmt_tDBOutput_8.close();
					resourceMap.remove("pstmt_tDBOutput_8");
				}
				resourceMap.put("statementClosed_tDBOutput_8", true);

				int rejectedCount_tDBOutput_8 = 0;
				nb_line_deleted_tDBOutput_8 = nb_line_deleted_tDBOutput_8 + deletedCount_tDBOutput_8;
				nb_line_update_tDBOutput_8 = nb_line_update_tDBOutput_8 + updatedCount_tDBOutput_8;
				nb_line_inserted_tDBOutput_8 = nb_line_inserted_tDBOutput_8 + insertedCount_tDBOutput_8;
				nb_line_rejected_tDBOutput_8 = nb_line_rejected_tDBOutput_8 + rejectedCount_tDBOutput_8;

				globalMap.put("tDBOutput_8_NB_LINE", nb_line_tDBOutput_8);
				globalMap.put("tDBOutput_8_NB_LINE_UPDATED", nb_line_update_tDBOutput_8);
				globalMap.put("tDBOutput_8_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_8);
				globalMap.put("tDBOutput_8_NB_LINE_DELETED", nb_line_deleted_tDBOutput_8);
				globalMap.put("tDBOutput_8_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_8);

				ok_Hash.put("tDBOutput_8", true);
				end_Hash.put("tDBOutput_8", System.currentTimeMillis());

				/**
				 * [tDBOutput_8 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_8 finally ] start
				 */

				currentComponent = "tDBInput_8";

				/**
				 * [tDBInput_8 finally ] stop
				 */

				/**
				 * [tDBOutput_8 finally ] start
				 */

				currentComponent = "tDBOutput_8";

				if (resourceMap.get("statementClosed_tDBOutput_8") == null) {
					java.sql.PreparedStatement pstmtToClose_tDBOutput_8 = null;
					if ((pstmtToClose_tDBOutput_8 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_8")) != null) {
						pstmtToClose_tDBOutput_8.close();
					}
				}

				/**
				 * [tDBOutput_8 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_8_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final garrison_gen_data_contact garrison_gen_data_contactClass = new garrison_gen_data_contact();

		int exitCode = garrison_gen_data_contactClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = garrison_gen_data_contact.class.getClassLoader().getResourceAsStream(
					"vincere_etl/garrison_gen_data_contact_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = garrison_gen_data_contact.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				if (context != null && context.isEmpty()) {
					defaultProps.load(inContext);
					context = new ContextProperties(defaultProps);
				}

				inContext.close();
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tDBConnection_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tDBConnection_1) {
			globalMap.put("tDBConnection_1_SUBPROCESS_STATE", -1);

			e_tDBConnection_1.printStackTrace();

		}
		try {
			errorCode = null;
			tDBConnection_2Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tDBConnection_2) {
			globalMap.put("tDBConnection_2_SUBPROCESS_STATE", -1);

			e_tDBConnection_2.printStackTrace();

		}
		try {
			errorCode = null;
			tDBInput_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tDBInput_1) {
			globalMap.put("tDBInput_1_SUBPROCESS_STATE", -1);

			e_tDBInput_1.printStackTrace();

		}
		try {
			errorCode = null;
			tDBInput_2Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tDBInput_2) {
			globalMap.put("tDBInput_2_SUBPROCESS_STATE", -1);

			e_tDBInput_2.printStackTrace();

		}
		try {
			errorCode = null;
			tDBInput_3Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tDBInput_3) {
			globalMap.put("tDBInput_3_SUBPROCESS_STATE", -1);

			e_tDBInput_3.printStackTrace();

		}
		try {
			errorCode = null;
			tDBInput_4Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tDBInput_4) {
			globalMap.put("tDBInput_4_SUBPROCESS_STATE", -1);

			e_tDBInput_4.printStackTrace();

		}
		try {
			errorCode = null;
			tDBInput_5Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tDBInput_5) {
			globalMap.put("tDBInput_5_SUBPROCESS_STATE", -1);

			e_tDBInput_5.printStackTrace();

		}
		try {
			errorCode = null;
			tDBInput_6Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tDBInput_6) {
			globalMap.put("tDBInput_6_SUBPROCESS_STATE", -1);

			e_tDBInput_6.printStackTrace();

		}
		try {
			errorCode = null;
			tDBInput_7Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tDBInput_7) {
			globalMap.put("tDBInput_7_SUBPROCESS_STATE", -1);

			e_tDBInput_7.printStackTrace();

		}
		try {
			errorCode = null;
			tDBInput_8Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tDBInput_8) {
			globalMap.put("tDBInput_8_SUBPROCESS_STATE", -1);

			e_tDBInput_8.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : garrison_gen_data_contact");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {
		closeSqlDbConnections();

	}

	private void closeSqlDbConnections() {
		try {
			Object obj_conn;
			obj_conn = globalMap.remove("conn_tDBConnection_1");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
			obj_conn = globalMap.remove("conn_tDBConnection_2");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
		} catch (java.lang.Exception e) {
		}
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		connections.put("conn_tDBConnection_1", globalMap.get("conn_tDBConnection_1"));
		connections.put("conn_tDBConnection_2", globalMap.get("conn_tDBConnection_2"));

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring=")) {// for trunjob call
			enableLogStash = "true".equalsIgnoreCase(arg.substring(13));
		}

		if (!enableLogStash) {
			enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 271696 characters generated by Talend Open Studio for Data Integration on the
 * November 22, 2019 at 4:26:02 PM ICT
 ************************************************************************************************/