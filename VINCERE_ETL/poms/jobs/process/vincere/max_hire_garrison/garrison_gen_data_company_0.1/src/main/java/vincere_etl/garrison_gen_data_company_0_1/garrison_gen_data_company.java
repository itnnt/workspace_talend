// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package vincere_etl.garrison_gen_data_company_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: garrison_gen_data_company Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.2.1.20190620_1446
 * @status 
 */
public class garrison_gen_data_company implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(strivesales_Server != null){
				
					this.setProperty("strivesales_Server", strivesales_Server.toString());
				
			}
			
			if(strivesales_AdditionalParams != null){
				
					this.setProperty("strivesales_AdditionalParams", strivesales_AdditionalParams.toString());
				
			}
			
			if(strivesales_Schema != null){
				
					this.setProperty("strivesales_Schema", strivesales_Schema.toString());
				
			}
			
			if(strivesales_Database != null){
				
					this.setProperty("strivesales_Database", strivesales_Database.toString());
				
			}
			
			if(strivesales_Login != null){
				
					this.setProperty("strivesales_Login", strivesales_Login.toString());
				
			}
			
			if(strivesales_Port != null){
				
					this.setProperty("strivesales_Port", strivesales_Port.toString());
				
			}
			
			if(strivesales_Password != null){
				
					this.setProperty("strivesales_Password", strivesales_Password.toString());
				
			}
			
		}

public String strivesales_Server;
public String getStrivesales_Server(){
	return this.strivesales_Server;
}
public String strivesales_AdditionalParams;
public String getStrivesales_AdditionalParams(){
	return this.strivesales_AdditionalParams;
}
public String strivesales_Schema;
public String getStrivesales_Schema(){
	return this.strivesales_Schema;
}
public String strivesales_Database;
public String getStrivesales_Database(){
	return this.strivesales_Database;
}
public String strivesales_Login;
public String getStrivesales_Login(){
	return this.strivesales_Login;
}
public String strivesales_Port;
public String getStrivesales_Port(){
	return this.strivesales_Port;
}
public java.lang.String strivesales_Password;
public java.lang.String getStrivesales_Password(){
	return this.strivesales_Password;
}
	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "garrison_gen_data_company";
	private final String projectName = "VINCERE_ETL";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				garrison_gen_data_company.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(garrison_gen_data_company.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tDBInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBConnection_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBConnection_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBConnection_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_7_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_8_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_9_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_10_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_11_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	






public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_VINCERE_ETL_garrison_gen_data_company = new byte[0];
    static byte[] commonByteArray_VINCERE_ETL_garrison_gen_data_company = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String company_externalid;

				public String getCompany_externalid () {
					return this.company_externalid;
				}
				
			    public String company_name;

				public String getCompany_name () {
					return this.company_name;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.company_externalid == null) ? 0 : this.company_externalid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row1Struct other = (row1Struct) obj;
		
						if (this.company_externalid == null) {
							if (other.company_externalid != null)
								return false;
						
						} else if (!this.company_externalid.equals(other.company_externalid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row1Struct other) {

		other.company_externalid = this.company_externalid;
	            other.company_name = this.company_name;
	            
	}

	public void copyKeysDataTo(row1Struct other) {

		other.company_externalid = this.company_externalid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VINCERE_ETL_garrison_gen_data_company.length) {
				if(length < 1024 && commonByteArray_VINCERE_ETL_garrison_gen_data_company.length == 0) {
   					commonByteArray_VINCERE_ETL_garrison_gen_data_company = new byte[1024];
				} else {
   					commonByteArray_VINCERE_ETL_garrison_gen_data_company = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_VINCERE_ETL_garrison_gen_data_company, 0, length);
			strReturn = new String(commonByteArray_VINCERE_ETL_garrison_gen_data_company, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_VINCERE_ETL_garrison_gen_data_company) {

        	try {

        		int length = 0;
		
					this.company_externalid = readString(dis);
					
					this.company_name = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.company_externalid,dos);
					
					// String
				
						writeString(this.company_name,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("company_externalid="+company_externalid);
		sb.append(",company_name="+company_name);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.company_externalid, other.company_externalid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();




	
	/**
	 * [tDBOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_1", false);
		start_Hash.put("tDBOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("row1"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tDBOutput_1 = 0;
		
	




int nb_line_tDBOutput_1 = 0;
int nb_line_update_tDBOutput_1 = 0;
int nb_line_inserted_tDBOutput_1 = 0;
int nb_line_deleted_tDBOutput_1 = 0;
int nb_line_rejected_tDBOutput_1 = 0;

int deletedCount_tDBOutput_1=0;
int updatedCount_tDBOutput_1=0;
int insertedCount_tDBOutput_1=0;

String tableName_tDBOutput_1 = "company_name";
boolean whetherReject_tDBOutput_1 = false;

       int batchSize_tDBOutput_1 = 10000;
       int batchSizeCounter_tDBOutput_1=0;
       int tmp_batchUpdateCount_tDBOutput_1 = 0;


java.sql.Connection conn_tDBOutput_1 = null;
    conn_tDBOutput_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");

            java.sql.DatabaseMetaData dbMetaData_tDBOutput_1 = conn_tDBOutput_1.getMetaData();
            boolean whetherExist_tDBOutput_1 = false;
            try (java.sql.ResultSet rsTable_tDBOutput_1 = dbMetaData_tDBOutput_1.getTables(null, null, null, new String[]{"TABLE"})) {
                while(rsTable_tDBOutput_1.next()) {
                    String table_tDBOutput_1 = rsTable_tDBOutput_1.getString("TABLE_NAME");
                    if(table_tDBOutput_1.equalsIgnoreCase("company_name")) {
                        whetherExist_tDBOutput_1 = true;
                        break;
                    }
                }
            }
                if(whetherExist_tDBOutput_1) {
                    try (java.sql.Statement stmtDrop_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
                        stmtDrop_tDBOutput_1.execute("DROP TABLE \"" + tableName_tDBOutput_1 + "\"");
                    }
                }
                try (java.sql.Statement stmtCreate_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
                    stmtCreate_tDBOutput_1.execute("CREATE TABLE \"" + tableName_tDBOutput_1 + "\"(\"company_externalid\" VARCHAR(13)   not null ,\"company_name\" VARCHAR(50)  ,primary key(\"company_externalid\"))");
                }
	    String insert_tDBOutput_1 = "INSERT INTO \"" + "company_name" + "\" (\"company_externalid\",\"company_name\") VALUES (?,?)";
	    java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
	    resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);
	    

 



/**
 * [tDBOutput_1 begin ] stop
 */



	
	/**
	 * [tDBInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_2", false);
		start_Hash.put("tDBInput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_2";

	
		int tos_count_tDBInput_2 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_2 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_2 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_2  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_2, talendToDBArray_tDBInput_2); 
		    int nb_line_tDBInput_2 = 0;
		    java.sql.Connection conn_tDBInput_2 = null;
		        conn_tDBInput_2 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
			String dbschema_tDBInput_2 = (String)globalMap.get("dbschema_tDBConnection_2");
		    
			java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

		    String dbquery_tDBInput_2 = "\nselect \nconcat('', c.id) as company_externalid\n, c.compname as company_name\n, c.dateenter as insert_timestamp\nfrom com"
+"pany c \nwhere DeleteFlag=0;\n";
			

            	globalMap.put("tDBInput_2_QUERY",dbquery_tDBInput_2);
		    java.sql.ResultSet rs_tDBInput_2 = null;

		    try {
		    	rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
		    	int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

		    String tmpContent_tDBInput_2 = null;
		    
		    
		    while (rs_tDBInput_2.next()) {
		        nb_line_tDBInput_2++;
		        
							if(colQtyInRs_tDBInput_2 < 1) {
								row1.company_externalid = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(1);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.company_externalid = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	row1.company_externalid = tmpContent_tDBInput_2;
                }
            } else {
                row1.company_externalid = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 2) {
								row1.company_name = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(2);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.company_name = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	row1.company_name = tmpContent_tDBInput_2;
                }
            } else {
                row1.company_name = null;
            }
		                    }
					





 



/**
 * [tDBInput_2 begin ] stop
 */
	
	/**
	 * [tDBInput_2 main ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 


	tos_count_tDBInput_2++;

/**
 * [tDBInput_2 main ] stop
 */
	
	/**
	 * [tDBInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tDBOutput_1 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

			//row1
			//row1


			
				
				if(execStat){
					runStat.updateStatOnConnection("row1"+iterateId,1, 1);
				}
				
				
				
			

		
	



        whetherReject_tDBOutput_1 = false;
                    if(row1.company_externalid == null) {
pstmt_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(1, row1.company_externalid);
}

                    if(row1.company_name == null) {
pstmt_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(2, row1.company_name);
}


                       pstmt_tDBOutput_1.addBatch();
                       batchSizeCounter_tDBOutput_1++;
                       nb_line_tDBOutput_1++;
                if ((batchSize_tDBOutput_1 > 0) && (batchSize_tDBOutput_1 <= batchSizeCounter_tDBOutput_1)) {
                    int[] status_tDBOutput_1 = null;
                    int countSum_tDBOutput_1 = 0;
                    try {
                        batchSizeCounter_tDBOutput_1 = 0;
                        status_tDBOutput_1 = pstmt_tDBOutput_1.executeBatch();
                        for(int countEach_tDBOutput_1: status_tDBOutput_1) {
                            countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
                        }
                    }catch (java.sql.BatchUpdateException e){
                        for(int countEach_tDBOutput_1: e.getUpdateCounts()) {
                            countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
                        }
                        System.err.println(e.getMessage());
                    }
                    try {
                        tmp_batchUpdateCount_tDBOutput_1 = pstmt_tDBOutput_1.getUpdateCount();
                    }catch (java.sql.SQLException e){
                        System.err.println(e.getMessage());
                    }
                    tmp_batchUpdateCount_tDBOutput_1 = tmp_batchUpdateCount_tDBOutput_1 > countSum_tDBOutput_1 ? tmp_batchUpdateCount_tDBOutput_1 : countSum_tDBOutput_1;
                        insertedCount_tDBOutput_1 += tmp_batchUpdateCount_tDBOutput_1;
               }

 


	tos_count_tDBOutput_1++;

/**
 * [tDBOutput_1 main ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_2 end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

	}
}finally{
	if (rs_tDBInput_2 != null) {
		rs_tDBInput_2.close();
	}
	if (stmt_tDBInput_2 != null) {
		stmt_tDBInput_2.close();
	}
}
globalMap.put("tDBInput_2_NB_LINE",nb_line_tDBInput_2);

 

ok_Hash.put("tDBInput_2", true);
end_Hash.put("tDBInput_2", System.currentTimeMillis());




/**
 * [tDBInput_2 end ] stop
 */

	
	/**
	 * [tDBOutput_1 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	




                    int[] status_tDBOutput_1 = null;
                    int countSum_tDBOutput_1 = 0;
                    try {
                        if(pstmt_tDBOutput_1!=null && batchSizeCounter_tDBOutput_1 > 0 ){
                            status_tDBOutput_1 = pstmt_tDBOutput_1.executeBatch();
                            for(int countEach_tDBOutput_1: status_tDBOutput_1) {
                                countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
                            }
                        }
                    }catch (java.sql.BatchUpdateException e){
                        for(int countEach_tDBOutput_1: e.getUpdateCounts()) {
                            countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
                        }
                        System.err.println(e.getMessage());
                    }
                    if(pstmt_tDBOutput_1!=null && batchSizeCounter_tDBOutput_1 > 0 ){
                        try {
                            tmp_batchUpdateCount_tDBOutput_1 = pstmt_tDBOutput_1.getUpdateCount();
                        }catch (java.sql.SQLException e){

                        }
                        tmp_batchUpdateCount_tDBOutput_1 = tmp_batchUpdateCount_tDBOutput_1 > countSum_tDBOutput_1 ? tmp_batchUpdateCount_tDBOutput_1 : countSum_tDBOutput_1;
                            insertedCount_tDBOutput_1 += tmp_batchUpdateCount_tDBOutput_1;
                    }
        if(pstmt_tDBOutput_1 != null) {
            pstmt_tDBOutput_1.close();
            resourceMap.remove("pstmt_tDBOutput_1");
        }
    resourceMap.put("statementClosed_tDBOutput_1", true);

	int rejectedCount_tDBOutput_1 = 0;
	nb_line_deleted_tDBOutput_1=nb_line_deleted_tDBOutput_1+ deletedCount_tDBOutput_1;
	nb_line_update_tDBOutput_1=nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
	nb_line_inserted_tDBOutput_1=nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
	nb_line_rejected_tDBOutput_1=nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;
	
        globalMap.put("tDBOutput_1_NB_LINE",nb_line_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_UPDATED",nb_line_update_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_DELETED",nb_line_deleted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);
    
	


			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("row1"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tDBOutput_1", true);
end_Hash.put("tDBOutput_1", System.currentTimeMillis());




/**
 * [tDBOutput_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 finally ] stop
 */

	
	/**
	 * [tDBOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



    if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
                if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_1")) != null) {
                    pstmtToClose_tDBOutput_1.close();
                }
    }
 



/**
 * [tDBOutput_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_VINCERE_ETL_garrison_gen_data_company = new byte[0];
    static byte[] commonByteArray_VINCERE_ETL_garrison_gen_data_company = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String company_externalid;

				public String getCompany_externalid () {
					return this.company_externalid;
				}
				
			    public String address1;

				public String getAddress1 () {
					return this.address1;
				}
				
			    public String address2;

				public String getAddress2 () {
					return this.address2;
				}
				
			    public String city;

				public String getCity () {
					return this.city;
				}
				
			    public String state;

				public String getState () {
					return this.state;
				}
				
			    public String zip;

				public String getZip () {
					return this.zip;
				}
				
			    public String country;

				public String getCountry () {
					return this.country;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.company_externalid == null) ? 0 : this.company_externalid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row2Struct other = (row2Struct) obj;
		
						if (this.company_externalid == null) {
							if (other.company_externalid != null)
								return false;
						
						} else if (!this.company_externalid.equals(other.company_externalid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row2Struct other) {

		other.company_externalid = this.company_externalid;
	            other.address1 = this.address1;
	            other.address2 = this.address2;
	            other.city = this.city;
	            other.state = this.state;
	            other.zip = this.zip;
	            other.country = this.country;
	            
	}

	public void copyKeysDataTo(row2Struct other) {

		other.company_externalid = this.company_externalid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VINCERE_ETL_garrison_gen_data_company.length) {
				if(length < 1024 && commonByteArray_VINCERE_ETL_garrison_gen_data_company.length == 0) {
   					commonByteArray_VINCERE_ETL_garrison_gen_data_company = new byte[1024];
				} else {
   					commonByteArray_VINCERE_ETL_garrison_gen_data_company = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_VINCERE_ETL_garrison_gen_data_company, 0, length);
			strReturn = new String(commonByteArray_VINCERE_ETL_garrison_gen_data_company, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_VINCERE_ETL_garrison_gen_data_company) {

        	try {

        		int length = 0;
		
					this.company_externalid = readString(dis);
					
					this.address1 = readString(dis);
					
					this.address2 = readString(dis);
					
					this.city = readString(dis);
					
					this.state = readString(dis);
					
					this.zip = readString(dis);
					
					this.country = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.company_externalid,dos);
					
					// String
				
						writeString(this.address1,dos);
					
					// String
				
						writeString(this.address2,dos);
					
					// String
				
						writeString(this.city,dos);
					
					// String
				
						writeString(this.state,dos);
					
					// String
				
						writeString(this.zip,dos);
					
					// String
				
						writeString(this.country,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("company_externalid="+company_externalid);
		sb.append(",address1="+address1);
		sb.append(",address2="+address2);
		sb.append(",city="+city);
		sb.append(",state="+state);
		sb.append(",zip="+zip);
		sb.append(",country="+country);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.company_externalid, other.company_externalid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row2Struct row2 = new row2Struct();




	
	/**
	 * [tDBOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_2", false);
		start_Hash.put("tDBOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("row2"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tDBOutput_2 = 0;
		
	




int nb_line_tDBOutput_2 = 0;
int nb_line_update_tDBOutput_2 = 0;
int nb_line_inserted_tDBOutput_2 = 0;
int nb_line_deleted_tDBOutput_2 = 0;
int nb_line_rejected_tDBOutput_2 = 0;

int deletedCount_tDBOutput_2=0;
int updatedCount_tDBOutput_2=0;
int insertedCount_tDBOutput_2=0;

String tableName_tDBOutput_2 = "company_address";
boolean whetherReject_tDBOutput_2 = false;

       int batchSize_tDBOutput_2 = 10000;
       int batchSizeCounter_tDBOutput_2=0;
       int tmp_batchUpdateCount_tDBOutput_2 = 0;


java.sql.Connection conn_tDBOutput_2 = null;
    conn_tDBOutput_2 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");

            java.sql.DatabaseMetaData dbMetaData_tDBOutput_2 = conn_tDBOutput_2.getMetaData();
            boolean whetherExist_tDBOutput_2 = false;
            try (java.sql.ResultSet rsTable_tDBOutput_2 = dbMetaData_tDBOutput_2.getTables(null, null, null, new String[]{"TABLE"})) {
                while(rsTable_tDBOutput_2.next()) {
                    String table_tDBOutput_2 = rsTable_tDBOutput_2.getString("TABLE_NAME");
                    if(table_tDBOutput_2.equalsIgnoreCase("company_address")) {
                        whetherExist_tDBOutput_2 = true;
                        break;
                    }
                }
            }
                if(whetherExist_tDBOutput_2) {
                    try (java.sql.Statement stmtDrop_tDBOutput_2 = conn_tDBOutput_2.createStatement()) {
                        stmtDrop_tDBOutput_2.execute("DROP TABLE \"" + tableName_tDBOutput_2 + "\"");
                    }
                }
                try (java.sql.Statement stmtCreate_tDBOutput_2 = conn_tDBOutput_2.createStatement()) {
                    stmtCreate_tDBOutput_2.execute("CREATE TABLE \"" + tableName_tDBOutput_2 + "\"(\"company_externalid\" VARCHAR(13)   not null ,\"address1\" VARCHAR(70)  ,\"address2\" VARCHAR(70)  ,\"city\" VARCHAR(40)  ,\"state\" VARCHAR(2)  ,\"zip\" VARCHAR(10)  ,\"country\" VARCHAR(50)  ,primary key(\"company_externalid\"))");
                }
	    String insert_tDBOutput_2 = "INSERT INTO \"" + "company_address" + "\" (\"company_externalid\",\"address1\",\"address2\",\"city\",\"state\",\"zip\",\"country\") VALUES (?,?,?,?,?,?,?)";
	    java.sql.PreparedStatement pstmt_tDBOutput_2 = conn_tDBOutput_2.prepareStatement(insert_tDBOutput_2);
	    resourceMap.put("pstmt_tDBOutput_2", pstmt_tDBOutput_2);
	    

 



/**
 * [tDBOutput_2 begin ] stop
 */



	
	/**
	 * [tDBInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_3", false);
		start_Hash.put("tDBInput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_3";

	
		int tos_count_tDBInput_3 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_3 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_3 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_3  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_3, talendToDBArray_tDBInput_3); 
		    int nb_line_tDBInput_3 = 0;
		    java.sql.Connection conn_tDBInput_3 = null;
		        conn_tDBInput_3 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
			String dbschema_tDBInput_3 = (String)globalMap.get("dbschema_tDBConnection_2");
		    
			java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3.createStatement();

		    String dbquery_tDBInput_3 = "\nselect \nconcat('', c.id) as company_externalid\n, c.address1, c.address2, c.city, c.state, c.zip, c.Locale as country\nf"
+"rom company c \nwhere DeleteFlag=0\n";
			

            	globalMap.put("tDBInput_3_QUERY",dbquery_tDBInput_3);
		    java.sql.ResultSet rs_tDBInput_3 = null;

		    try {
		    	rs_tDBInput_3 = stmt_tDBInput_3.executeQuery(dbquery_tDBInput_3);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3.getMetaData();
		    	int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3.getColumnCount();

		    String tmpContent_tDBInput_3 = null;
		    
		    
		    while (rs_tDBInput_3.next()) {
		        nb_line_tDBInput_3++;
		        
							if(colQtyInRs_tDBInput_3 < 1) {
								row2.company_externalid = null;
							} else {
	                         		
           		tmpContent_tDBInput_3 = rs_tDBInput_3.getString(1);
            if(tmpContent_tDBInput_3 != null) {
            	if (talendToDBList_tDBInput_3 .contains(rsmd_tDBInput_3.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
            		row2.company_externalid = FormatterUtils.formatUnwithE(tmpContent_tDBInput_3);
            	} else {
                	row2.company_externalid = tmpContent_tDBInput_3;
                }
            } else {
                row2.company_externalid = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 2) {
								row2.address1 = null;
							} else {
	                         		
           		tmpContent_tDBInput_3 = rs_tDBInput_3.getString(2);
            if(tmpContent_tDBInput_3 != null) {
            	if (talendToDBList_tDBInput_3 .contains(rsmd_tDBInput_3.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
            		row2.address1 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_3);
            	} else {
                	row2.address1 = tmpContent_tDBInput_3;
                }
            } else {
                row2.address1 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 3) {
								row2.address2 = null;
							} else {
	                         		
           		tmpContent_tDBInput_3 = rs_tDBInput_3.getString(3);
            if(tmpContent_tDBInput_3 != null) {
            	if (talendToDBList_tDBInput_3 .contains(rsmd_tDBInput_3.getColumnTypeName(3).toUpperCase(java.util.Locale.ENGLISH))) {
            		row2.address2 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_3);
            	} else {
                	row2.address2 = tmpContent_tDBInput_3;
                }
            } else {
                row2.address2 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 4) {
								row2.city = null;
							} else {
	                         		
           		tmpContent_tDBInput_3 = rs_tDBInput_3.getString(4);
            if(tmpContent_tDBInput_3 != null) {
            	if (talendToDBList_tDBInput_3 .contains(rsmd_tDBInput_3.getColumnTypeName(4).toUpperCase(java.util.Locale.ENGLISH))) {
            		row2.city = FormatterUtils.formatUnwithE(tmpContent_tDBInput_3);
            	} else {
                	row2.city = tmpContent_tDBInput_3;
                }
            } else {
                row2.city = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 5) {
								row2.state = null;
							} else {
	                         		
           		tmpContent_tDBInput_3 = rs_tDBInput_3.getString(5);
            if(tmpContent_tDBInput_3 != null) {
            	if (talendToDBList_tDBInput_3 .contains(rsmd_tDBInput_3.getColumnTypeName(5).toUpperCase(java.util.Locale.ENGLISH))) {
            		row2.state = FormatterUtils.formatUnwithE(tmpContent_tDBInput_3);
            	} else {
                	row2.state = tmpContent_tDBInput_3;
                }
            } else {
                row2.state = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 6) {
								row2.zip = null;
							} else {
	                         		
           		tmpContent_tDBInput_3 = rs_tDBInput_3.getString(6);
            if(tmpContent_tDBInput_3 != null) {
            	if (talendToDBList_tDBInput_3 .contains(rsmd_tDBInput_3.getColumnTypeName(6).toUpperCase(java.util.Locale.ENGLISH))) {
            		row2.zip = FormatterUtils.formatUnwithE(tmpContent_tDBInput_3);
            	} else {
                	row2.zip = tmpContent_tDBInput_3;
                }
            } else {
                row2.zip = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 7) {
								row2.country = null;
							} else {
	                         		
           		tmpContent_tDBInput_3 = rs_tDBInput_3.getString(7);
            if(tmpContent_tDBInput_3 != null) {
            	if (talendToDBList_tDBInput_3 .contains(rsmd_tDBInput_3.getColumnTypeName(7).toUpperCase(java.util.Locale.ENGLISH))) {
            		row2.country = FormatterUtils.formatUnwithE(tmpContent_tDBInput_3);
            	} else {
                	row2.country = tmpContent_tDBInput_3;
                }
            } else {
                row2.country = null;
            }
		                    }
					





 



/**
 * [tDBInput_3 begin ] stop
 */
	
	/**
	 * [tDBInput_3 main ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 


	tos_count_tDBInput_3++;

/**
 * [tDBInput_3 main ] stop
 */
	
	/**
	 * [tDBInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tDBOutput_2 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	

			//row2
			//row2


			
				
				if(execStat){
					runStat.updateStatOnConnection("row2"+iterateId,1, 1);
				}
				
				
				
			

		
	



        whetherReject_tDBOutput_2 = false;
                    if(row2.company_externalid == null) {
pstmt_tDBOutput_2.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(1, row2.company_externalid);
}

                    if(row2.address1 == null) {
pstmt_tDBOutput_2.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(2, row2.address1);
}

                    if(row2.address2 == null) {
pstmt_tDBOutput_2.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(3, row2.address2);
}

                    if(row2.city == null) {
pstmt_tDBOutput_2.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(4, row2.city);
}

                    if(row2.state == null) {
pstmt_tDBOutput_2.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(5, row2.state);
}

                    if(row2.zip == null) {
pstmt_tDBOutput_2.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(6, row2.zip);
}

                    if(row2.country == null) {
pstmt_tDBOutput_2.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(7, row2.country);
}


                       pstmt_tDBOutput_2.addBatch();
                       batchSizeCounter_tDBOutput_2++;
                       nb_line_tDBOutput_2++;
                if ((batchSize_tDBOutput_2 > 0) && (batchSize_tDBOutput_2 <= batchSizeCounter_tDBOutput_2)) {
                    int[] status_tDBOutput_2 = null;
                    int countSum_tDBOutput_2 = 0;
                    try {
                        batchSizeCounter_tDBOutput_2 = 0;
                        status_tDBOutput_2 = pstmt_tDBOutput_2.executeBatch();
                        for(int countEach_tDBOutput_2: status_tDBOutput_2) {
                            countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
                        }
                    }catch (java.sql.BatchUpdateException e){
                        for(int countEach_tDBOutput_2: e.getUpdateCounts()) {
                            countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
                        }
                        System.err.println(e.getMessage());
                    }
                    try {
                        tmp_batchUpdateCount_tDBOutput_2 = pstmt_tDBOutput_2.getUpdateCount();
                    }catch (java.sql.SQLException e){
                        System.err.println(e.getMessage());
                    }
                    tmp_batchUpdateCount_tDBOutput_2 = tmp_batchUpdateCount_tDBOutput_2 > countSum_tDBOutput_2 ? tmp_batchUpdateCount_tDBOutput_2 : countSum_tDBOutput_2;
                        insertedCount_tDBOutput_2 += tmp_batchUpdateCount_tDBOutput_2;
               }

 


	tos_count_tDBOutput_2++;

/**
 * [tDBOutput_2 main ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	

 



/**
 * [tDBOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	

 



/**
 * [tDBOutput_2 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_3 end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

	}
}finally{
	if (rs_tDBInput_3 != null) {
		rs_tDBInput_3.close();
	}
	if (stmt_tDBInput_3 != null) {
		stmt_tDBInput_3.close();
	}
}
globalMap.put("tDBInput_3_NB_LINE",nb_line_tDBInput_3);

 

ok_Hash.put("tDBInput_3", true);
end_Hash.put("tDBInput_3", System.currentTimeMillis());




/**
 * [tDBInput_3 end ] stop
 */

	
	/**
	 * [tDBOutput_2 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	




                    int[] status_tDBOutput_2 = null;
                    int countSum_tDBOutput_2 = 0;
                    try {
                        if(pstmt_tDBOutput_2!=null && batchSizeCounter_tDBOutput_2 > 0 ){
                            status_tDBOutput_2 = pstmt_tDBOutput_2.executeBatch();
                            for(int countEach_tDBOutput_2: status_tDBOutput_2) {
                                countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
                            }
                        }
                    }catch (java.sql.BatchUpdateException e){
                        for(int countEach_tDBOutput_2: e.getUpdateCounts()) {
                            countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
                        }
                        System.err.println(e.getMessage());
                    }
                    if(pstmt_tDBOutput_2!=null && batchSizeCounter_tDBOutput_2 > 0 ){
                        try {
                            tmp_batchUpdateCount_tDBOutput_2 = pstmt_tDBOutput_2.getUpdateCount();
                        }catch (java.sql.SQLException e){

                        }
                        tmp_batchUpdateCount_tDBOutput_2 = tmp_batchUpdateCount_tDBOutput_2 > countSum_tDBOutput_2 ? tmp_batchUpdateCount_tDBOutput_2 : countSum_tDBOutput_2;
                            insertedCount_tDBOutput_2 += tmp_batchUpdateCount_tDBOutput_2;
                    }
        if(pstmt_tDBOutput_2 != null) {
            pstmt_tDBOutput_2.close();
            resourceMap.remove("pstmt_tDBOutput_2");
        }
    resourceMap.put("statementClosed_tDBOutput_2", true);

	int rejectedCount_tDBOutput_2 = 0;
	nb_line_deleted_tDBOutput_2=nb_line_deleted_tDBOutput_2+ deletedCount_tDBOutput_2;
	nb_line_update_tDBOutput_2=nb_line_update_tDBOutput_2 + updatedCount_tDBOutput_2;
	nb_line_inserted_tDBOutput_2=nb_line_inserted_tDBOutput_2 + insertedCount_tDBOutput_2;
	nb_line_rejected_tDBOutput_2=nb_line_rejected_tDBOutput_2 + rejectedCount_tDBOutput_2;
	
        globalMap.put("tDBOutput_2_NB_LINE",nb_line_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_UPDATED",nb_line_update_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_DELETED",nb_line_deleted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_2);
    
	


			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("row2"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tDBOutput_2", true);
end_Hash.put("tDBOutput_2", System.currentTimeMillis());




/**
 * [tDBOutput_2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 finally ] stop
 */

	
	/**
	 * [tDBOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	



    if (resourceMap.get("statementClosed_tDBOutput_2") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_2 = null;
                if ((pstmtToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_2")) != null) {
                    pstmtToClose_tDBOutput_2.close();
                }
    }
 



/**
 * [tDBOutput_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}
	

public void tDBConnection_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBConnection_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDBConnection_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBConnection_2", false);
		start_Hash.put("tDBConnection_2", System.currentTimeMillis());
		
	
	currentComponent="tDBConnection_2";

	
		int tos_count_tDBConnection_2 = 0;
		
	

			    
		    String url_tDBConnection_2 = "jdbc:sqlserver://" + "dmpus.vinceredev.com" ;
		String port_tDBConnection_2 = "1433";
		String dbname_tDBConnection_2 = "mh2484" ;
    	if (!"".equals(port_tDBConnection_2)) {
    		url_tDBConnection_2 += ":" + "1433";
    	}
    	if (!"".equals(dbname_tDBConnection_2)) {
    				    
		    	url_tDBConnection_2 += ";databaseName=" + "mh2484"; 
    	}
		url_tDBConnection_2 += ";appName=" + projectName + ";" + "";  
		String dbUser_tDBConnection_2 = "sa";
		
		
			 
	final String decryptedPassword_tDBConnection_2 = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[LlxjOZ9VCC2aAeOBSrbJug==]");
			String dbPwd_tDBConnection_2 = decryptedPassword_tDBConnection_2;
		
	java.sql.Connection conn_tDBConnection_2 = null;
	
		
			String driverClass_tDBConnection_2 = "com.microsoft.sqlserver.jdbc.SQLServerDriver";
			java.lang.Class jdbcclazz_tDBConnection_2 = java.lang.Class.forName(driverClass_tDBConnection_2);
		
				conn_tDBConnection_2 = java.sql.DriverManager.getConnection(url_tDBConnection_2,dbUser_tDBConnection_2,dbPwd_tDBConnection_2);

		globalMap.put("conn_tDBConnection_2", conn_tDBConnection_2);
	if (null != conn_tDBConnection_2) {
		
			conn_tDBConnection_2.setAutoCommit(false);
	}

	globalMap.put("dbschema_tDBConnection_2", "");

	globalMap.put("db_tDBConnection_2",  "mh2484");

	globalMap.put("conn_tDBConnection_2",conn_tDBConnection_2);
	
	globalMap.put("shareIdentitySetting_tDBConnection_2",  false);

 



/**
 * [tDBConnection_2 begin ] stop
 */
	
	/**
	 * [tDBConnection_2 main ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";

	

 


	tos_count_tDBConnection_2++;

/**
 * [tDBConnection_2 main ] stop
 */
	
	/**
	 * [tDBConnection_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";

	

 



/**
 * [tDBConnection_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBConnection_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";

	

 



/**
 * [tDBConnection_2 process_data_end ] stop
 */
	
	/**
	 * [tDBConnection_2 end ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";

	

 

ok_Hash.put("tDBConnection_2", true);
end_Hash.put("tDBConnection_2", System.currentTimeMillis());




/**
 * [tDBConnection_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBConnection_2 finally ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";

	

 



/**
 * [tDBConnection_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBConnection_2_SUBPROCESS_STATE", 1);
	}
	

public void tDBConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDBConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBConnection_1", false);
		start_Hash.put("tDBConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tDBConnection_1";

	
		int tos_count_tDBConnection_1 = 0;
		


	
		String url_tDBConnection_1 = "jdbc:sqlite:" + "/" + "/Users/tungnguyen/Documents/client_dbs/garrision.db"; 
		String dbUser_tDBConnection_1 = null;
		
		
			String dbPwd_tDBConnection_1 = null;
		
	java.sql.Connection conn_tDBConnection_1 = null;
	
					String driverClass_tDBConnection_1 = "org.sqlite.JDBC";
			java.lang.Class jdbcclazz_tDBConnection_1 = java.lang.Class.forName(driverClass_tDBConnection_1);
		
		conn_tDBConnection_1 = java.sql.DriverManager.getConnection(url_tDBConnection_1);

		globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);
	if (null != conn_tDBConnection_1) {
		
			conn_tDBConnection_1.setAutoCommit(true);
	}
	
	globalMap.put("conn_" + "tDBConnection_1", conn_tDBConnection_1);

 



/**
 * [tDBConnection_1 begin ] stop
 */
	
	/**
	 * [tDBConnection_1 main ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 


	tos_count_tDBConnection_1++;

/**
 * [tDBConnection_1 main ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tDBConnection_1 end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 

ok_Hash.put("tDBConnection_1", true);
end_Hash.put("tDBConnection_1", System.currentTimeMillis());




/**
 * [tDBConnection_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 1);
	}
	


public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_VINCERE_ETL_garrison_gen_data_company = new byte[0];
    static byte[] commonByteArray_VINCERE_ETL_garrison_gen_data_company = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String company_externalid;

				public String getCompany_externalid () {
					return this.company_externalid;
				}
				
			    public String main_phone;

				public String getMain_phone () {
					return this.main_phone;
				}
				
			    public String phone2;

				public String getPhone2 () {
					return this.phone2;
				}
				
			    public String phone3;

				public String getPhone3 () {
					return this.phone3;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.company_externalid == null) ? 0 : this.company_externalid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row3Struct other = (row3Struct) obj;
		
						if (this.company_externalid == null) {
							if (other.company_externalid != null)
								return false;
						
						} else if (!this.company_externalid.equals(other.company_externalid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row3Struct other) {

		other.company_externalid = this.company_externalid;
	            other.main_phone = this.main_phone;
	            other.phone2 = this.phone2;
	            other.phone3 = this.phone3;
	            
	}

	public void copyKeysDataTo(row3Struct other) {

		other.company_externalid = this.company_externalid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VINCERE_ETL_garrison_gen_data_company.length) {
				if(length < 1024 && commonByteArray_VINCERE_ETL_garrison_gen_data_company.length == 0) {
   					commonByteArray_VINCERE_ETL_garrison_gen_data_company = new byte[1024];
				} else {
   					commonByteArray_VINCERE_ETL_garrison_gen_data_company = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_VINCERE_ETL_garrison_gen_data_company, 0, length);
			strReturn = new String(commonByteArray_VINCERE_ETL_garrison_gen_data_company, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_VINCERE_ETL_garrison_gen_data_company) {

        	try {

        		int length = 0;
		
					this.company_externalid = readString(dis);
					
					this.main_phone = readString(dis);
					
					this.phone2 = readString(dis);
					
					this.phone3 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.company_externalid,dos);
					
					// String
				
						writeString(this.main_phone,dos);
					
					// String
				
						writeString(this.phone2,dos);
					
					// String
				
						writeString(this.phone3,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("company_externalid="+company_externalid);
		sb.append(",main_phone="+main_phone);
		sb.append(",phone2="+phone2);
		sb.append(",phone3="+phone3);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.company_externalid, other.company_externalid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row3Struct row3 = new row3Struct();




	
	/**
	 * [tDBOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_3", false);
		start_Hash.put("tDBOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_3";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("row3"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tDBOutput_3 = 0;
		
	




int nb_line_tDBOutput_3 = 0;
int nb_line_update_tDBOutput_3 = 0;
int nb_line_inserted_tDBOutput_3 = 0;
int nb_line_deleted_tDBOutput_3 = 0;
int nb_line_rejected_tDBOutput_3 = 0;

int deletedCount_tDBOutput_3=0;
int updatedCount_tDBOutput_3=0;
int insertedCount_tDBOutput_3=0;

String tableName_tDBOutput_3 = "company_phone";
boolean whetherReject_tDBOutput_3 = false;

       int batchSize_tDBOutput_3 = 10000;
       int batchSizeCounter_tDBOutput_3=0;
       int tmp_batchUpdateCount_tDBOutput_3 = 0;


java.sql.Connection conn_tDBOutput_3 = null;
    conn_tDBOutput_3 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");

            java.sql.DatabaseMetaData dbMetaData_tDBOutput_3 = conn_tDBOutput_3.getMetaData();
            boolean whetherExist_tDBOutput_3 = false;
            try (java.sql.ResultSet rsTable_tDBOutput_3 = dbMetaData_tDBOutput_3.getTables(null, null, null, new String[]{"TABLE"})) {
                while(rsTable_tDBOutput_3.next()) {
                    String table_tDBOutput_3 = rsTable_tDBOutput_3.getString("TABLE_NAME");
                    if(table_tDBOutput_3.equalsIgnoreCase("company_phone")) {
                        whetherExist_tDBOutput_3 = true;
                        break;
                    }
                }
            }
                if(whetherExist_tDBOutput_3) {
                    try (java.sql.Statement stmtDrop_tDBOutput_3 = conn_tDBOutput_3.createStatement()) {
                        stmtDrop_tDBOutput_3.execute("DROP TABLE \"" + tableName_tDBOutput_3 + "\"");
                    }
                }
                try (java.sql.Statement stmtCreate_tDBOutput_3 = conn_tDBOutput_3.createStatement()) {
                    stmtCreate_tDBOutput_3.execute("CREATE TABLE \"" + tableName_tDBOutput_3 + "\"(\"company_externalid\" VARCHAR(13)   not null ,\"main_phone\" VARCHAR(63)   not null ,\"phone2\" VARCHAR(63)   not null ,\"phone3\" VARCHAR(63)   not null ,primary key(\"company_externalid\"))");
                }
	    String insert_tDBOutput_3 = "INSERT INTO \"" + "company_phone" + "\" (\"company_externalid\",\"main_phone\",\"phone2\",\"phone3\") VALUES (?,?,?,?)";
	    java.sql.PreparedStatement pstmt_tDBOutput_3 = conn_tDBOutput_3.prepareStatement(insert_tDBOutput_3);
	    resourceMap.put("pstmt_tDBOutput_3", pstmt_tDBOutput_3);
	    

 



/**
 * [tDBOutput_3 begin ] stop
 */



	
	/**
	 * [tDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_1", false);
		start_Hash.put("tDBInput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_1";

	
		int tos_count_tDBInput_1 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_1 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_1 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_1  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_1, talendToDBArray_tDBInput_1); 
		    int nb_line_tDBInput_1 = 0;
		    java.sql.Connection conn_tDBInput_1 = null;
		        conn_tDBInput_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
			String dbschema_tDBInput_1 = (String)globalMap.get("dbschema_tDBConnection_2");
		    
			java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

		    String dbquery_tDBInput_1 = "\nselect \nconcat('', c.id) as company_externalid\n, concat(c.phone_area, ' ', c.phone) as main_phone\n, concat(c.phone2_ar"
+"ea, ' ', c.phone2) as phone2\n, concat(c.phone3_area, ' ', c.phone3) as phone3\nfrom company c \nwhere DeleteFlag=0\n";
			

            	globalMap.put("tDBInput_1_QUERY",dbquery_tDBInput_1);
		    java.sql.ResultSet rs_tDBInput_1 = null;

		    try {
		    	rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
		    	int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

		    String tmpContent_tDBInput_1 = null;
		    
		    
		    while (rs_tDBInput_1.next()) {
		        nb_line_tDBInput_1++;
		        
							if(colQtyInRs_tDBInput_1 < 1) {
								row3.company_externalid = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(1);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
            		row3.company_externalid = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row3.company_externalid = tmpContent_tDBInput_1;
                }
            } else {
                row3.company_externalid = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 2) {
								row3.main_phone = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(2);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
            		row3.main_phone = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row3.main_phone = tmpContent_tDBInput_1;
                }
            } else {
                row3.main_phone = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 3) {
								row3.phone2 = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(3);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(3).toUpperCase(java.util.Locale.ENGLISH))) {
            		row3.phone2 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row3.phone2 = tmpContent_tDBInput_1;
                }
            } else {
                row3.phone2 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 4) {
								row3.phone3 = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(4);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(4).toUpperCase(java.util.Locale.ENGLISH))) {
            		row3.phone3 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row3.phone3 = tmpContent_tDBInput_1;
                }
            } else {
                row3.phone3 = null;
            }
		                    }
					





 



/**
 * [tDBInput_1 begin ] stop
 */
	
	/**
	 * [tDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 


	tos_count_tDBInput_1++;

/**
 * [tDBInput_1 main ] stop
 */
	
	/**
	 * [tDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tDBOutput_3 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	

			//row3
			//row3


			
				
				if(execStat){
					runStat.updateStatOnConnection("row3"+iterateId,1, 1);
				}
				
				
				
			

		
	



        whetherReject_tDBOutput_3 = false;
                    if(row3.company_externalid == null) {
pstmt_tDBOutput_3.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(1, row3.company_externalid);
}

                    if(row3.main_phone == null) {
pstmt_tDBOutput_3.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(2, row3.main_phone);
}

                    if(row3.phone2 == null) {
pstmt_tDBOutput_3.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(3, row3.phone2);
}

                    if(row3.phone3 == null) {
pstmt_tDBOutput_3.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(4, row3.phone3);
}


                       pstmt_tDBOutput_3.addBatch();
                       batchSizeCounter_tDBOutput_3++;
                       nb_line_tDBOutput_3++;
                if ((batchSize_tDBOutput_3 > 0) && (batchSize_tDBOutput_3 <= batchSizeCounter_tDBOutput_3)) {
                    int[] status_tDBOutput_3 = null;
                    int countSum_tDBOutput_3 = 0;
                    try {
                        batchSizeCounter_tDBOutput_3 = 0;
                        status_tDBOutput_3 = pstmt_tDBOutput_3.executeBatch();
                        for(int countEach_tDBOutput_3: status_tDBOutput_3) {
                            countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
                        }
                    }catch (java.sql.BatchUpdateException e){
                        for(int countEach_tDBOutput_3: e.getUpdateCounts()) {
                            countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
                        }
                        System.err.println(e.getMessage());
                    }
                    try {
                        tmp_batchUpdateCount_tDBOutput_3 = pstmt_tDBOutput_3.getUpdateCount();
                    }catch (java.sql.SQLException e){
                        System.err.println(e.getMessage());
                    }
                    tmp_batchUpdateCount_tDBOutput_3 = tmp_batchUpdateCount_tDBOutput_3 > countSum_tDBOutput_3 ? tmp_batchUpdateCount_tDBOutput_3 : countSum_tDBOutput_3;
                        insertedCount_tDBOutput_3 += tmp_batchUpdateCount_tDBOutput_3;
               }

 


	tos_count_tDBOutput_3++;

/**
 * [tDBOutput_3 main ] stop
 */
	
	/**
	 * [tDBOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	

 



/**
 * [tDBOutput_3 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	

 



/**
 * [tDBOutput_3 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

	}
}finally{
	if (rs_tDBInput_1 != null) {
		rs_tDBInput_1.close();
	}
	if (stmt_tDBInput_1 != null) {
		stmt_tDBInput_1.close();
	}
}
globalMap.put("tDBInput_1_NB_LINE",nb_line_tDBInput_1);

 

ok_Hash.put("tDBInput_1", true);
end_Hash.put("tDBInput_1", System.currentTimeMillis());




/**
 * [tDBInput_1 end ] stop
 */

	
	/**
	 * [tDBOutput_3 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	




                    int[] status_tDBOutput_3 = null;
                    int countSum_tDBOutput_3 = 0;
                    try {
                        if(pstmt_tDBOutput_3!=null && batchSizeCounter_tDBOutput_3 > 0 ){
                            status_tDBOutput_3 = pstmt_tDBOutput_3.executeBatch();
                            for(int countEach_tDBOutput_3: status_tDBOutput_3) {
                                countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
                            }
                        }
                    }catch (java.sql.BatchUpdateException e){
                        for(int countEach_tDBOutput_3: e.getUpdateCounts()) {
                            countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
                        }
                        System.err.println(e.getMessage());
                    }
                    if(pstmt_tDBOutput_3!=null && batchSizeCounter_tDBOutput_3 > 0 ){
                        try {
                            tmp_batchUpdateCount_tDBOutput_3 = pstmt_tDBOutput_3.getUpdateCount();
                        }catch (java.sql.SQLException e){

                        }
                        tmp_batchUpdateCount_tDBOutput_3 = tmp_batchUpdateCount_tDBOutput_3 > countSum_tDBOutput_3 ? tmp_batchUpdateCount_tDBOutput_3 : countSum_tDBOutput_3;
                            insertedCount_tDBOutput_3 += tmp_batchUpdateCount_tDBOutput_3;
                    }
        if(pstmt_tDBOutput_3 != null) {
            pstmt_tDBOutput_3.close();
            resourceMap.remove("pstmt_tDBOutput_3");
        }
    resourceMap.put("statementClosed_tDBOutput_3", true);

	int rejectedCount_tDBOutput_3 = 0;
	nb_line_deleted_tDBOutput_3=nb_line_deleted_tDBOutput_3+ deletedCount_tDBOutput_3;
	nb_line_update_tDBOutput_3=nb_line_update_tDBOutput_3 + updatedCount_tDBOutput_3;
	nb_line_inserted_tDBOutput_3=nb_line_inserted_tDBOutput_3 + insertedCount_tDBOutput_3;
	nb_line_rejected_tDBOutput_3=nb_line_rejected_tDBOutput_3 + rejectedCount_tDBOutput_3;
	
        globalMap.put("tDBOutput_3_NB_LINE",nb_line_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_UPDATED",nb_line_update_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_DELETED",nb_line_deleted_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_3);
    
	


			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("row3"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tDBOutput_3", true);
end_Hash.put("tDBOutput_3", System.currentTimeMillis());




/**
 * [tDBOutput_3 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 finally ] stop
 */

	
	/**
	 * [tDBOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	



    if (resourceMap.get("statementClosed_tDBOutput_3") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_3 = null;
                if ((pstmtToClose_tDBOutput_3 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_3")) != null) {
                    pstmtToClose_tDBOutput_3.close();
                }
    }
 



/**
 * [tDBOutput_3 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_VINCERE_ETL_garrison_gen_data_company = new byte[0];
    static byte[] commonByteArray_VINCERE_ETL_garrison_gen_data_company = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String company_externalid;

				public String getCompany_externalid () {
					return this.company_externalid;
				}
				
			    public String company_description;

				public String getCompany_description () {
					return this.company_description;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.company_externalid == null) ? 0 : this.company_externalid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row4Struct other = (row4Struct) obj;
		
						if (this.company_externalid == null) {
							if (other.company_externalid != null)
								return false;
						
						} else if (!this.company_externalid.equals(other.company_externalid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row4Struct other) {

		other.company_externalid = this.company_externalid;
	            other.company_description = this.company_description;
	            
	}

	public void copyKeysDataTo(row4Struct other) {

		other.company_externalid = this.company_externalid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VINCERE_ETL_garrison_gen_data_company.length) {
				if(length < 1024 && commonByteArray_VINCERE_ETL_garrison_gen_data_company.length == 0) {
   					commonByteArray_VINCERE_ETL_garrison_gen_data_company = new byte[1024];
				} else {
   					commonByteArray_VINCERE_ETL_garrison_gen_data_company = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_VINCERE_ETL_garrison_gen_data_company, 0, length);
			strReturn = new String(commonByteArray_VINCERE_ETL_garrison_gen_data_company, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_VINCERE_ETL_garrison_gen_data_company) {

        	try {

        		int length = 0;
		
					this.company_externalid = readString(dis);
					
					this.company_description = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.company_externalid,dos);
					
					// String
				
						writeString(this.company_description,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("company_externalid="+company_externalid);
		sb.append(",company_description="+company_description);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.company_externalid, other.company_externalid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row4Struct row4 = new row4Struct();




	
	/**
	 * [tDBOutput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_4", false);
		start_Hash.put("tDBOutput_4", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_4";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("row4"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tDBOutput_4 = 0;
		
	




int nb_line_tDBOutput_4 = 0;
int nb_line_update_tDBOutput_4 = 0;
int nb_line_inserted_tDBOutput_4 = 0;
int nb_line_deleted_tDBOutput_4 = 0;
int nb_line_rejected_tDBOutput_4 = 0;

int deletedCount_tDBOutput_4=0;
int updatedCount_tDBOutput_4=0;
int insertedCount_tDBOutput_4=0;

String tableName_tDBOutput_4 = "company_description";
boolean whetherReject_tDBOutput_4 = false;

       int batchSize_tDBOutput_4 = 10000;
       int batchSizeCounter_tDBOutput_4=0;
       int tmp_batchUpdateCount_tDBOutput_4 = 0;


java.sql.Connection conn_tDBOutput_4 = null;
    conn_tDBOutput_4 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");

            java.sql.DatabaseMetaData dbMetaData_tDBOutput_4 = conn_tDBOutput_4.getMetaData();
            boolean whetherExist_tDBOutput_4 = false;
            try (java.sql.ResultSet rsTable_tDBOutput_4 = dbMetaData_tDBOutput_4.getTables(null, null, null, new String[]{"TABLE"})) {
                while(rsTable_tDBOutput_4.next()) {
                    String table_tDBOutput_4 = rsTable_tDBOutput_4.getString("TABLE_NAME");
                    if(table_tDBOutput_4.equalsIgnoreCase("company_description")) {
                        whetherExist_tDBOutput_4 = true;
                        break;
                    }
                }
            }
                if(whetherExist_tDBOutput_4) {
                    try (java.sql.Statement stmtDrop_tDBOutput_4 = conn_tDBOutput_4.createStatement()) {
                        stmtDrop_tDBOutput_4.execute("DROP TABLE \"" + tableName_tDBOutput_4 + "\"");
                    }
                }
                try (java.sql.Statement stmtCreate_tDBOutput_4 = conn_tDBOutput_4.createStatement()) {
                    stmtCreate_tDBOutput_4.execute("CREATE TABLE \"" + tableName_tDBOutput_4 + "\"(\"company_externalid\" VARCHAR(13)   not null ,\"company_description\" VARCHAR(1073741823)  ,primary key(\"company_externalid\"))");
                }
	    String insert_tDBOutput_4 = "INSERT INTO \"" + "company_description" + "\" (\"company_externalid\",\"company_description\") VALUES (?,?)";
	    java.sql.PreparedStatement pstmt_tDBOutput_4 = conn_tDBOutput_4.prepareStatement(insert_tDBOutput_4);
	    resourceMap.put("pstmt_tDBOutput_4", pstmt_tDBOutput_4);
	    

 



/**
 * [tDBOutput_4 begin ] stop
 */



	
	/**
	 * [tDBInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_4", false);
		start_Hash.put("tDBInput_4", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_4";

	
		int tos_count_tDBInput_4 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_4 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_4 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_4  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_4, talendToDBArray_tDBInput_4); 
		    int nb_line_tDBInput_4 = 0;
		    java.sql.Connection conn_tDBInput_4 = null;
		        conn_tDBInput_4 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
			String dbschema_tDBInput_4 = (String)globalMap.get("dbschema_tDBConnection_2");
		    
			java.sql.Statement stmt_tDBInput_4 = conn_tDBInput_4.createStatement();

		    String dbquery_tDBInput_4 = "\nselect \nconcat('', c.id) as company_externalid\n, c.descript as company_description\nfrom company c \nwhere DeleteFlag=0\n"
+"";
			

            	globalMap.put("tDBInput_4_QUERY",dbquery_tDBInput_4);
		    java.sql.ResultSet rs_tDBInput_4 = null;

		    try {
		    	rs_tDBInput_4 = stmt_tDBInput_4.executeQuery(dbquery_tDBInput_4);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_4 = rs_tDBInput_4.getMetaData();
		    	int colQtyInRs_tDBInput_4 = rsmd_tDBInput_4.getColumnCount();

		    String tmpContent_tDBInput_4 = null;
		    
		    
		    while (rs_tDBInput_4.next()) {
		        nb_line_tDBInput_4++;
		        
							if(colQtyInRs_tDBInput_4 < 1) {
								row4.company_externalid = null;
							} else {
	                         		
           		tmpContent_tDBInput_4 = rs_tDBInput_4.getString(1);
            if(tmpContent_tDBInput_4 != null) {
            	if (talendToDBList_tDBInput_4 .contains(rsmd_tDBInput_4.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
            		row4.company_externalid = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
            	} else {
                	row4.company_externalid = tmpContent_tDBInput_4.trim();
                }
            } else {
                row4.company_externalid = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 2) {
								row4.company_description = null;
							} else {
	                         		
           		tmpContent_tDBInput_4 = rs_tDBInput_4.getString(2);
            if(tmpContent_tDBInput_4 != null) {
            	if (talendToDBList_tDBInput_4 .contains(rsmd_tDBInput_4.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
            		row4.company_description = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
            	} else {
                	row4.company_description = tmpContent_tDBInput_4.trim();
                }
            } else {
                row4.company_description = null;
            }
		                    }
					





 



/**
 * [tDBInput_4 begin ] stop
 */
	
	/**
	 * [tDBInput_4 main ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 


	tos_count_tDBInput_4++;

/**
 * [tDBInput_4 main ] stop
 */
	
	/**
	 * [tDBInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tDBOutput_4 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	

			//row4
			//row4


			
				
				if(execStat){
					runStat.updateStatOnConnection("row4"+iterateId,1, 1);
				}
				
				
				
			

		
	



        whetherReject_tDBOutput_4 = false;
                    if(row4.company_externalid == null) {
pstmt_tDBOutput_4.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(1, row4.company_externalid);
}

                    if(row4.company_description == null) {
pstmt_tDBOutput_4.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(2, row4.company_description);
}


                       pstmt_tDBOutput_4.addBatch();
                       batchSizeCounter_tDBOutput_4++;
                       nb_line_tDBOutput_4++;
                if ((batchSize_tDBOutput_4 > 0) && (batchSize_tDBOutput_4 <= batchSizeCounter_tDBOutput_4)) {
                    int[] status_tDBOutput_4 = null;
                    int countSum_tDBOutput_4 = 0;
                    try {
                        batchSizeCounter_tDBOutput_4 = 0;
                        status_tDBOutput_4 = pstmt_tDBOutput_4.executeBatch();
                        for(int countEach_tDBOutput_4: status_tDBOutput_4) {
                            countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
                        }
                    }catch (java.sql.BatchUpdateException e){
                        for(int countEach_tDBOutput_4: e.getUpdateCounts()) {
                            countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
                        }
                        System.err.println(e.getMessage());
                    }
                    try {
                        tmp_batchUpdateCount_tDBOutput_4 = pstmt_tDBOutput_4.getUpdateCount();
                    }catch (java.sql.SQLException e){
                        System.err.println(e.getMessage());
                    }
                    tmp_batchUpdateCount_tDBOutput_4 = tmp_batchUpdateCount_tDBOutput_4 > countSum_tDBOutput_4 ? tmp_batchUpdateCount_tDBOutput_4 : countSum_tDBOutput_4;
                        insertedCount_tDBOutput_4 += tmp_batchUpdateCount_tDBOutput_4;
               }

 


	tos_count_tDBOutput_4++;

/**
 * [tDBOutput_4 main ] stop
 */
	
	/**
	 * [tDBOutput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	

 



/**
 * [tDBOutput_4 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	

 



/**
 * [tDBOutput_4 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_4 end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

	}
}finally{
	if (rs_tDBInput_4 != null) {
		rs_tDBInput_4.close();
	}
	if (stmt_tDBInput_4 != null) {
		stmt_tDBInput_4.close();
	}
}
globalMap.put("tDBInput_4_NB_LINE",nb_line_tDBInput_4);

 

ok_Hash.put("tDBInput_4", true);
end_Hash.put("tDBInput_4", System.currentTimeMillis());




/**
 * [tDBInput_4 end ] stop
 */

	
	/**
	 * [tDBOutput_4 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	




                    int[] status_tDBOutput_4 = null;
                    int countSum_tDBOutput_4 = 0;
                    try {
                        if(pstmt_tDBOutput_4!=null && batchSizeCounter_tDBOutput_4 > 0 ){
                            status_tDBOutput_4 = pstmt_tDBOutput_4.executeBatch();
                            for(int countEach_tDBOutput_4: status_tDBOutput_4) {
                                countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
                            }
                        }
                    }catch (java.sql.BatchUpdateException e){
                        for(int countEach_tDBOutput_4: e.getUpdateCounts()) {
                            countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
                        }
                        System.err.println(e.getMessage());
                    }
                    if(pstmt_tDBOutput_4!=null && batchSizeCounter_tDBOutput_4 > 0 ){
                        try {
                            tmp_batchUpdateCount_tDBOutput_4 = pstmt_tDBOutput_4.getUpdateCount();
                        }catch (java.sql.SQLException e){

                        }
                        tmp_batchUpdateCount_tDBOutput_4 = tmp_batchUpdateCount_tDBOutput_4 > countSum_tDBOutput_4 ? tmp_batchUpdateCount_tDBOutput_4 : countSum_tDBOutput_4;
                            insertedCount_tDBOutput_4 += tmp_batchUpdateCount_tDBOutput_4;
                    }
        if(pstmt_tDBOutput_4 != null) {
            pstmt_tDBOutput_4.close();
            resourceMap.remove("pstmt_tDBOutput_4");
        }
    resourceMap.put("statementClosed_tDBOutput_4", true);

	int rejectedCount_tDBOutput_4 = 0;
	nb_line_deleted_tDBOutput_4=nb_line_deleted_tDBOutput_4+ deletedCount_tDBOutput_4;
	nb_line_update_tDBOutput_4=nb_line_update_tDBOutput_4 + updatedCount_tDBOutput_4;
	nb_line_inserted_tDBOutput_4=nb_line_inserted_tDBOutput_4 + insertedCount_tDBOutput_4;
	nb_line_rejected_tDBOutput_4=nb_line_rejected_tDBOutput_4 + rejectedCount_tDBOutput_4;
	
        globalMap.put("tDBOutput_4_NB_LINE",nb_line_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_UPDATED",nb_line_update_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_DELETED",nb_line_deleted_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_4);
    
	


			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("row4"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tDBOutput_4", true);
end_Hash.put("tDBOutput_4", System.currentTimeMillis());




/**
 * [tDBOutput_4 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_4 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 finally ] stop
 */

	
	/**
	 * [tDBOutput_4 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	



    if (resourceMap.get("statementClosed_tDBOutput_4") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_4 = null;
                if ((pstmtToClose_tDBOutput_4 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_4")) != null) {
                    pstmtToClose_tDBOutput_4.close();
                }
    }
 



/**
 * [tDBOutput_4 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 1);
	}
	


public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_VINCERE_ETL_garrison_gen_data_company = new byte[0];
    static byte[] commonByteArray_VINCERE_ETL_garrison_gen_data_company = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String company_externalid;

				public String getCompany_externalid () {
					return this.company_externalid;
				}
				
			    public String company_currency;

				public String getCompany_currency () {
					return this.company_currency;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.company_externalid == null) ? 0 : this.company_externalid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row5Struct other = (row5Struct) obj;
		
						if (this.company_externalid == null) {
							if (other.company_externalid != null)
								return false;
						
						} else if (!this.company_externalid.equals(other.company_externalid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row5Struct other) {

		other.company_externalid = this.company_externalid;
	            other.company_currency = this.company_currency;
	            
	}

	public void copyKeysDataTo(row5Struct other) {

		other.company_externalid = this.company_externalid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VINCERE_ETL_garrison_gen_data_company.length) {
				if(length < 1024 && commonByteArray_VINCERE_ETL_garrison_gen_data_company.length == 0) {
   					commonByteArray_VINCERE_ETL_garrison_gen_data_company = new byte[1024];
				} else {
   					commonByteArray_VINCERE_ETL_garrison_gen_data_company = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_VINCERE_ETL_garrison_gen_data_company, 0, length);
			strReturn = new String(commonByteArray_VINCERE_ETL_garrison_gen_data_company, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_VINCERE_ETL_garrison_gen_data_company) {

        	try {

        		int length = 0;
		
					this.company_externalid = readString(dis);
					
					this.company_currency = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.company_externalid,dos);
					
					// String
				
						writeString(this.company_currency,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("company_externalid="+company_externalid);
		sb.append(",company_currency="+company_currency);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.company_externalid, other.company_externalid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row5Struct row5 = new row5Struct();




	
	/**
	 * [tDBOutput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_5", false);
		start_Hash.put("tDBOutput_5", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_5";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("row5"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tDBOutput_5 = 0;
		
	




int nb_line_tDBOutput_5 = 0;
int nb_line_update_tDBOutput_5 = 0;
int nb_line_inserted_tDBOutput_5 = 0;
int nb_line_deleted_tDBOutput_5 = 0;
int nb_line_rejected_tDBOutput_5 = 0;

int deletedCount_tDBOutput_5=0;
int updatedCount_tDBOutput_5=0;
int insertedCount_tDBOutput_5=0;

String tableName_tDBOutput_5 = "company_currency";
boolean whetherReject_tDBOutput_5 = false;

       int batchSize_tDBOutput_5 = 10000;
       int batchSizeCounter_tDBOutput_5=0;
       int tmp_batchUpdateCount_tDBOutput_5 = 0;


java.sql.Connection conn_tDBOutput_5 = null;
    conn_tDBOutput_5 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");

            java.sql.DatabaseMetaData dbMetaData_tDBOutput_5 = conn_tDBOutput_5.getMetaData();
            boolean whetherExist_tDBOutput_5 = false;
            try (java.sql.ResultSet rsTable_tDBOutput_5 = dbMetaData_tDBOutput_5.getTables(null, null, null, new String[]{"TABLE"})) {
                while(rsTable_tDBOutput_5.next()) {
                    String table_tDBOutput_5 = rsTable_tDBOutput_5.getString("TABLE_NAME");
                    if(table_tDBOutput_5.equalsIgnoreCase("company_currency")) {
                        whetherExist_tDBOutput_5 = true;
                        break;
                    }
                }
            }
                if(whetherExist_tDBOutput_5) {
                    try (java.sql.Statement stmtDrop_tDBOutput_5 = conn_tDBOutput_5.createStatement()) {
                        stmtDrop_tDBOutput_5.execute("DROP TABLE \"" + tableName_tDBOutput_5 + "\"");
                    }
                }
                try (java.sql.Statement stmtCreate_tDBOutput_5 = conn_tDBOutput_5.createStatement()) {
                    stmtCreate_tDBOutput_5.execute("CREATE TABLE \"" + tableName_tDBOutput_5 + "\"(\"company_externalid\" VARCHAR(13)   not null ,\"company_currency\" VARCHAR(10)  ,primary key(\"company_externalid\"))");
                }
	    String insert_tDBOutput_5 = "INSERT INTO \"" + "company_currency" + "\" (\"company_externalid\",\"company_currency\") VALUES (?,?)";
	    java.sql.PreparedStatement pstmt_tDBOutput_5 = conn_tDBOutput_5.prepareStatement(insert_tDBOutput_5);
	    resourceMap.put("pstmt_tDBOutput_5", pstmt_tDBOutput_5);
	    

 



/**
 * [tDBOutput_5 begin ] stop
 */



	
	/**
	 * [tDBInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_5", false);
		start_Hash.put("tDBInput_5", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_5";

	
		int tos_count_tDBInput_5 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_5 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_5 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_5  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_5, talendToDBArray_tDBInput_5); 
		    int nb_line_tDBInput_5 = 0;
		    java.sql.Connection conn_tDBInput_5 = null;
		        conn_tDBInput_5 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
			String dbschema_tDBInput_5 = (String)globalMap.get("dbschema_tDBConnection_2");
		    
			java.sql.Statement stmt_tDBInput_5 = conn_tDBInput_5.createStatement();

		    String dbquery_tDBInput_5 = "\nselect \nconcat('', c.id) as company_externalid\n, c.FeeCurrency as company_currency\nfrom company c \nwhere DeleteFlag=0\n"
+"";
			

            	globalMap.put("tDBInput_5_QUERY",dbquery_tDBInput_5);
		    java.sql.ResultSet rs_tDBInput_5 = null;

		    try {
		    	rs_tDBInput_5 = stmt_tDBInput_5.executeQuery(dbquery_tDBInput_5);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_5 = rs_tDBInput_5.getMetaData();
		    	int colQtyInRs_tDBInput_5 = rsmd_tDBInput_5.getColumnCount();

		    String tmpContent_tDBInput_5 = null;
		    
		    
		    while (rs_tDBInput_5.next()) {
		        nb_line_tDBInput_5++;
		        
							if(colQtyInRs_tDBInput_5 < 1) {
								row5.company_externalid = null;
							} else {
	                         		
           		tmpContent_tDBInput_5 = rs_tDBInput_5.getString(1);
            if(tmpContent_tDBInput_5 != null) {
            	if (talendToDBList_tDBInput_5 .contains(rsmd_tDBInput_5.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
            		row5.company_externalid = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
            	} else {
                	row5.company_externalid = tmpContent_tDBInput_5.trim();
                }
            } else {
                row5.company_externalid = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 2) {
								row5.company_currency = null;
							} else {
	                         		
           		tmpContent_tDBInput_5 = rs_tDBInput_5.getString(2);
            if(tmpContent_tDBInput_5 != null) {
            	if (talendToDBList_tDBInput_5 .contains(rsmd_tDBInput_5.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
            		row5.company_currency = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
            	} else {
                	row5.company_currency = tmpContent_tDBInput_5.trim();
                }
            } else {
                row5.company_currency = null;
            }
		                    }
					





 



/**
 * [tDBInput_5 begin ] stop
 */
	
	/**
	 * [tDBInput_5 main ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 


	tos_count_tDBInput_5++;

/**
 * [tDBInput_5 main ] stop
 */
	
	/**
	 * [tDBInput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 process_data_begin ] stop
 */

	
	/**
	 * [tDBOutput_5 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	

			//row5
			//row5


			
				
				if(execStat){
					runStat.updateStatOnConnection("row5"+iterateId,1, 1);
				}
				
				
				
			

		
	



        whetherReject_tDBOutput_5 = false;
                    if(row5.company_externalid == null) {
pstmt_tDBOutput_5.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(1, row5.company_externalid);
}

                    if(row5.company_currency == null) {
pstmt_tDBOutput_5.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(2, row5.company_currency);
}


                       pstmt_tDBOutput_5.addBatch();
                       batchSizeCounter_tDBOutput_5++;
                       nb_line_tDBOutput_5++;
                if ((batchSize_tDBOutput_5 > 0) && (batchSize_tDBOutput_5 <= batchSizeCounter_tDBOutput_5)) {
                    int[] status_tDBOutput_5 = null;
                    int countSum_tDBOutput_5 = 0;
                    try {
                        batchSizeCounter_tDBOutput_5 = 0;
                        status_tDBOutput_5 = pstmt_tDBOutput_5.executeBatch();
                        for(int countEach_tDBOutput_5: status_tDBOutput_5) {
                            countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0 : countEach_tDBOutput_5);
                        }
                    }catch (java.sql.BatchUpdateException e){
                        for(int countEach_tDBOutput_5: e.getUpdateCounts()) {
                            countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0 : countEach_tDBOutput_5);
                        }
                        System.err.println(e.getMessage());
                    }
                    try {
                        tmp_batchUpdateCount_tDBOutput_5 = pstmt_tDBOutput_5.getUpdateCount();
                    }catch (java.sql.SQLException e){
                        System.err.println(e.getMessage());
                    }
                    tmp_batchUpdateCount_tDBOutput_5 = tmp_batchUpdateCount_tDBOutput_5 > countSum_tDBOutput_5 ? tmp_batchUpdateCount_tDBOutput_5 : countSum_tDBOutput_5;
                        insertedCount_tDBOutput_5 += tmp_batchUpdateCount_tDBOutput_5;
               }

 


	tos_count_tDBOutput_5++;

/**
 * [tDBOutput_5 main ] stop
 */
	
	/**
	 * [tDBOutput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	

 



/**
 * [tDBOutput_5 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	

 



/**
 * [tDBOutput_5 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_5 end ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

	}
}finally{
	if (rs_tDBInput_5 != null) {
		rs_tDBInput_5.close();
	}
	if (stmt_tDBInput_5 != null) {
		stmt_tDBInput_5.close();
	}
}
globalMap.put("tDBInput_5_NB_LINE",nb_line_tDBInput_5);

 

ok_Hash.put("tDBInput_5", true);
end_Hash.put("tDBInput_5", System.currentTimeMillis());




/**
 * [tDBInput_5 end ] stop
 */

	
	/**
	 * [tDBOutput_5 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	




                    int[] status_tDBOutput_5 = null;
                    int countSum_tDBOutput_5 = 0;
                    try {
                        if(pstmt_tDBOutput_5!=null && batchSizeCounter_tDBOutput_5 > 0 ){
                            status_tDBOutput_5 = pstmt_tDBOutput_5.executeBatch();
                            for(int countEach_tDBOutput_5: status_tDBOutput_5) {
                                countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0 : countEach_tDBOutput_5);
                            }
                        }
                    }catch (java.sql.BatchUpdateException e){
                        for(int countEach_tDBOutput_5: e.getUpdateCounts()) {
                            countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0 : countEach_tDBOutput_5);
                        }
                        System.err.println(e.getMessage());
                    }
                    if(pstmt_tDBOutput_5!=null && batchSizeCounter_tDBOutput_5 > 0 ){
                        try {
                            tmp_batchUpdateCount_tDBOutput_5 = pstmt_tDBOutput_5.getUpdateCount();
                        }catch (java.sql.SQLException e){

                        }
                        tmp_batchUpdateCount_tDBOutput_5 = tmp_batchUpdateCount_tDBOutput_5 > countSum_tDBOutput_5 ? tmp_batchUpdateCount_tDBOutput_5 : countSum_tDBOutput_5;
                            insertedCount_tDBOutput_5 += tmp_batchUpdateCount_tDBOutput_5;
                    }
        if(pstmt_tDBOutput_5 != null) {
            pstmt_tDBOutput_5.close();
            resourceMap.remove("pstmt_tDBOutput_5");
        }
    resourceMap.put("statementClosed_tDBOutput_5", true);

	int rejectedCount_tDBOutput_5 = 0;
	nb_line_deleted_tDBOutput_5=nb_line_deleted_tDBOutput_5+ deletedCount_tDBOutput_5;
	nb_line_update_tDBOutput_5=nb_line_update_tDBOutput_5 + updatedCount_tDBOutput_5;
	nb_line_inserted_tDBOutput_5=nb_line_inserted_tDBOutput_5 + insertedCount_tDBOutput_5;
	nb_line_rejected_tDBOutput_5=nb_line_rejected_tDBOutput_5 + rejectedCount_tDBOutput_5;
	
        globalMap.put("tDBOutput_5_NB_LINE",nb_line_tDBOutput_5);
        globalMap.put("tDBOutput_5_NB_LINE_UPDATED",nb_line_update_tDBOutput_5);
        globalMap.put("tDBOutput_5_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_5);
        globalMap.put("tDBOutput_5_NB_LINE_DELETED",nb_line_deleted_tDBOutput_5);
        globalMap.put("tDBOutput_5_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_5);
    
	


			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("row5"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tDBOutput_5", true);
end_Hash.put("tDBOutput_5", System.currentTimeMillis());




/**
 * [tDBOutput_5 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_5 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 finally ] stop
 */

	
	/**
	 * [tDBOutput_5 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	



    if (resourceMap.get("statementClosed_tDBOutput_5") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_5 = null;
                if ((pstmtToClose_tDBOutput_5 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_5")) != null) {
                    pstmtToClose_tDBOutput_5.close();
                }
    }
 



/**
 * [tDBOutput_5 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_5_SUBPROCESS_STATE", 1);
	}
	


public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock_VINCERE_ETL_garrison_gen_data_company = new byte[0];
    static byte[] commonByteArray_VINCERE_ETL_garrison_gen_data_company = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String company_externalid;

				public String getCompany_externalid () {
					return this.company_externalid;
				}
				
			    public String company_pipeline_status;

				public String getCompany_pipeline_status () {
					return this.company_pipeline_status;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.company_externalid == null) ? 0 : this.company_externalid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row6Struct other = (row6Struct) obj;
		
						if (this.company_externalid == null) {
							if (other.company_externalid != null)
								return false;
						
						} else if (!this.company_externalid.equals(other.company_externalid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row6Struct other) {

		other.company_externalid = this.company_externalid;
	            other.company_pipeline_status = this.company_pipeline_status;
	            
	}

	public void copyKeysDataTo(row6Struct other) {

		other.company_externalid = this.company_externalid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VINCERE_ETL_garrison_gen_data_company.length) {
				if(length < 1024 && commonByteArray_VINCERE_ETL_garrison_gen_data_company.length == 0) {
   					commonByteArray_VINCERE_ETL_garrison_gen_data_company = new byte[1024];
				} else {
   					commonByteArray_VINCERE_ETL_garrison_gen_data_company = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_VINCERE_ETL_garrison_gen_data_company, 0, length);
			strReturn = new String(commonByteArray_VINCERE_ETL_garrison_gen_data_company, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_VINCERE_ETL_garrison_gen_data_company) {

        	try {

        		int length = 0;
		
					this.company_externalid = readString(dis);
					
					this.company_pipeline_status = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.company_externalid,dos);
					
					// String
				
						writeString(this.company_pipeline_status,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("company_externalid="+company_externalid);
		sb.append(",company_pipeline_status="+company_pipeline_status);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.company_externalid, other.company_externalid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row6Struct row6 = new row6Struct();




	
	/**
	 * [tDBOutput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_6", false);
		start_Hash.put("tDBOutput_6", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_6";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("row6"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tDBOutput_6 = 0;
		
	




int nb_line_tDBOutput_6 = 0;
int nb_line_update_tDBOutput_6 = 0;
int nb_line_inserted_tDBOutput_6 = 0;
int nb_line_deleted_tDBOutput_6 = 0;
int nb_line_rejected_tDBOutput_6 = 0;

int deletedCount_tDBOutput_6=0;
int updatedCount_tDBOutput_6=0;
int insertedCount_tDBOutput_6=0;

String tableName_tDBOutput_6 = "company_pipeline_status";
boolean whetherReject_tDBOutput_6 = false;

       int batchSize_tDBOutput_6 = 10000;
       int batchSizeCounter_tDBOutput_6=0;
       int tmp_batchUpdateCount_tDBOutput_6 = 0;


java.sql.Connection conn_tDBOutput_6 = null;
    conn_tDBOutput_6 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");

            java.sql.DatabaseMetaData dbMetaData_tDBOutput_6 = conn_tDBOutput_6.getMetaData();
            boolean whetherExist_tDBOutput_6 = false;
            try (java.sql.ResultSet rsTable_tDBOutput_6 = dbMetaData_tDBOutput_6.getTables(null, null, null, new String[]{"TABLE"})) {
                while(rsTable_tDBOutput_6.next()) {
                    String table_tDBOutput_6 = rsTable_tDBOutput_6.getString("TABLE_NAME");
                    if(table_tDBOutput_6.equalsIgnoreCase("company_pipeline_status")) {
                        whetherExist_tDBOutput_6 = true;
                        break;
                    }
                }
            }
                if(whetherExist_tDBOutput_6) {
                    try (java.sql.Statement stmtDrop_tDBOutput_6 = conn_tDBOutput_6.createStatement()) {
                        stmtDrop_tDBOutput_6.execute("DROP TABLE \"" + tableName_tDBOutput_6 + "\"");
                    }
                }
                try (java.sql.Statement stmtCreate_tDBOutput_6 = conn_tDBOutput_6.createStatement()) {
                    stmtCreate_tDBOutput_6.execute("CREATE TABLE \"" + tableName_tDBOutput_6 + "\"(\"company_externalid\" VARCHAR(13)   not null ,\"company_pipeline_status\" VARCHAR(25)  ,primary key(\"company_externalid\"))");
                }
	    String insert_tDBOutput_6 = "INSERT INTO \"" + "company_pipeline_status" + "\" (\"company_externalid\",\"company_pipeline_status\") VALUES (?,?)";
	    java.sql.PreparedStatement pstmt_tDBOutput_6 = conn_tDBOutput_6.prepareStatement(insert_tDBOutput_6);
	    resourceMap.put("pstmt_tDBOutput_6", pstmt_tDBOutput_6);
	    

 



/**
 * [tDBOutput_6 begin ] stop
 */



	
	/**
	 * [tDBInput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_6", false);
		start_Hash.put("tDBInput_6", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_6";

	
		int tos_count_tDBInput_6 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_6 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_6 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_6  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_6, talendToDBArray_tDBInput_6); 
		    int nb_line_tDBInput_6 = 0;
		    java.sql.Connection conn_tDBInput_6 = null;
		        conn_tDBInput_6 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
			String dbschema_tDBInput_6 = (String)globalMap.get("dbschema_tDBConnection_2");
		    
			java.sql.Statement stmt_tDBInput_6 = conn_tDBInput_6.createStatement();

		    String dbquery_tDBInput_6 = "\nselect \nconcat('', c.id) as company_externalid\n, cs.CompanyStatusName as company_pipeline_status\nfrom company c \njoin "
+"CompanyStatus cs on c.CompanyStatus_ID=cs.CompanyStatus_ID\nwhere DeleteFlag=0\n";
			

            	globalMap.put("tDBInput_6_QUERY",dbquery_tDBInput_6);
		    java.sql.ResultSet rs_tDBInput_6 = null;

		    try {
		    	rs_tDBInput_6 = stmt_tDBInput_6.executeQuery(dbquery_tDBInput_6);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_6 = rs_tDBInput_6.getMetaData();
		    	int colQtyInRs_tDBInput_6 = rsmd_tDBInput_6.getColumnCount();

		    String tmpContent_tDBInput_6 = null;
		    
		    
		    while (rs_tDBInput_6.next()) {
		        nb_line_tDBInput_6++;
		        
							if(colQtyInRs_tDBInput_6 < 1) {
								row6.company_externalid = null;
							} else {
	                         		
           		tmpContent_tDBInput_6 = rs_tDBInput_6.getString(1);
            if(tmpContent_tDBInput_6 != null) {
            	if (talendToDBList_tDBInput_6 .contains(rsmd_tDBInput_6.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
            		row6.company_externalid = FormatterUtils.formatUnwithE(tmpContent_tDBInput_6);
            	} else {
                	row6.company_externalid = tmpContent_tDBInput_6.trim();
                }
            } else {
                row6.company_externalid = null;
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 2) {
								row6.company_pipeline_status = null;
							} else {
	                         		
           		tmpContent_tDBInput_6 = rs_tDBInput_6.getString(2);
            if(tmpContent_tDBInput_6 != null) {
            	if (talendToDBList_tDBInput_6 .contains(rsmd_tDBInput_6.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
            		row6.company_pipeline_status = FormatterUtils.formatUnwithE(tmpContent_tDBInput_6);
            	} else {
                	row6.company_pipeline_status = tmpContent_tDBInput_6.trim();
                }
            } else {
                row6.company_pipeline_status = null;
            }
		                    }
					





 



/**
 * [tDBInput_6 begin ] stop
 */
	
	/**
	 * [tDBInput_6 main ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

 


	tos_count_tDBInput_6++;

/**
 * [tDBInput_6 main ] stop
 */
	
	/**
	 * [tDBInput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

 



/**
 * [tDBInput_6 process_data_begin ] stop
 */

	
	/**
	 * [tDBOutput_6 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_6";

	

			//row6
			//row6


			
				
				if(execStat){
					runStat.updateStatOnConnection("row6"+iterateId,1, 1);
				}
				
				
				
			

		
	



        whetherReject_tDBOutput_6 = false;
                    if(row6.company_externalid == null) {
pstmt_tDBOutput_6.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(1, row6.company_externalid);
}

                    if(row6.company_pipeline_status == null) {
pstmt_tDBOutput_6.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(2, row6.company_pipeline_status);
}


                       pstmt_tDBOutput_6.addBatch();
                       batchSizeCounter_tDBOutput_6++;
                       nb_line_tDBOutput_6++;
                if ((batchSize_tDBOutput_6 > 0) && (batchSize_tDBOutput_6 <= batchSizeCounter_tDBOutput_6)) {
                    int[] status_tDBOutput_6 = null;
                    int countSum_tDBOutput_6 = 0;
                    try {
                        batchSizeCounter_tDBOutput_6 = 0;
                        status_tDBOutput_6 = pstmt_tDBOutput_6.executeBatch();
                        for(int countEach_tDBOutput_6: status_tDBOutput_6) {
                            countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0 : countEach_tDBOutput_6);
                        }
                    }catch (java.sql.BatchUpdateException e){
                        for(int countEach_tDBOutput_6: e.getUpdateCounts()) {
                            countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0 : countEach_tDBOutput_6);
                        }
                        System.err.println(e.getMessage());
                    }
                    try {
                        tmp_batchUpdateCount_tDBOutput_6 = pstmt_tDBOutput_6.getUpdateCount();
                    }catch (java.sql.SQLException e){
                        System.err.println(e.getMessage());
                    }
                    tmp_batchUpdateCount_tDBOutput_6 = tmp_batchUpdateCount_tDBOutput_6 > countSum_tDBOutput_6 ? tmp_batchUpdateCount_tDBOutput_6 : countSum_tDBOutput_6;
                        insertedCount_tDBOutput_6 += tmp_batchUpdateCount_tDBOutput_6;
               }

 


	tos_count_tDBOutput_6++;

/**
 * [tDBOutput_6 main ] stop
 */
	
	/**
	 * [tDBOutput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_6";

	

 



/**
 * [tDBOutput_6 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_6";

	

 



/**
 * [tDBOutput_6 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

 



/**
 * [tDBInput_6 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_6 end ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

	}
}finally{
	if (rs_tDBInput_6 != null) {
		rs_tDBInput_6.close();
	}
	if (stmt_tDBInput_6 != null) {
		stmt_tDBInput_6.close();
	}
}
globalMap.put("tDBInput_6_NB_LINE",nb_line_tDBInput_6);

 

ok_Hash.put("tDBInput_6", true);
end_Hash.put("tDBInput_6", System.currentTimeMillis());




/**
 * [tDBInput_6 end ] stop
 */

	
	/**
	 * [tDBOutput_6 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_6";

	




                    int[] status_tDBOutput_6 = null;
                    int countSum_tDBOutput_6 = 0;
                    try {
                        if(pstmt_tDBOutput_6!=null && batchSizeCounter_tDBOutput_6 > 0 ){
                            status_tDBOutput_6 = pstmt_tDBOutput_6.executeBatch();
                            for(int countEach_tDBOutput_6: status_tDBOutput_6) {
                                countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0 : countEach_tDBOutput_6);
                            }
                        }
                    }catch (java.sql.BatchUpdateException e){
                        for(int countEach_tDBOutput_6: e.getUpdateCounts()) {
                            countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0 : countEach_tDBOutput_6);
                        }
                        System.err.println(e.getMessage());
                    }
                    if(pstmt_tDBOutput_6!=null && batchSizeCounter_tDBOutput_6 > 0 ){
                        try {
                            tmp_batchUpdateCount_tDBOutput_6 = pstmt_tDBOutput_6.getUpdateCount();
                        }catch (java.sql.SQLException e){

                        }
                        tmp_batchUpdateCount_tDBOutput_6 = tmp_batchUpdateCount_tDBOutput_6 > countSum_tDBOutput_6 ? tmp_batchUpdateCount_tDBOutput_6 : countSum_tDBOutput_6;
                            insertedCount_tDBOutput_6 += tmp_batchUpdateCount_tDBOutput_6;
                    }
        if(pstmt_tDBOutput_6 != null) {
            pstmt_tDBOutput_6.close();
            resourceMap.remove("pstmt_tDBOutput_6");
        }
    resourceMap.put("statementClosed_tDBOutput_6", true);

	int rejectedCount_tDBOutput_6 = 0;
	nb_line_deleted_tDBOutput_6=nb_line_deleted_tDBOutput_6+ deletedCount_tDBOutput_6;
	nb_line_update_tDBOutput_6=nb_line_update_tDBOutput_6 + updatedCount_tDBOutput_6;
	nb_line_inserted_tDBOutput_6=nb_line_inserted_tDBOutput_6 + insertedCount_tDBOutput_6;
	nb_line_rejected_tDBOutput_6=nb_line_rejected_tDBOutput_6 + rejectedCount_tDBOutput_6;
	
        globalMap.put("tDBOutput_6_NB_LINE",nb_line_tDBOutput_6);
        globalMap.put("tDBOutput_6_NB_LINE_UPDATED",nb_line_update_tDBOutput_6);
        globalMap.put("tDBOutput_6_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_6);
        globalMap.put("tDBOutput_6_NB_LINE_DELETED",nb_line_deleted_tDBOutput_6);
        globalMap.put("tDBOutput_6_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_6);
    
	


			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("row6"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tDBOutput_6", true);
end_Hash.put("tDBOutput_6", System.currentTimeMillis());




/**
 * [tDBOutput_6 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_6 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

 



/**
 * [tDBInput_6 finally ] stop
 */

	
	/**
	 * [tDBOutput_6 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_6";

	



    if (resourceMap.get("statementClosed_tDBOutput_6") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_6 = null;
                if ((pstmtToClose_tDBOutput_6 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_6")) != null) {
                    pstmtToClose_tDBOutput_6.close();
                }
    }
 



/**
 * [tDBOutput_6 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_6_SUBPROCESS_STATE", 1);
	}
	


public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
    final static byte[] commonByteArrayLock_VINCERE_ETL_garrison_gen_data_company = new byte[0];
    static byte[] commonByteArray_VINCERE_ETL_garrison_gen_data_company = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String company_externalid;

				public String getCompany_externalid () {
					return this.company_externalid;
				}
				
			    public Boolean company_active;

				public Boolean getCompany_active () {
					return this.company_active;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.company_externalid == null) ? 0 : this.company_externalid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row7Struct other = (row7Struct) obj;
		
						if (this.company_externalid == null) {
							if (other.company_externalid != null)
								return false;
						
						} else if (!this.company_externalid.equals(other.company_externalid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row7Struct other) {

		other.company_externalid = this.company_externalid;
	            other.company_active = this.company_active;
	            
	}

	public void copyKeysDataTo(row7Struct other) {

		other.company_externalid = this.company_externalid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VINCERE_ETL_garrison_gen_data_company.length) {
				if(length < 1024 && commonByteArray_VINCERE_ETL_garrison_gen_data_company.length == 0) {
   					commonByteArray_VINCERE_ETL_garrison_gen_data_company = new byte[1024];
				} else {
   					commonByteArray_VINCERE_ETL_garrison_gen_data_company = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_VINCERE_ETL_garrison_gen_data_company, 0, length);
			strReturn = new String(commonByteArray_VINCERE_ETL_garrison_gen_data_company, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_VINCERE_ETL_garrison_gen_data_company) {

        	try {

        		int length = 0;
		
					this.company_externalid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.company_active = null;
           				} else {
           			    	this.company_active = dis.readBoolean();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.company_externalid,dos);
					
					// Boolean
				
						if(this.company_active == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.company_active);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("company_externalid="+company_externalid);
		sb.append(",company_active="+String.valueOf(company_active));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.company_externalid, other.company_externalid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row7Struct row7 = new row7Struct();




	
	/**
	 * [tDBOutput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_7", false);
		start_Hash.put("tDBOutput_7", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_7";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("row7"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tDBOutput_7 = 0;
		
	




int nb_line_tDBOutput_7 = 0;
int nb_line_update_tDBOutput_7 = 0;
int nb_line_inserted_tDBOutput_7 = 0;
int nb_line_deleted_tDBOutput_7 = 0;
int nb_line_rejected_tDBOutput_7 = 0;

int deletedCount_tDBOutput_7=0;
int updatedCount_tDBOutput_7=0;
int insertedCount_tDBOutput_7=0;

String tableName_tDBOutput_7 = "company_active";
boolean whetherReject_tDBOutput_7 = false;

       int batchSize_tDBOutput_7 = 10000;
       int batchSizeCounter_tDBOutput_7=0;
       int tmp_batchUpdateCount_tDBOutput_7 = 0;


java.sql.Connection conn_tDBOutput_7 = null;
    conn_tDBOutput_7 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");

            java.sql.DatabaseMetaData dbMetaData_tDBOutput_7 = conn_tDBOutput_7.getMetaData();
            boolean whetherExist_tDBOutput_7 = false;
            try (java.sql.ResultSet rsTable_tDBOutput_7 = dbMetaData_tDBOutput_7.getTables(null, null, null, new String[]{"TABLE"})) {
                while(rsTable_tDBOutput_7.next()) {
                    String table_tDBOutput_7 = rsTable_tDBOutput_7.getString("TABLE_NAME");
                    if(table_tDBOutput_7.equalsIgnoreCase("company_active")) {
                        whetherExist_tDBOutput_7 = true;
                        break;
                    }
                }
            }
                if(whetherExist_tDBOutput_7) {
                    try (java.sql.Statement stmtDrop_tDBOutput_7 = conn_tDBOutput_7.createStatement()) {
                        stmtDrop_tDBOutput_7.execute("DROP TABLE \"" + tableName_tDBOutput_7 + "\"");
                    }
                }
                try (java.sql.Statement stmtCreate_tDBOutput_7 = conn_tDBOutput_7.createStatement()) {
                    stmtCreate_tDBOutput_7.execute("CREATE TABLE \"" + tableName_tDBOutput_7 + "\"(\"company_externalid\" VARCHAR(13)   not null ,\"company_active\" BIT ,primary key(\"company_externalid\"))");
                }
	    String insert_tDBOutput_7 = "INSERT INTO \"" + "company_active" + "\" (\"company_externalid\",\"company_active\") VALUES (?,?)";
	    java.sql.PreparedStatement pstmt_tDBOutput_7 = conn_tDBOutput_7.prepareStatement(insert_tDBOutput_7);
	    resourceMap.put("pstmt_tDBOutput_7", pstmt_tDBOutput_7);
	    

 



/**
 * [tDBOutput_7 begin ] stop
 */



	
	/**
	 * [tDBInput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_7", false);
		start_Hash.put("tDBInput_7", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_7";

	
		int tos_count_tDBInput_7 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_7 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_7 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_7  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_7, talendToDBArray_tDBInput_7); 
		    int nb_line_tDBInput_7 = 0;
		    java.sql.Connection conn_tDBInput_7 = null;
		        conn_tDBInput_7 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
			String dbschema_tDBInput_7 = (String)globalMap.get("dbschema_tDBConnection_2");
		    
			java.sql.Statement stmt_tDBInput_7 = conn_tDBInput_7.createStatement();

		    String dbquery_tDBInput_7 = "\nselect \nconcat('', c.id) as company_externalid\n, c.active as company_active\nfrom company c \nwhere DeleteFlag=0\n";
			

            	globalMap.put("tDBInput_7_QUERY",dbquery_tDBInput_7);
		    java.sql.ResultSet rs_tDBInput_7 = null;

		    try {
		    	rs_tDBInput_7 = stmt_tDBInput_7.executeQuery(dbquery_tDBInput_7);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_7 = rs_tDBInput_7.getMetaData();
		    	int colQtyInRs_tDBInput_7 = rsmd_tDBInput_7.getColumnCount();

		    String tmpContent_tDBInput_7 = null;
		    
		    
		    while (rs_tDBInput_7.next()) {
		        nb_line_tDBInput_7++;
		        
							if(colQtyInRs_tDBInput_7 < 1) {
								row7.company_externalid = null;
							} else {
	                         		
           		tmpContent_tDBInput_7 = rs_tDBInput_7.getString(1);
            if(tmpContent_tDBInput_7 != null) {
            	if (talendToDBList_tDBInput_7 .contains(rsmd_tDBInput_7.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
            		row7.company_externalid = FormatterUtils.formatUnwithE(tmpContent_tDBInput_7);
            	} else {
                	row7.company_externalid = tmpContent_tDBInput_7.trim();
                }
            } else {
                row7.company_externalid = null;
            }
		                    }
							if(colQtyInRs_tDBInput_7 < 2) {
								row7.company_active = null;
							} else {
	                         		
            row7.company_active = rs_tDBInput_7.getBoolean(2);
            if(rs_tDBInput_7.wasNull()){
                    row7.company_active = null;
            }
		                    }
					





 



/**
 * [tDBInput_7 begin ] stop
 */
	
	/**
	 * [tDBInput_7 main ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	

 


	tos_count_tDBInput_7++;

/**
 * [tDBInput_7 main ] stop
 */
	
	/**
	 * [tDBInput_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	

 



/**
 * [tDBInput_7 process_data_begin ] stop
 */

	
	/**
	 * [tDBOutput_7 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_7";

	

			//row7
			//row7


			
				
				if(execStat){
					runStat.updateStatOnConnection("row7"+iterateId,1, 1);
				}
				
				
				
			

		
	



        whetherReject_tDBOutput_7 = false;
                    if(row7.company_externalid == null) {
pstmt_tDBOutput_7.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_7.setString(1, row7.company_externalid);
}

                    if(row7.company_active == null) {
pstmt_tDBOutput_7.setNull(2, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_7.setBoolean(2, row7.company_active);
}


                       pstmt_tDBOutput_7.addBatch();
                       batchSizeCounter_tDBOutput_7++;
                       nb_line_tDBOutput_7++;
                if ((batchSize_tDBOutput_7 > 0) && (batchSize_tDBOutput_7 <= batchSizeCounter_tDBOutput_7)) {
                    int[] status_tDBOutput_7 = null;
                    int countSum_tDBOutput_7 = 0;
                    try {
                        batchSizeCounter_tDBOutput_7 = 0;
                        status_tDBOutput_7 = pstmt_tDBOutput_7.executeBatch();
                        for(int countEach_tDBOutput_7: status_tDBOutput_7) {
                            countSum_tDBOutput_7 += (countEach_tDBOutput_7 < 0 ? 0 : countEach_tDBOutput_7);
                        }
                    }catch (java.sql.BatchUpdateException e){
                        for(int countEach_tDBOutput_7: e.getUpdateCounts()) {
                            countSum_tDBOutput_7 += (countEach_tDBOutput_7 < 0 ? 0 : countEach_tDBOutput_7);
                        }
                        System.err.println(e.getMessage());
                    }
                    try {
                        tmp_batchUpdateCount_tDBOutput_7 = pstmt_tDBOutput_7.getUpdateCount();
                    }catch (java.sql.SQLException e){
                        System.err.println(e.getMessage());
                    }
                    tmp_batchUpdateCount_tDBOutput_7 = tmp_batchUpdateCount_tDBOutput_7 > countSum_tDBOutput_7 ? tmp_batchUpdateCount_tDBOutput_7 : countSum_tDBOutput_7;
                        insertedCount_tDBOutput_7 += tmp_batchUpdateCount_tDBOutput_7;
               }

 


	tos_count_tDBOutput_7++;

/**
 * [tDBOutput_7 main ] stop
 */
	
	/**
	 * [tDBOutput_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_7";

	

 



/**
 * [tDBOutput_7 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_7";

	

 



/**
 * [tDBOutput_7 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	

 



/**
 * [tDBInput_7 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_7 end ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	

	}
}finally{
	if (rs_tDBInput_7 != null) {
		rs_tDBInput_7.close();
	}
	if (stmt_tDBInput_7 != null) {
		stmt_tDBInput_7.close();
	}
}
globalMap.put("tDBInput_7_NB_LINE",nb_line_tDBInput_7);

 

ok_Hash.put("tDBInput_7", true);
end_Hash.put("tDBInput_7", System.currentTimeMillis());




/**
 * [tDBInput_7 end ] stop
 */

	
	/**
	 * [tDBOutput_7 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_7";

	




                    int[] status_tDBOutput_7 = null;
                    int countSum_tDBOutput_7 = 0;
                    try {
                        if(pstmt_tDBOutput_7!=null && batchSizeCounter_tDBOutput_7 > 0 ){
                            status_tDBOutput_7 = pstmt_tDBOutput_7.executeBatch();
                            for(int countEach_tDBOutput_7: status_tDBOutput_7) {
                                countSum_tDBOutput_7 += (countEach_tDBOutput_7 < 0 ? 0 : countEach_tDBOutput_7);
                            }
                        }
                    }catch (java.sql.BatchUpdateException e){
                        for(int countEach_tDBOutput_7: e.getUpdateCounts()) {
                            countSum_tDBOutput_7 += (countEach_tDBOutput_7 < 0 ? 0 : countEach_tDBOutput_7);
                        }
                        System.err.println(e.getMessage());
                    }
                    if(pstmt_tDBOutput_7!=null && batchSizeCounter_tDBOutput_7 > 0 ){
                        try {
                            tmp_batchUpdateCount_tDBOutput_7 = pstmt_tDBOutput_7.getUpdateCount();
                        }catch (java.sql.SQLException e){

                        }
                        tmp_batchUpdateCount_tDBOutput_7 = tmp_batchUpdateCount_tDBOutput_7 > countSum_tDBOutput_7 ? tmp_batchUpdateCount_tDBOutput_7 : countSum_tDBOutput_7;
                            insertedCount_tDBOutput_7 += tmp_batchUpdateCount_tDBOutput_7;
                    }
        if(pstmt_tDBOutput_7 != null) {
            pstmt_tDBOutput_7.close();
            resourceMap.remove("pstmt_tDBOutput_7");
        }
    resourceMap.put("statementClosed_tDBOutput_7", true);

	int rejectedCount_tDBOutput_7 = 0;
	nb_line_deleted_tDBOutput_7=nb_line_deleted_tDBOutput_7+ deletedCount_tDBOutput_7;
	nb_line_update_tDBOutput_7=nb_line_update_tDBOutput_7 + updatedCount_tDBOutput_7;
	nb_line_inserted_tDBOutput_7=nb_line_inserted_tDBOutput_7 + insertedCount_tDBOutput_7;
	nb_line_rejected_tDBOutput_7=nb_line_rejected_tDBOutput_7 + rejectedCount_tDBOutput_7;
	
        globalMap.put("tDBOutput_7_NB_LINE",nb_line_tDBOutput_7);
        globalMap.put("tDBOutput_7_NB_LINE_UPDATED",nb_line_update_tDBOutput_7);
        globalMap.put("tDBOutput_7_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_7);
        globalMap.put("tDBOutput_7_NB_LINE_DELETED",nb_line_deleted_tDBOutput_7);
        globalMap.put("tDBOutput_7_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_7);
    
	


			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("row7"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tDBOutput_7", true);
end_Hash.put("tDBOutput_7", System.currentTimeMillis());




/**
 * [tDBOutput_7 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_7 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	

 



/**
 * [tDBInput_7 finally ] stop
 */

	
	/**
	 * [tDBOutput_7 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_7";

	



    if (resourceMap.get("statementClosed_tDBOutput_7") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_7 = null;
                if ((pstmtToClose_tDBOutput_7 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_7")) != null) {
                    pstmtToClose_tDBOutput_7.close();
                }
    }
 



/**
 * [tDBOutput_7 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_7_SUBPROCESS_STATE", 1);
	}
	


public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
    final static byte[] commonByteArrayLock_VINCERE_ETL_garrison_gen_data_company = new byte[0];
    static byte[] commonByteArray_VINCERE_ETL_garrison_gen_data_company = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String company_externalid;

				public String getCompany_externalid () {
					return this.company_externalid;
				}
				
			    public Boolean company_corp2corp_ok;

				public Boolean getCompany_corp2corp_ok () {
					return this.company_corp2corp_ok;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.company_externalid == null) ? 0 : this.company_externalid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row8Struct other = (row8Struct) obj;
		
						if (this.company_externalid == null) {
							if (other.company_externalid != null)
								return false;
						
						} else if (!this.company_externalid.equals(other.company_externalid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row8Struct other) {

		other.company_externalid = this.company_externalid;
	            other.company_corp2corp_ok = this.company_corp2corp_ok;
	            
	}

	public void copyKeysDataTo(row8Struct other) {

		other.company_externalid = this.company_externalid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VINCERE_ETL_garrison_gen_data_company.length) {
				if(length < 1024 && commonByteArray_VINCERE_ETL_garrison_gen_data_company.length == 0) {
   					commonByteArray_VINCERE_ETL_garrison_gen_data_company = new byte[1024];
				} else {
   					commonByteArray_VINCERE_ETL_garrison_gen_data_company = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_VINCERE_ETL_garrison_gen_data_company, 0, length);
			strReturn = new String(commonByteArray_VINCERE_ETL_garrison_gen_data_company, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_VINCERE_ETL_garrison_gen_data_company) {

        	try {

        		int length = 0;
		
					this.company_externalid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.company_corp2corp_ok = null;
           				} else {
           			    	this.company_corp2corp_ok = dis.readBoolean();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.company_externalid,dos);
					
					// Boolean
				
						if(this.company_corp2corp_ok == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.company_corp2corp_ok);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("company_externalid="+company_externalid);
		sb.append(",company_corp2corp_ok="+String.valueOf(company_corp2corp_ok));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.company_externalid, other.company_externalid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row8Struct row8 = new row8Struct();




	
	/**
	 * [tDBOutput_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_8", false);
		start_Hash.put("tDBOutput_8", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_8";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("row8"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tDBOutput_8 = 0;
		
	




int nb_line_tDBOutput_8 = 0;
int nb_line_update_tDBOutput_8 = 0;
int nb_line_inserted_tDBOutput_8 = 0;
int nb_line_deleted_tDBOutput_8 = 0;
int nb_line_rejected_tDBOutput_8 = 0;

int deletedCount_tDBOutput_8=0;
int updatedCount_tDBOutput_8=0;
int insertedCount_tDBOutput_8=0;

String tableName_tDBOutput_8 = "company_corp2corp_ok";
boolean whetherReject_tDBOutput_8 = false;

       int batchSize_tDBOutput_8 = 10000;
       int batchSizeCounter_tDBOutput_8=0;
       int tmp_batchUpdateCount_tDBOutput_8 = 0;


java.sql.Connection conn_tDBOutput_8 = null;
    conn_tDBOutput_8 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");

            java.sql.DatabaseMetaData dbMetaData_tDBOutput_8 = conn_tDBOutput_8.getMetaData();
            boolean whetherExist_tDBOutput_8 = false;
            try (java.sql.ResultSet rsTable_tDBOutput_8 = dbMetaData_tDBOutput_8.getTables(null, null, null, new String[]{"TABLE"})) {
                while(rsTable_tDBOutput_8.next()) {
                    String table_tDBOutput_8 = rsTable_tDBOutput_8.getString("TABLE_NAME");
                    if(table_tDBOutput_8.equalsIgnoreCase("company_corp2corp_ok")) {
                        whetherExist_tDBOutput_8 = true;
                        break;
                    }
                }
            }
                if(whetherExist_tDBOutput_8) {
                    try (java.sql.Statement stmtDrop_tDBOutput_8 = conn_tDBOutput_8.createStatement()) {
                        stmtDrop_tDBOutput_8.execute("DROP TABLE \"" + tableName_tDBOutput_8 + "\"");
                    }
                }
                try (java.sql.Statement stmtCreate_tDBOutput_8 = conn_tDBOutput_8.createStatement()) {
                    stmtCreate_tDBOutput_8.execute("CREATE TABLE \"" + tableName_tDBOutput_8 + "\"(\"company_externalid\" VARCHAR(13)   not null ,\"company_corp2corp_ok\" BIT ,primary key(\"company_externalid\"))");
                }
	    String insert_tDBOutput_8 = "INSERT INTO \"" + "company_corp2corp_ok" + "\" (\"company_externalid\",\"company_corp2corp_ok\") VALUES (?,?)";
	    java.sql.PreparedStatement pstmt_tDBOutput_8 = conn_tDBOutput_8.prepareStatement(insert_tDBOutput_8);
	    resourceMap.put("pstmt_tDBOutput_8", pstmt_tDBOutput_8);
	    

 



/**
 * [tDBOutput_8 begin ] stop
 */



	
	/**
	 * [tDBInput_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_8", false);
		start_Hash.put("tDBInput_8", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_8";

	
		int tos_count_tDBInput_8 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_8 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_8 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_8  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_8, talendToDBArray_tDBInput_8); 
		    int nb_line_tDBInput_8 = 0;
		    java.sql.Connection conn_tDBInput_8 = null;
		        conn_tDBInput_8 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
			String dbschema_tDBInput_8 = (String)globalMap.get("dbschema_tDBConnection_2");
		    
			java.sql.Statement stmt_tDBInput_8 = conn_tDBInput_8.createStatement();

		    String dbquery_tDBInput_8 = "\nselect \nconcat('', c.id) as company_externalid\n, c.Corp2CorpOK as company_corp2corp_ok\nfrom company c \nwhere DeleteFla"
+"g=0\n";
			

            	globalMap.put("tDBInput_8_QUERY",dbquery_tDBInput_8);
		    java.sql.ResultSet rs_tDBInput_8 = null;

		    try {
		    	rs_tDBInput_8 = stmt_tDBInput_8.executeQuery(dbquery_tDBInput_8);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_8 = rs_tDBInput_8.getMetaData();
		    	int colQtyInRs_tDBInput_8 = rsmd_tDBInput_8.getColumnCount();

		    String tmpContent_tDBInput_8 = null;
		    
		    
		    while (rs_tDBInput_8.next()) {
		        nb_line_tDBInput_8++;
		        
							if(colQtyInRs_tDBInput_8 < 1) {
								row8.company_externalid = null;
							} else {
	                         		
           		tmpContent_tDBInput_8 = rs_tDBInput_8.getString(1);
            if(tmpContent_tDBInput_8 != null) {
            	if (talendToDBList_tDBInput_8 .contains(rsmd_tDBInput_8.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
            		row8.company_externalid = FormatterUtils.formatUnwithE(tmpContent_tDBInput_8);
            	} else {
                	row8.company_externalid = tmpContent_tDBInput_8.trim();
                }
            } else {
                row8.company_externalid = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 2) {
								row8.company_corp2corp_ok = null;
							} else {
	                         		
            row8.company_corp2corp_ok = rs_tDBInput_8.getBoolean(2);
            if(rs_tDBInput_8.wasNull()){
                    row8.company_corp2corp_ok = null;
            }
		                    }
					





 



/**
 * [tDBInput_8 begin ] stop
 */
	
	/**
	 * [tDBInput_8 main ] start
	 */

	

	
	
	currentComponent="tDBInput_8";

	

 


	tos_count_tDBInput_8++;

/**
 * [tDBInput_8 main ] stop
 */
	
	/**
	 * [tDBInput_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_8";

	

 



/**
 * [tDBInput_8 process_data_begin ] stop
 */

	
	/**
	 * [tDBOutput_8 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_8";

	

			//row8
			//row8


			
				
				if(execStat){
					runStat.updateStatOnConnection("row8"+iterateId,1, 1);
				}
				
				
				
			

		
	



        whetherReject_tDBOutput_8 = false;
                    if(row8.company_externalid == null) {
pstmt_tDBOutput_8.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_8.setString(1, row8.company_externalid);
}

                    if(row8.company_corp2corp_ok == null) {
pstmt_tDBOutput_8.setNull(2, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_8.setBoolean(2, row8.company_corp2corp_ok);
}


                       pstmt_tDBOutput_8.addBatch();
                       batchSizeCounter_tDBOutput_8++;
                       nb_line_tDBOutput_8++;
                if ((batchSize_tDBOutput_8 > 0) && (batchSize_tDBOutput_8 <= batchSizeCounter_tDBOutput_8)) {
                    int[] status_tDBOutput_8 = null;
                    int countSum_tDBOutput_8 = 0;
                    try {
                        batchSizeCounter_tDBOutput_8 = 0;
                        status_tDBOutput_8 = pstmt_tDBOutput_8.executeBatch();
                        for(int countEach_tDBOutput_8: status_tDBOutput_8) {
                            countSum_tDBOutput_8 += (countEach_tDBOutput_8 < 0 ? 0 : countEach_tDBOutput_8);
                        }
                    }catch (java.sql.BatchUpdateException e){
                        for(int countEach_tDBOutput_8: e.getUpdateCounts()) {
                            countSum_tDBOutput_8 += (countEach_tDBOutput_8 < 0 ? 0 : countEach_tDBOutput_8);
                        }
                        System.err.println(e.getMessage());
                    }
                    try {
                        tmp_batchUpdateCount_tDBOutput_8 = pstmt_tDBOutput_8.getUpdateCount();
                    }catch (java.sql.SQLException e){
                        System.err.println(e.getMessage());
                    }
                    tmp_batchUpdateCount_tDBOutput_8 = tmp_batchUpdateCount_tDBOutput_8 > countSum_tDBOutput_8 ? tmp_batchUpdateCount_tDBOutput_8 : countSum_tDBOutput_8;
                        insertedCount_tDBOutput_8 += tmp_batchUpdateCount_tDBOutput_8;
               }

 


	tos_count_tDBOutput_8++;

/**
 * [tDBOutput_8 main ] stop
 */
	
	/**
	 * [tDBOutput_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_8";

	

 



/**
 * [tDBOutput_8 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_8";

	

 



/**
 * [tDBOutput_8 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_8";

	

 



/**
 * [tDBInput_8 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_8 end ] start
	 */

	

	
	
	currentComponent="tDBInput_8";

	

	}
}finally{
	if (rs_tDBInput_8 != null) {
		rs_tDBInput_8.close();
	}
	if (stmt_tDBInput_8 != null) {
		stmt_tDBInput_8.close();
	}
}
globalMap.put("tDBInput_8_NB_LINE",nb_line_tDBInput_8);

 

ok_Hash.put("tDBInput_8", true);
end_Hash.put("tDBInput_8", System.currentTimeMillis());




/**
 * [tDBInput_8 end ] stop
 */

	
	/**
	 * [tDBOutput_8 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_8";

	




                    int[] status_tDBOutput_8 = null;
                    int countSum_tDBOutput_8 = 0;
                    try {
                        if(pstmt_tDBOutput_8!=null && batchSizeCounter_tDBOutput_8 > 0 ){
                            status_tDBOutput_8 = pstmt_tDBOutput_8.executeBatch();
                            for(int countEach_tDBOutput_8: status_tDBOutput_8) {
                                countSum_tDBOutput_8 += (countEach_tDBOutput_8 < 0 ? 0 : countEach_tDBOutput_8);
                            }
                        }
                    }catch (java.sql.BatchUpdateException e){
                        for(int countEach_tDBOutput_8: e.getUpdateCounts()) {
                            countSum_tDBOutput_8 += (countEach_tDBOutput_8 < 0 ? 0 : countEach_tDBOutput_8);
                        }
                        System.err.println(e.getMessage());
                    }
                    if(pstmt_tDBOutput_8!=null && batchSizeCounter_tDBOutput_8 > 0 ){
                        try {
                            tmp_batchUpdateCount_tDBOutput_8 = pstmt_tDBOutput_8.getUpdateCount();
                        }catch (java.sql.SQLException e){

                        }
                        tmp_batchUpdateCount_tDBOutput_8 = tmp_batchUpdateCount_tDBOutput_8 > countSum_tDBOutput_8 ? tmp_batchUpdateCount_tDBOutput_8 : countSum_tDBOutput_8;
                            insertedCount_tDBOutput_8 += tmp_batchUpdateCount_tDBOutput_8;
                    }
        if(pstmt_tDBOutput_8 != null) {
            pstmt_tDBOutput_8.close();
            resourceMap.remove("pstmt_tDBOutput_8");
        }
    resourceMap.put("statementClosed_tDBOutput_8", true);

	int rejectedCount_tDBOutput_8 = 0;
	nb_line_deleted_tDBOutput_8=nb_line_deleted_tDBOutput_8+ deletedCount_tDBOutput_8;
	nb_line_update_tDBOutput_8=nb_line_update_tDBOutput_8 + updatedCount_tDBOutput_8;
	nb_line_inserted_tDBOutput_8=nb_line_inserted_tDBOutput_8 + insertedCount_tDBOutput_8;
	nb_line_rejected_tDBOutput_8=nb_line_rejected_tDBOutput_8 + rejectedCount_tDBOutput_8;
	
        globalMap.put("tDBOutput_8_NB_LINE",nb_line_tDBOutput_8);
        globalMap.put("tDBOutput_8_NB_LINE_UPDATED",nb_line_update_tDBOutput_8);
        globalMap.put("tDBOutput_8_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_8);
        globalMap.put("tDBOutput_8_NB_LINE_DELETED",nb_line_deleted_tDBOutput_8);
        globalMap.put("tDBOutput_8_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_8);
    
	


			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("row8"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tDBOutput_8", true);
end_Hash.put("tDBOutput_8", System.currentTimeMillis());




/**
 * [tDBOutput_8 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_8 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_8";

	

 



/**
 * [tDBInput_8 finally ] stop
 */

	
	/**
	 * [tDBOutput_8 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_8";

	



    if (resourceMap.get("statementClosed_tDBOutput_8") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_8 = null;
                if ((pstmtToClose_tDBOutput_8 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_8")) != null) {
                    pstmtToClose_tDBOutput_8.close();
                }
    }
 



/**
 * [tDBOutput_8 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_8_SUBPROCESS_STATE", 1);
	}
	


public static class row9Struct implements routines.system.IPersistableRow<row9Struct> {
    final static byte[] commonByteArrayLock_VINCERE_ETL_garrison_gen_data_company = new byte[0];
    static byte[] commonByteArray_VINCERE_ETL_garrison_gen_data_company = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String company_externalid;

				public String getCompany_externalid () {
					return this.company_externalid;
				}
				
			    public String company_fax;

				public String getCompany_fax () {
					return this.company_fax;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.company_externalid == null) ? 0 : this.company_externalid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row9Struct other = (row9Struct) obj;
		
						if (this.company_externalid == null) {
							if (other.company_externalid != null)
								return false;
						
						} else if (!this.company_externalid.equals(other.company_externalid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row9Struct other) {

		other.company_externalid = this.company_externalid;
	            other.company_fax = this.company_fax;
	            
	}

	public void copyKeysDataTo(row9Struct other) {

		other.company_externalid = this.company_externalid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VINCERE_ETL_garrison_gen_data_company.length) {
				if(length < 1024 && commonByteArray_VINCERE_ETL_garrison_gen_data_company.length == 0) {
   					commonByteArray_VINCERE_ETL_garrison_gen_data_company = new byte[1024];
				} else {
   					commonByteArray_VINCERE_ETL_garrison_gen_data_company = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_VINCERE_ETL_garrison_gen_data_company, 0, length);
			strReturn = new String(commonByteArray_VINCERE_ETL_garrison_gen_data_company, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_VINCERE_ETL_garrison_gen_data_company) {

        	try {

        		int length = 0;
		
					this.company_externalid = readString(dis);
					
					this.company_fax = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.company_externalid,dos);
					
					// String
				
						writeString(this.company_fax,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("company_externalid="+company_externalid);
		sb.append(",company_fax="+company_fax);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row9Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.company_externalid, other.company_externalid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_9_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row9Struct row9 = new row9Struct();




	
	/**
	 * [tDBOutput_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_9", false);
		start_Hash.put("tDBOutput_9", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_9";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("row9"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tDBOutput_9 = 0;
		
	




int nb_line_tDBOutput_9 = 0;
int nb_line_update_tDBOutput_9 = 0;
int nb_line_inserted_tDBOutput_9 = 0;
int nb_line_deleted_tDBOutput_9 = 0;
int nb_line_rejected_tDBOutput_9 = 0;

int deletedCount_tDBOutput_9=0;
int updatedCount_tDBOutput_9=0;
int insertedCount_tDBOutput_9=0;

String tableName_tDBOutput_9 = "company_fax";
boolean whetherReject_tDBOutput_9 = false;

       int batchSize_tDBOutput_9 = 10000;
       int batchSizeCounter_tDBOutput_9=0;
       int tmp_batchUpdateCount_tDBOutput_9 = 0;


java.sql.Connection conn_tDBOutput_9 = null;
    conn_tDBOutput_9 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");

            java.sql.DatabaseMetaData dbMetaData_tDBOutput_9 = conn_tDBOutput_9.getMetaData();
            boolean whetherExist_tDBOutput_9 = false;
            try (java.sql.ResultSet rsTable_tDBOutput_9 = dbMetaData_tDBOutput_9.getTables(null, null, null, new String[]{"TABLE"})) {
                while(rsTable_tDBOutput_9.next()) {
                    String table_tDBOutput_9 = rsTable_tDBOutput_9.getString("TABLE_NAME");
                    if(table_tDBOutput_9.equalsIgnoreCase("company_fax")) {
                        whetherExist_tDBOutput_9 = true;
                        break;
                    }
                }
            }
                if(whetherExist_tDBOutput_9) {
                    try (java.sql.Statement stmtDrop_tDBOutput_9 = conn_tDBOutput_9.createStatement()) {
                        stmtDrop_tDBOutput_9.execute("DROP TABLE \"" + tableName_tDBOutput_9 + "\"");
                    }
                }
                try (java.sql.Statement stmtCreate_tDBOutput_9 = conn_tDBOutput_9.createStatement()) {
                    stmtCreate_tDBOutput_9.execute("CREATE TABLE \"" + tableName_tDBOutput_9 + "\"(\"company_externalid\" VARCHAR(13)   not null ,\"company_fax\" VARCHAR(50)  ,primary key(\"company_externalid\"))");
                }
	    String insert_tDBOutput_9 = "INSERT INTO \"" + "company_fax" + "\" (\"company_externalid\",\"company_fax\") VALUES (?,?)";
	    java.sql.PreparedStatement pstmt_tDBOutput_9 = conn_tDBOutput_9.prepareStatement(insert_tDBOutput_9);
	    resourceMap.put("pstmt_tDBOutput_9", pstmt_tDBOutput_9);
	    

 



/**
 * [tDBOutput_9 begin ] stop
 */



	
	/**
	 * [tDBInput_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_9", false);
		start_Hash.put("tDBInput_9", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_9";

	
		int tos_count_tDBInput_9 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_9 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_9 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_9  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_9, talendToDBArray_tDBInput_9); 
		    int nb_line_tDBInput_9 = 0;
		    java.sql.Connection conn_tDBInput_9 = null;
		        conn_tDBInput_9 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
			String dbschema_tDBInput_9 = (String)globalMap.get("dbschema_tDBConnection_2");
		    
			java.sql.Statement stmt_tDBInput_9 = conn_tDBInput_9.createStatement();

		    String dbquery_tDBInput_9 = "\nselect \nconcat('', c.id) as company_externalid\n, c.fax as company_fax\nfrom company c \nwhere DeleteFlag=0\n";
			

            	globalMap.put("tDBInput_9_QUERY",dbquery_tDBInput_9);
		    java.sql.ResultSet rs_tDBInput_9 = null;

		    try {
		    	rs_tDBInput_9 = stmt_tDBInput_9.executeQuery(dbquery_tDBInput_9);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_9 = rs_tDBInput_9.getMetaData();
		    	int colQtyInRs_tDBInput_9 = rsmd_tDBInput_9.getColumnCount();

		    String tmpContent_tDBInput_9 = null;
		    
		    
		    while (rs_tDBInput_9.next()) {
		        nb_line_tDBInput_9++;
		        
							if(colQtyInRs_tDBInput_9 < 1) {
								row9.company_externalid = null;
							} else {
	                         		
           		tmpContent_tDBInput_9 = rs_tDBInput_9.getString(1);
            if(tmpContent_tDBInput_9 != null) {
            	if (talendToDBList_tDBInput_9 .contains(rsmd_tDBInput_9.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
            		row9.company_externalid = FormatterUtils.formatUnwithE(tmpContent_tDBInput_9);
            	} else {
                	row9.company_externalid = tmpContent_tDBInput_9.trim();
                }
            } else {
                row9.company_externalid = null;
            }
		                    }
							if(colQtyInRs_tDBInput_9 < 2) {
								row9.company_fax = null;
							} else {
	                         		
           		tmpContent_tDBInput_9 = rs_tDBInput_9.getString(2);
            if(tmpContent_tDBInput_9 != null) {
            	if (talendToDBList_tDBInput_9 .contains(rsmd_tDBInput_9.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
            		row9.company_fax = FormatterUtils.formatUnwithE(tmpContent_tDBInput_9);
            	} else {
                	row9.company_fax = tmpContent_tDBInput_9.trim();
                }
            } else {
                row9.company_fax = null;
            }
		                    }
					





 



/**
 * [tDBInput_9 begin ] stop
 */
	
	/**
	 * [tDBInput_9 main ] start
	 */

	

	
	
	currentComponent="tDBInput_9";

	

 


	tos_count_tDBInput_9++;

/**
 * [tDBInput_9 main ] stop
 */
	
	/**
	 * [tDBInput_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_9";

	

 



/**
 * [tDBInput_9 process_data_begin ] stop
 */

	
	/**
	 * [tDBOutput_9 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_9";

	

			//row9
			//row9


			
				
				if(execStat){
					runStat.updateStatOnConnection("row9"+iterateId,1, 1);
				}
				
				
				
			

		
	



        whetherReject_tDBOutput_9 = false;
                    if(row9.company_externalid == null) {
pstmt_tDBOutput_9.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_9.setString(1, row9.company_externalid);
}

                    if(row9.company_fax == null) {
pstmt_tDBOutput_9.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_9.setString(2, row9.company_fax);
}


                       pstmt_tDBOutput_9.addBatch();
                       batchSizeCounter_tDBOutput_9++;
                       nb_line_tDBOutput_9++;
                if ((batchSize_tDBOutput_9 > 0) && (batchSize_tDBOutput_9 <= batchSizeCounter_tDBOutput_9)) {
                    int[] status_tDBOutput_9 = null;
                    int countSum_tDBOutput_9 = 0;
                    try {
                        batchSizeCounter_tDBOutput_9 = 0;
                        status_tDBOutput_9 = pstmt_tDBOutput_9.executeBatch();
                        for(int countEach_tDBOutput_9: status_tDBOutput_9) {
                            countSum_tDBOutput_9 += (countEach_tDBOutput_9 < 0 ? 0 : countEach_tDBOutput_9);
                        }
                    }catch (java.sql.BatchUpdateException e){
                        for(int countEach_tDBOutput_9: e.getUpdateCounts()) {
                            countSum_tDBOutput_9 += (countEach_tDBOutput_9 < 0 ? 0 : countEach_tDBOutput_9);
                        }
                        System.err.println(e.getMessage());
                    }
                    try {
                        tmp_batchUpdateCount_tDBOutput_9 = pstmt_tDBOutput_9.getUpdateCount();
                    }catch (java.sql.SQLException e){
                        System.err.println(e.getMessage());
                    }
                    tmp_batchUpdateCount_tDBOutput_9 = tmp_batchUpdateCount_tDBOutput_9 > countSum_tDBOutput_9 ? tmp_batchUpdateCount_tDBOutput_9 : countSum_tDBOutput_9;
                        insertedCount_tDBOutput_9 += tmp_batchUpdateCount_tDBOutput_9;
               }

 


	tos_count_tDBOutput_9++;

/**
 * [tDBOutput_9 main ] stop
 */
	
	/**
	 * [tDBOutput_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_9";

	

 



/**
 * [tDBOutput_9 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_9";

	

 



/**
 * [tDBOutput_9 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_9";

	

 



/**
 * [tDBInput_9 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_9 end ] start
	 */

	

	
	
	currentComponent="tDBInput_9";

	

	}
}finally{
	if (rs_tDBInput_9 != null) {
		rs_tDBInput_9.close();
	}
	if (stmt_tDBInput_9 != null) {
		stmt_tDBInput_9.close();
	}
}
globalMap.put("tDBInput_9_NB_LINE",nb_line_tDBInput_9);

 

ok_Hash.put("tDBInput_9", true);
end_Hash.put("tDBInput_9", System.currentTimeMillis());




/**
 * [tDBInput_9 end ] stop
 */

	
	/**
	 * [tDBOutput_9 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_9";

	




                    int[] status_tDBOutput_9 = null;
                    int countSum_tDBOutput_9 = 0;
                    try {
                        if(pstmt_tDBOutput_9!=null && batchSizeCounter_tDBOutput_9 > 0 ){
                            status_tDBOutput_9 = pstmt_tDBOutput_9.executeBatch();
                            for(int countEach_tDBOutput_9: status_tDBOutput_9) {
                                countSum_tDBOutput_9 += (countEach_tDBOutput_9 < 0 ? 0 : countEach_tDBOutput_9);
                            }
                        }
                    }catch (java.sql.BatchUpdateException e){
                        for(int countEach_tDBOutput_9: e.getUpdateCounts()) {
                            countSum_tDBOutput_9 += (countEach_tDBOutput_9 < 0 ? 0 : countEach_tDBOutput_9);
                        }
                        System.err.println(e.getMessage());
                    }
                    if(pstmt_tDBOutput_9!=null && batchSizeCounter_tDBOutput_9 > 0 ){
                        try {
                            tmp_batchUpdateCount_tDBOutput_9 = pstmt_tDBOutput_9.getUpdateCount();
                        }catch (java.sql.SQLException e){

                        }
                        tmp_batchUpdateCount_tDBOutput_9 = tmp_batchUpdateCount_tDBOutput_9 > countSum_tDBOutput_9 ? tmp_batchUpdateCount_tDBOutput_9 : countSum_tDBOutput_9;
                            insertedCount_tDBOutput_9 += tmp_batchUpdateCount_tDBOutput_9;
                    }
        if(pstmt_tDBOutput_9 != null) {
            pstmt_tDBOutput_9.close();
            resourceMap.remove("pstmt_tDBOutput_9");
        }
    resourceMap.put("statementClosed_tDBOutput_9", true);

	int rejectedCount_tDBOutput_9 = 0;
	nb_line_deleted_tDBOutput_9=nb_line_deleted_tDBOutput_9+ deletedCount_tDBOutput_9;
	nb_line_update_tDBOutput_9=nb_line_update_tDBOutput_9 + updatedCount_tDBOutput_9;
	nb_line_inserted_tDBOutput_9=nb_line_inserted_tDBOutput_9 + insertedCount_tDBOutput_9;
	nb_line_rejected_tDBOutput_9=nb_line_rejected_tDBOutput_9 + rejectedCount_tDBOutput_9;
	
        globalMap.put("tDBOutput_9_NB_LINE",nb_line_tDBOutput_9);
        globalMap.put("tDBOutput_9_NB_LINE_UPDATED",nb_line_update_tDBOutput_9);
        globalMap.put("tDBOutput_9_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_9);
        globalMap.put("tDBOutput_9_NB_LINE_DELETED",nb_line_deleted_tDBOutput_9);
        globalMap.put("tDBOutput_9_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_9);
    
	


			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("row9"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tDBOutput_9", true);
end_Hash.put("tDBOutput_9", System.currentTimeMillis());




/**
 * [tDBOutput_9 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_9 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_9";

	

 



/**
 * [tDBInput_9 finally ] stop
 */

	
	/**
	 * [tDBOutput_9 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_9";

	



    if (resourceMap.get("statementClosed_tDBOutput_9") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_9 = null;
                if ((pstmtToClose_tDBOutput_9 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_9")) != null) {
                    pstmtToClose_tDBOutput_9.close();
                }
    }
 



/**
 * [tDBOutput_9 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_9_SUBPROCESS_STATE", 1);
	}
	


public static class row10Struct implements routines.system.IPersistableRow<row10Struct> {
    final static byte[] commonByteArrayLock_VINCERE_ETL_garrison_gen_data_company = new byte[0];
    static byte[] commonByteArray_VINCERE_ETL_garrison_gen_data_company = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String company_externalid;

				public String getCompany_externalid () {
					return this.company_externalid;
				}
				
			    public String company_owner;

				public String getCompany_owner () {
					return this.company_owner;
				}
				
			    public String username;

				public String getUsername () {
					return this.username;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.company_externalid == null) ? 0 : this.company_externalid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row10Struct other = (row10Struct) obj;
		
						if (this.company_externalid == null) {
							if (other.company_externalid != null)
								return false;
						
						} else if (!this.company_externalid.equals(other.company_externalid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row10Struct other) {

		other.company_externalid = this.company_externalid;
	            other.company_owner = this.company_owner;
	            other.username = this.username;
	            
	}

	public void copyKeysDataTo(row10Struct other) {

		other.company_externalid = this.company_externalid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VINCERE_ETL_garrison_gen_data_company.length) {
				if(length < 1024 && commonByteArray_VINCERE_ETL_garrison_gen_data_company.length == 0) {
   					commonByteArray_VINCERE_ETL_garrison_gen_data_company = new byte[1024];
				} else {
   					commonByteArray_VINCERE_ETL_garrison_gen_data_company = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_VINCERE_ETL_garrison_gen_data_company, 0, length);
			strReturn = new String(commonByteArray_VINCERE_ETL_garrison_gen_data_company, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_VINCERE_ETL_garrison_gen_data_company) {

        	try {

        		int length = 0;
		
					this.company_externalid = readString(dis);
					
					this.company_owner = readString(dis);
					
					this.username = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.company_externalid,dos);
					
					// String
				
						writeString(this.company_owner,dos);
					
					// String
				
						writeString(this.username,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("company_externalid="+company_externalid);
		sb.append(",company_owner="+company_owner);
		sb.append(",username="+username);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row10Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.company_externalid, other.company_externalid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_10Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_10_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row10Struct row10 = new row10Struct();




	
	/**
	 * [tDBOutput_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_10", false);
		start_Hash.put("tDBOutput_10", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_10";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("row10"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tDBOutput_10 = 0;
		
	




int nb_line_tDBOutput_10 = 0;
int nb_line_update_tDBOutput_10 = 0;
int nb_line_inserted_tDBOutput_10 = 0;
int nb_line_deleted_tDBOutput_10 = 0;
int nb_line_rejected_tDBOutput_10 = 0;

int deletedCount_tDBOutput_10=0;
int updatedCount_tDBOutput_10=0;
int insertedCount_tDBOutput_10=0;

String tableName_tDBOutput_10 = "company_owner";
boolean whetherReject_tDBOutput_10 = false;

       int batchSize_tDBOutput_10 = 10000;
       int batchSizeCounter_tDBOutput_10=0;
       int tmp_batchUpdateCount_tDBOutput_10 = 0;


java.sql.Connection conn_tDBOutput_10 = null;
    conn_tDBOutput_10 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");

            java.sql.DatabaseMetaData dbMetaData_tDBOutput_10 = conn_tDBOutput_10.getMetaData();
            boolean whetherExist_tDBOutput_10 = false;
            try (java.sql.ResultSet rsTable_tDBOutput_10 = dbMetaData_tDBOutput_10.getTables(null, null, null, new String[]{"TABLE"})) {
                while(rsTable_tDBOutput_10.next()) {
                    String table_tDBOutput_10 = rsTable_tDBOutput_10.getString("TABLE_NAME");
                    if(table_tDBOutput_10.equalsIgnoreCase("company_owner")) {
                        whetherExist_tDBOutput_10 = true;
                        break;
                    }
                }
            }
                if(whetherExist_tDBOutput_10) {
                    try (java.sql.Statement stmtDrop_tDBOutput_10 = conn_tDBOutput_10.createStatement()) {
                        stmtDrop_tDBOutput_10.execute("DROP TABLE \"" + tableName_tDBOutput_10 + "\"");
                    }
                }
                try (java.sql.Statement stmtCreate_tDBOutput_10 = conn_tDBOutput_10.createStatement()) {
                    stmtCreate_tDBOutput_10.execute("CREATE TABLE \"" + tableName_tDBOutput_10 + "\"(\"company_externalid\" VARCHAR(13)   not null ,\"company_owner\" VARCHAR(200)  ,\"username\" VARCHAR(10)  ,primary key(\"company_externalid\"))");
                }
	    String insert_tDBOutput_10 = "INSERT INTO \"" + "company_owner" + "\" (\"company_externalid\",\"company_owner\",\"username\") VALUES (?,?,?)";
	    java.sql.PreparedStatement pstmt_tDBOutput_10 = conn_tDBOutput_10.prepareStatement(insert_tDBOutput_10);
	    resourceMap.put("pstmt_tDBOutput_10", pstmt_tDBOutput_10);
	    

 



/**
 * [tDBOutput_10 begin ] stop
 */



	
	/**
	 * [tDBInput_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_10", false);
		start_Hash.put("tDBInput_10", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_10";

	
		int tos_count_tDBInput_10 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_10 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_10 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_10  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_10, talendToDBArray_tDBInput_10); 
		    int nb_line_tDBInput_10 = 0;
		    java.sql.Connection conn_tDBInput_10 = null;
		        conn_tDBInput_10 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
			String dbschema_tDBInput_10 = (String)globalMap.get("dbschema_tDBConnection_2");
		    
			java.sql.Statement stmt_tDBInput_10 = conn_tDBInput_10.createStatement();

		    String dbquery_tDBInput_10 = "\nselect \nconcat('', c.id) as company_externalid\n, u.email as company_owner\n, u.username\nfrom company c \nleft join MhUse"
+"rs u on c.CompRecruiter=u.username\nwhere c.DeleteFlag=0\n";
			

            	globalMap.put("tDBInput_10_QUERY",dbquery_tDBInput_10);
		    java.sql.ResultSet rs_tDBInput_10 = null;

		    try {
		    	rs_tDBInput_10 = stmt_tDBInput_10.executeQuery(dbquery_tDBInput_10);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_10 = rs_tDBInput_10.getMetaData();
		    	int colQtyInRs_tDBInput_10 = rsmd_tDBInput_10.getColumnCount();

		    String tmpContent_tDBInput_10 = null;
		    
		    
		    while (rs_tDBInput_10.next()) {
		        nb_line_tDBInput_10++;
		        
							if(colQtyInRs_tDBInput_10 < 1) {
								row10.company_externalid = null;
							} else {
	                         		
           		tmpContent_tDBInput_10 = rs_tDBInput_10.getString(1);
            if(tmpContent_tDBInput_10 != null) {
            	if (talendToDBList_tDBInput_10 .contains(rsmd_tDBInput_10.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
            		row10.company_externalid = FormatterUtils.formatUnwithE(tmpContent_tDBInput_10);
            	} else {
                	row10.company_externalid = tmpContent_tDBInput_10.trim();
                }
            } else {
                row10.company_externalid = null;
            }
		                    }
							if(colQtyInRs_tDBInput_10 < 2) {
								row10.company_owner = null;
							} else {
	                         		
           		tmpContent_tDBInput_10 = rs_tDBInput_10.getString(2);
            if(tmpContent_tDBInput_10 != null) {
            	if (talendToDBList_tDBInput_10 .contains(rsmd_tDBInput_10.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
            		row10.company_owner = FormatterUtils.formatUnwithE(tmpContent_tDBInput_10);
            	} else {
                	row10.company_owner = tmpContent_tDBInput_10.trim();
                }
            } else {
                row10.company_owner = null;
            }
		                    }
							if(colQtyInRs_tDBInput_10 < 3) {
								row10.username = null;
							} else {
	                         		
           		tmpContent_tDBInput_10 = rs_tDBInput_10.getString(3);
            if(tmpContent_tDBInput_10 != null) {
            	if (talendToDBList_tDBInput_10 .contains(rsmd_tDBInput_10.getColumnTypeName(3).toUpperCase(java.util.Locale.ENGLISH))) {
            		row10.username = FormatterUtils.formatUnwithE(tmpContent_tDBInput_10);
            	} else {
                	row10.username = tmpContent_tDBInput_10.trim();
                }
            } else {
                row10.username = null;
            }
		                    }
					





 



/**
 * [tDBInput_10 begin ] stop
 */
	
	/**
	 * [tDBInput_10 main ] start
	 */

	

	
	
	currentComponent="tDBInput_10";

	

 


	tos_count_tDBInput_10++;

/**
 * [tDBInput_10 main ] stop
 */
	
	/**
	 * [tDBInput_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_10";

	

 



/**
 * [tDBInput_10 process_data_begin ] stop
 */

	
	/**
	 * [tDBOutput_10 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_10";

	

			//row10
			//row10


			
				
				if(execStat){
					runStat.updateStatOnConnection("row10"+iterateId,1, 1);
				}
				
				
				
			

		
	



        whetherReject_tDBOutput_10 = false;
                    if(row10.company_externalid == null) {
pstmt_tDBOutput_10.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_10.setString(1, row10.company_externalid);
}

                    if(row10.company_owner == null) {
pstmt_tDBOutput_10.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_10.setString(2, row10.company_owner);
}

                    if(row10.username == null) {
pstmt_tDBOutput_10.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_10.setString(3, row10.username);
}


                       pstmt_tDBOutput_10.addBatch();
                       batchSizeCounter_tDBOutput_10++;
                       nb_line_tDBOutput_10++;
                if ((batchSize_tDBOutput_10 > 0) && (batchSize_tDBOutput_10 <= batchSizeCounter_tDBOutput_10)) {
                    int[] status_tDBOutput_10 = null;
                    int countSum_tDBOutput_10 = 0;
                    try {
                        batchSizeCounter_tDBOutput_10 = 0;
                        status_tDBOutput_10 = pstmt_tDBOutput_10.executeBatch();
                        for(int countEach_tDBOutput_10: status_tDBOutput_10) {
                            countSum_tDBOutput_10 += (countEach_tDBOutput_10 < 0 ? 0 : countEach_tDBOutput_10);
                        }
                    }catch (java.sql.BatchUpdateException e){
                        for(int countEach_tDBOutput_10: e.getUpdateCounts()) {
                            countSum_tDBOutput_10 += (countEach_tDBOutput_10 < 0 ? 0 : countEach_tDBOutput_10);
                        }
                        System.err.println(e.getMessage());
                    }
                    try {
                        tmp_batchUpdateCount_tDBOutput_10 = pstmt_tDBOutput_10.getUpdateCount();
                    }catch (java.sql.SQLException e){
                        System.err.println(e.getMessage());
                    }
                    tmp_batchUpdateCount_tDBOutput_10 = tmp_batchUpdateCount_tDBOutput_10 > countSum_tDBOutput_10 ? tmp_batchUpdateCount_tDBOutput_10 : countSum_tDBOutput_10;
                        insertedCount_tDBOutput_10 += tmp_batchUpdateCount_tDBOutput_10;
               }

 


	tos_count_tDBOutput_10++;

/**
 * [tDBOutput_10 main ] stop
 */
	
	/**
	 * [tDBOutput_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_10";

	

 



/**
 * [tDBOutput_10 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_10";

	

 



/**
 * [tDBOutput_10 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_10";

	

 



/**
 * [tDBInput_10 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_10 end ] start
	 */

	

	
	
	currentComponent="tDBInput_10";

	

	}
}finally{
	if (rs_tDBInput_10 != null) {
		rs_tDBInput_10.close();
	}
	if (stmt_tDBInput_10 != null) {
		stmt_tDBInput_10.close();
	}
}
globalMap.put("tDBInput_10_NB_LINE",nb_line_tDBInput_10);

 

ok_Hash.put("tDBInput_10", true);
end_Hash.put("tDBInput_10", System.currentTimeMillis());




/**
 * [tDBInput_10 end ] stop
 */

	
	/**
	 * [tDBOutput_10 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_10";

	




                    int[] status_tDBOutput_10 = null;
                    int countSum_tDBOutput_10 = 0;
                    try {
                        if(pstmt_tDBOutput_10!=null && batchSizeCounter_tDBOutput_10 > 0 ){
                            status_tDBOutput_10 = pstmt_tDBOutput_10.executeBatch();
                            for(int countEach_tDBOutput_10: status_tDBOutput_10) {
                                countSum_tDBOutput_10 += (countEach_tDBOutput_10 < 0 ? 0 : countEach_tDBOutput_10);
                            }
                        }
                    }catch (java.sql.BatchUpdateException e){
                        for(int countEach_tDBOutput_10: e.getUpdateCounts()) {
                            countSum_tDBOutput_10 += (countEach_tDBOutput_10 < 0 ? 0 : countEach_tDBOutput_10);
                        }
                        System.err.println(e.getMessage());
                    }
                    if(pstmt_tDBOutput_10!=null && batchSizeCounter_tDBOutput_10 > 0 ){
                        try {
                            tmp_batchUpdateCount_tDBOutput_10 = pstmt_tDBOutput_10.getUpdateCount();
                        }catch (java.sql.SQLException e){

                        }
                        tmp_batchUpdateCount_tDBOutput_10 = tmp_batchUpdateCount_tDBOutput_10 > countSum_tDBOutput_10 ? tmp_batchUpdateCount_tDBOutput_10 : countSum_tDBOutput_10;
                            insertedCount_tDBOutput_10 += tmp_batchUpdateCount_tDBOutput_10;
                    }
        if(pstmt_tDBOutput_10 != null) {
            pstmt_tDBOutput_10.close();
            resourceMap.remove("pstmt_tDBOutput_10");
        }
    resourceMap.put("statementClosed_tDBOutput_10", true);

	int rejectedCount_tDBOutput_10 = 0;
	nb_line_deleted_tDBOutput_10=nb_line_deleted_tDBOutput_10+ deletedCount_tDBOutput_10;
	nb_line_update_tDBOutput_10=nb_line_update_tDBOutput_10 + updatedCount_tDBOutput_10;
	nb_line_inserted_tDBOutput_10=nb_line_inserted_tDBOutput_10 + insertedCount_tDBOutput_10;
	nb_line_rejected_tDBOutput_10=nb_line_rejected_tDBOutput_10 + rejectedCount_tDBOutput_10;
	
        globalMap.put("tDBOutput_10_NB_LINE",nb_line_tDBOutput_10);
        globalMap.put("tDBOutput_10_NB_LINE_UPDATED",nb_line_update_tDBOutput_10);
        globalMap.put("tDBOutput_10_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_10);
        globalMap.put("tDBOutput_10_NB_LINE_DELETED",nb_line_deleted_tDBOutput_10);
        globalMap.put("tDBOutput_10_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_10);
    
	


			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("row10"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tDBOutput_10", true);
end_Hash.put("tDBOutput_10", System.currentTimeMillis());




/**
 * [tDBOutput_10 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_10 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_10";

	

 



/**
 * [tDBInput_10 finally ] stop
 */

	
	/**
	 * [tDBOutput_10 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_10";

	



    if (resourceMap.get("statementClosed_tDBOutput_10") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_10 = null;
                if ((pstmtToClose_tDBOutput_10 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_10")) != null) {
                    pstmtToClose_tDBOutput_10.close();
                }
    }
 



/**
 * [tDBOutput_10 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_10_SUBPROCESS_STATE", 1);
	}
	


public static class row11Struct implements routines.system.IPersistableRow<row11Struct> {
    final static byte[] commonByteArrayLock_VINCERE_ETL_garrison_gen_data_company = new byte[0];
    static byte[] commonByteArray_VINCERE_ETL_garrison_gen_data_company = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String company_externalid;

				public String getCompany_externalid () {
					return this.company_externalid;
				}
				
			    public String company_website;

				public String getCompany_website () {
					return this.company_website;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.company_externalid == null) ? 0 : this.company_externalid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row11Struct other = (row11Struct) obj;
		
						if (this.company_externalid == null) {
							if (other.company_externalid != null)
								return false;
						
						} else if (!this.company_externalid.equals(other.company_externalid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row11Struct other) {

		other.company_externalid = this.company_externalid;
	            other.company_website = this.company_website;
	            
	}

	public void copyKeysDataTo(row11Struct other) {

		other.company_externalid = this.company_externalid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_VINCERE_ETL_garrison_gen_data_company.length) {
				if(length < 1024 && commonByteArray_VINCERE_ETL_garrison_gen_data_company.length == 0) {
   					commonByteArray_VINCERE_ETL_garrison_gen_data_company = new byte[1024];
				} else {
   					commonByteArray_VINCERE_ETL_garrison_gen_data_company = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_VINCERE_ETL_garrison_gen_data_company, 0, length);
			strReturn = new String(commonByteArray_VINCERE_ETL_garrison_gen_data_company, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_VINCERE_ETL_garrison_gen_data_company) {

        	try {

        		int length = 0;
		
					this.company_externalid = readString(dis);
					
					this.company_website = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.company_externalid,dos);
					
					// String
				
						writeString(this.company_website,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("company_externalid="+company_externalid);
		sb.append(",company_website="+company_website);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row11Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.company_externalid, other.company_externalid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_11Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_11_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row11Struct row11 = new row11Struct();




	
	/**
	 * [tDBOutput_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_11", false);
		start_Hash.put("tDBOutput_11", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_11";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("row11"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tDBOutput_11 = 0;
		
	




int nb_line_tDBOutput_11 = 0;
int nb_line_update_tDBOutput_11 = 0;
int nb_line_inserted_tDBOutput_11 = 0;
int nb_line_deleted_tDBOutput_11 = 0;
int nb_line_rejected_tDBOutput_11 = 0;

int deletedCount_tDBOutput_11=0;
int updatedCount_tDBOutput_11=0;
int insertedCount_tDBOutput_11=0;

String tableName_tDBOutput_11 = "company_website";
boolean whetherReject_tDBOutput_11 = false;

       int batchSize_tDBOutput_11 = 10000;
       int batchSizeCounter_tDBOutput_11=0;
       int tmp_batchUpdateCount_tDBOutput_11 = 0;


java.sql.Connection conn_tDBOutput_11 = null;
    conn_tDBOutput_11 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");

            java.sql.DatabaseMetaData dbMetaData_tDBOutput_11 = conn_tDBOutput_11.getMetaData();
            boolean whetherExist_tDBOutput_11 = false;
            try (java.sql.ResultSet rsTable_tDBOutput_11 = dbMetaData_tDBOutput_11.getTables(null, null, null, new String[]{"TABLE"})) {
                while(rsTable_tDBOutput_11.next()) {
                    String table_tDBOutput_11 = rsTable_tDBOutput_11.getString("TABLE_NAME");
                    if(table_tDBOutput_11.equalsIgnoreCase("company_website")) {
                        whetherExist_tDBOutput_11 = true;
                        break;
                    }
                }
            }
                if(whetherExist_tDBOutput_11) {
                    try (java.sql.Statement stmtDrop_tDBOutput_11 = conn_tDBOutput_11.createStatement()) {
                        stmtDrop_tDBOutput_11.execute("DROP TABLE \"" + tableName_tDBOutput_11 + "\"");
                    }
                }
                try (java.sql.Statement stmtCreate_tDBOutput_11 = conn_tDBOutput_11.createStatement()) {
                    stmtCreate_tDBOutput_11.execute("CREATE TABLE \"" + tableName_tDBOutput_11 + "\"(\"company_externalid\" VARCHAR(13)   not null ,\"company_website\" VARCHAR(65)  ,primary key(\"company_externalid\"))");
                }
	    String insert_tDBOutput_11 = "INSERT INTO \"" + "company_website" + "\" (\"company_externalid\",\"company_website\") VALUES (?,?)";
	    java.sql.PreparedStatement pstmt_tDBOutput_11 = conn_tDBOutput_11.prepareStatement(insert_tDBOutput_11);
	    resourceMap.put("pstmt_tDBOutput_11", pstmt_tDBOutput_11);
	    

 



/**
 * [tDBOutput_11 begin ] stop
 */



	
	/**
	 * [tDBInput_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_11", false);
		start_Hash.put("tDBInput_11", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_11";

	
		int tos_count_tDBInput_11 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_11 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_11 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_11  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_11, talendToDBArray_tDBInput_11); 
		    int nb_line_tDBInput_11 = 0;
		    java.sql.Connection conn_tDBInput_11 = null;
		        conn_tDBInput_11 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
			String dbschema_tDBInput_11 = (String)globalMap.get("dbschema_tDBConnection_2");
		    
			java.sql.Statement stmt_tDBInput_11 = conn_tDBInput_11.createStatement();

		    String dbquery_tDBInput_11 = "\nselect \nconcat('', c.id) as company_externalid\n, c.web as company_website\nfrom company c \nwhere DeleteFlag=0\n";
			

            	globalMap.put("tDBInput_11_QUERY",dbquery_tDBInput_11);
		    java.sql.ResultSet rs_tDBInput_11 = null;

		    try {
		    	rs_tDBInput_11 = stmt_tDBInput_11.executeQuery(dbquery_tDBInput_11);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_11 = rs_tDBInput_11.getMetaData();
		    	int colQtyInRs_tDBInput_11 = rsmd_tDBInput_11.getColumnCount();

		    String tmpContent_tDBInput_11 = null;
		    
		    
		    while (rs_tDBInput_11.next()) {
		        nb_line_tDBInput_11++;
		        
							if(colQtyInRs_tDBInput_11 < 1) {
								row11.company_externalid = null;
							} else {
	                         		
           		tmpContent_tDBInput_11 = rs_tDBInput_11.getString(1);
            if(tmpContent_tDBInput_11 != null) {
            	if (talendToDBList_tDBInput_11 .contains(rsmd_tDBInput_11.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
            		row11.company_externalid = FormatterUtils.formatUnwithE(tmpContent_tDBInput_11);
            	} else {
                	row11.company_externalid = tmpContent_tDBInput_11.trim();
                }
            } else {
                row11.company_externalid = null;
            }
		                    }
							if(colQtyInRs_tDBInput_11 < 2) {
								row11.company_website = null;
							} else {
	                         		
           		tmpContent_tDBInput_11 = rs_tDBInput_11.getString(2);
            if(tmpContent_tDBInput_11 != null) {
            	if (talendToDBList_tDBInput_11 .contains(rsmd_tDBInput_11.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
            		row11.company_website = FormatterUtils.formatUnwithE(tmpContent_tDBInput_11);
            	} else {
                	row11.company_website = tmpContent_tDBInput_11.trim();
                }
            } else {
                row11.company_website = null;
            }
		                    }
					





 



/**
 * [tDBInput_11 begin ] stop
 */
	
	/**
	 * [tDBInput_11 main ] start
	 */

	

	
	
	currentComponent="tDBInput_11";

	

 


	tos_count_tDBInput_11++;

/**
 * [tDBInput_11 main ] stop
 */
	
	/**
	 * [tDBInput_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_11";

	

 



/**
 * [tDBInput_11 process_data_begin ] stop
 */

	
	/**
	 * [tDBOutput_11 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_11";

	

			//row11
			//row11


			
				
				if(execStat){
					runStat.updateStatOnConnection("row11"+iterateId,1, 1);
				}
				
				
				
			

		
	



        whetherReject_tDBOutput_11 = false;
                    if(row11.company_externalid == null) {
pstmt_tDBOutput_11.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_11.setString(1, row11.company_externalid);
}

                    if(row11.company_website == null) {
pstmt_tDBOutput_11.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_11.setString(2, row11.company_website);
}


                       pstmt_tDBOutput_11.addBatch();
                       batchSizeCounter_tDBOutput_11++;
                       nb_line_tDBOutput_11++;
                if ((batchSize_tDBOutput_11 > 0) && (batchSize_tDBOutput_11 <= batchSizeCounter_tDBOutput_11)) {
                    int[] status_tDBOutput_11 = null;
                    int countSum_tDBOutput_11 = 0;
                    try {
                        batchSizeCounter_tDBOutput_11 = 0;
                        status_tDBOutput_11 = pstmt_tDBOutput_11.executeBatch();
                        for(int countEach_tDBOutput_11: status_tDBOutput_11) {
                            countSum_tDBOutput_11 += (countEach_tDBOutput_11 < 0 ? 0 : countEach_tDBOutput_11);
                        }
                    }catch (java.sql.BatchUpdateException e){
                        for(int countEach_tDBOutput_11: e.getUpdateCounts()) {
                            countSum_tDBOutput_11 += (countEach_tDBOutput_11 < 0 ? 0 : countEach_tDBOutput_11);
                        }
                        System.err.println(e.getMessage());
                    }
                    try {
                        tmp_batchUpdateCount_tDBOutput_11 = pstmt_tDBOutput_11.getUpdateCount();
                    }catch (java.sql.SQLException e){
                        System.err.println(e.getMessage());
                    }
                    tmp_batchUpdateCount_tDBOutput_11 = tmp_batchUpdateCount_tDBOutput_11 > countSum_tDBOutput_11 ? tmp_batchUpdateCount_tDBOutput_11 : countSum_tDBOutput_11;
                        insertedCount_tDBOutput_11 += tmp_batchUpdateCount_tDBOutput_11;
               }

 


	tos_count_tDBOutput_11++;

/**
 * [tDBOutput_11 main ] stop
 */
	
	/**
	 * [tDBOutput_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_11";

	

 



/**
 * [tDBOutput_11 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_11";

	

 



/**
 * [tDBOutput_11 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_11";

	

 



/**
 * [tDBInput_11 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_11 end ] start
	 */

	

	
	
	currentComponent="tDBInput_11";

	

	}
}finally{
	if (rs_tDBInput_11 != null) {
		rs_tDBInput_11.close();
	}
	if (stmt_tDBInput_11 != null) {
		stmt_tDBInput_11.close();
	}
}
globalMap.put("tDBInput_11_NB_LINE",nb_line_tDBInput_11);

 

ok_Hash.put("tDBInput_11", true);
end_Hash.put("tDBInput_11", System.currentTimeMillis());




/**
 * [tDBInput_11 end ] stop
 */

	
	/**
	 * [tDBOutput_11 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_11";

	




                    int[] status_tDBOutput_11 = null;
                    int countSum_tDBOutput_11 = 0;
                    try {
                        if(pstmt_tDBOutput_11!=null && batchSizeCounter_tDBOutput_11 > 0 ){
                            status_tDBOutput_11 = pstmt_tDBOutput_11.executeBatch();
                            for(int countEach_tDBOutput_11: status_tDBOutput_11) {
                                countSum_tDBOutput_11 += (countEach_tDBOutput_11 < 0 ? 0 : countEach_tDBOutput_11);
                            }
                        }
                    }catch (java.sql.BatchUpdateException e){
                        for(int countEach_tDBOutput_11: e.getUpdateCounts()) {
                            countSum_tDBOutput_11 += (countEach_tDBOutput_11 < 0 ? 0 : countEach_tDBOutput_11);
                        }
                        System.err.println(e.getMessage());
                    }
                    if(pstmt_tDBOutput_11!=null && batchSizeCounter_tDBOutput_11 > 0 ){
                        try {
                            tmp_batchUpdateCount_tDBOutput_11 = pstmt_tDBOutput_11.getUpdateCount();
                        }catch (java.sql.SQLException e){

                        }
                        tmp_batchUpdateCount_tDBOutput_11 = tmp_batchUpdateCount_tDBOutput_11 > countSum_tDBOutput_11 ? tmp_batchUpdateCount_tDBOutput_11 : countSum_tDBOutput_11;
                            insertedCount_tDBOutput_11 += tmp_batchUpdateCount_tDBOutput_11;
                    }
        if(pstmt_tDBOutput_11 != null) {
            pstmt_tDBOutput_11.close();
            resourceMap.remove("pstmt_tDBOutput_11");
        }
    resourceMap.put("statementClosed_tDBOutput_11", true);

	int rejectedCount_tDBOutput_11 = 0;
	nb_line_deleted_tDBOutput_11=nb_line_deleted_tDBOutput_11+ deletedCount_tDBOutput_11;
	nb_line_update_tDBOutput_11=nb_line_update_tDBOutput_11 + updatedCount_tDBOutput_11;
	nb_line_inserted_tDBOutput_11=nb_line_inserted_tDBOutput_11 + insertedCount_tDBOutput_11;
	nb_line_rejected_tDBOutput_11=nb_line_rejected_tDBOutput_11 + rejectedCount_tDBOutput_11;
	
        globalMap.put("tDBOutput_11_NB_LINE",nb_line_tDBOutput_11);
        globalMap.put("tDBOutput_11_NB_LINE_UPDATED",nb_line_update_tDBOutput_11);
        globalMap.put("tDBOutput_11_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_11);
        globalMap.put("tDBOutput_11_NB_LINE_DELETED",nb_line_deleted_tDBOutput_11);
        globalMap.put("tDBOutput_11_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_11);
    
	


			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("row11"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tDBOutput_11", true);
end_Hash.put("tDBOutput_11", System.currentTimeMillis());




/**
 * [tDBOutput_11 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_11 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_11";

	

 



/**
 * [tDBInput_11 finally ] stop
 */

	
	/**
	 * [tDBOutput_11 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_11";

	



    if (resourceMap.get("statementClosed_tDBOutput_11") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_11 = null;
                if ((pstmtToClose_tDBOutput_11 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_11")) != null) {
                    pstmtToClose_tDBOutput_11.close();
                }
    }
 



/**
 * [tDBOutput_11 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_11_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final garrison_gen_data_company garrison_gen_data_companyClass = new garrison_gen_data_company();

        int exitCode = garrison_gen_data_companyClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = garrison_gen_data_company.class.getClassLoader().getResourceAsStream("vincere_etl/garrison_gen_data_company_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = garrison_gen_data_company.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                }
                
                inContext.close();
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("strivesales_Server", "id_String");
                            context.strivesales_Server=(String) context.getProperty("strivesales_Server");
                        context.setContextType("strivesales_AdditionalParams", "id_String");
                            context.strivesales_AdditionalParams=(String) context.getProperty("strivesales_AdditionalParams");
                        context.setContextType("strivesales_Schema", "id_String");
                            context.strivesales_Schema=(String) context.getProperty("strivesales_Schema");
                        context.setContextType("strivesales_Database", "id_String");
                            context.strivesales_Database=(String) context.getProperty("strivesales_Database");
                        context.setContextType("strivesales_Login", "id_String");
                            context.strivesales_Login=(String) context.getProperty("strivesales_Login");
                        context.setContextType("strivesales_Port", "id_String");
                            context.strivesales_Port=(String) context.getProperty("strivesales_Port");
                        context.setContextType("strivesales_Password", "id_Password");
                            String pwd_strivesales_Password_value = context.getProperty("strivesales_Password");
                            context.strivesales_Password = null;
                            if(pwd_strivesales_Password_value!=null) {
                                if(context_param.containsKey("strivesales_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.strivesales_Password = pwd_strivesales_Password_value;
                                } else if (!pwd_strivesales_Password_value.isEmpty()) {
                                    try {
                                        context.strivesales_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_strivesales_Password_value);
                                        context.put("strivesales_Password",context.strivesales_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("strivesales_Server")) {
                context.strivesales_Server = (String) parentContextMap.get("strivesales_Server");
            }if (parentContextMap.containsKey("strivesales_AdditionalParams")) {
                context.strivesales_AdditionalParams = (String) parentContextMap.get("strivesales_AdditionalParams");
            }if (parentContextMap.containsKey("strivesales_Schema")) {
                context.strivesales_Schema = (String) parentContextMap.get("strivesales_Schema");
            }if (parentContextMap.containsKey("strivesales_Database")) {
                context.strivesales_Database = (String) parentContextMap.get("strivesales_Database");
            }if (parentContextMap.containsKey("strivesales_Login")) {
                context.strivesales_Login = (String) parentContextMap.get("strivesales_Login");
            }if (parentContextMap.containsKey("strivesales_Port")) {
                context.strivesales_Port = (String) parentContextMap.get("strivesales_Port");
            }if (parentContextMap.containsKey("strivesales_Password")) {
                context.strivesales_Password = (java.lang.String) parentContextMap.get("strivesales_Password");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
			parametersToEncrypt.add("strivesales_Password");
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tDBInput_2Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBInput_2) {
globalMap.put("tDBInput_2_SUBPROCESS_STATE", -1);

e_tDBInput_2.printStackTrace();

}
try {
errorCode = null;tDBInput_3Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBInput_3) {
globalMap.put("tDBInput_3_SUBPROCESS_STATE", -1);

e_tDBInput_3.printStackTrace();

}
try {
errorCode = null;tDBConnection_2Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBConnection_2) {
globalMap.put("tDBConnection_2_SUBPROCESS_STATE", -1);

e_tDBConnection_2.printStackTrace();

}
try {
errorCode = null;tDBConnection_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBConnection_1) {
globalMap.put("tDBConnection_1_SUBPROCESS_STATE", -1);

e_tDBConnection_1.printStackTrace();

}
try {
errorCode = null;tDBInput_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBInput_1) {
globalMap.put("tDBInput_1_SUBPROCESS_STATE", -1);

e_tDBInput_1.printStackTrace();

}
try {
errorCode = null;tDBInput_4Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBInput_4) {
globalMap.put("tDBInput_4_SUBPROCESS_STATE", -1);

e_tDBInput_4.printStackTrace();

}
try {
errorCode = null;tDBInput_5Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBInput_5) {
globalMap.put("tDBInput_5_SUBPROCESS_STATE", -1);

e_tDBInput_5.printStackTrace();

}
try {
errorCode = null;tDBInput_6Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBInput_6) {
globalMap.put("tDBInput_6_SUBPROCESS_STATE", -1);

e_tDBInput_6.printStackTrace();

}
try {
errorCode = null;tDBInput_7Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBInput_7) {
globalMap.put("tDBInput_7_SUBPROCESS_STATE", -1);

e_tDBInput_7.printStackTrace();

}
try {
errorCode = null;tDBInput_8Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBInput_8) {
globalMap.put("tDBInput_8_SUBPROCESS_STATE", -1);

e_tDBInput_8.printStackTrace();

}
try {
errorCode = null;tDBInput_9Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBInput_9) {
globalMap.put("tDBInput_9_SUBPROCESS_STATE", -1);

e_tDBInput_9.printStackTrace();

}
try {
errorCode = null;tDBInput_10Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBInput_10) {
globalMap.put("tDBInput_10_SUBPROCESS_STATE", -1);

e_tDBInput_10.printStackTrace();

}
try {
errorCode = null;tDBInput_11Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBInput_11) {
globalMap.put("tDBInput_11_SUBPROCESS_STATE", -1);

e_tDBInput_11.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : garrison_gen_data_company");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tDBConnection_2");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
            obj_conn = globalMap.remove("conn_tDBConnection_1");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tDBConnection_2", globalMap.get("conn_tDBConnection_2"));
            connections.put("conn_tDBConnection_1", globalMap.get("conn_tDBConnection_1"));







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring=")) {//for trunjob call
			enableLogStash = "true".equalsIgnoreCase(arg.substring(13));
		}
		
		if(!enableLogStash) {
			enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     269691 characters generated by Talend Open Studio for Data Integration 
 *     on the November 22, 2019 at 11:49:27 AM ICT
 ************************************************************************************************/